
h:/IOT2/IOT2/13_Motion/13_6_driveByWire/target/5.9.0/p2/13_6_driveByWire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fbff0  085fb0a8  0000bff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004000  023fbff8  085fb0b0  0000bff8  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad64  085ff0b0  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000220  1007addc  1007addc  0002addc  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff128  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000e8c  085ff12c  085ff12c  0001f12c  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f12c  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0018a53f  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00015414  00000000  00000000  001aa53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0005f5bf  00000000  00000000  001bf953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003440  00000000  00000000  0021ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000f540  00000000  00000000  00222352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a484  00000000  00000000  00231892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004ec56  00000000  00000000  0025bd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0014dcf1  00000000  00000000  002aa96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009900  00000000  00000000  003f8660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	4813      	ldr	r0, [pc, #76]	; (85fb068 <module_user_pre_init+0x50>)
 85fb01a:	4914      	ldr	r1, [pc, #80]	; (85fb06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a13      	ldr	r2, [pc, #76]	; (85fb070 <module_user_pre_init+0x58>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b12      	ldr	r3, [pc, #72]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	4812      	ldr	r0, [pc, #72]	; (85fb078 <module_user_pre_init+0x60>)
 85fb030:	4a12      	ldr	r2, [pc, #72]	; (85fb07c <module_user_pre_init+0x64>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b12      	ldr	r3, [pc, #72]	; (85fb080 <module_user_pre_init+0x68>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fb03a:	4812      	ldr	r0, [pc, #72]	; (85fb084 <module_user_pre_init+0x6c>)
 85fb03c:	4912      	ldr	r1, [pc, #72]	; (85fb088 <module_user_pre_init+0x70>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a12      	ldr	r2, [pc, #72]	; (85fb08c <module_user_pre_init+0x74>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fb048:	4b0a      	ldr	r3, [pc, #40]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb04e:	4810      	ldr	r0, [pc, #64]	; (85fb090 <module_user_pre_init+0x78>)
 85fb050:	4910      	ldr	r1, [pc, #64]	; (85fb094 <module_user_pre_init+0x7c>)
 85fb052:	4288      	cmp	r0, r1
 85fb054:	d005      	beq.n	85fb062 <module_user_pre_init+0x4a>
 85fb056:	4a10      	ldr	r2, [pc, #64]	; (85fb098 <module_user_pre_init+0x80>)
 85fb058:	4282      	cmp	r2, r0
 85fb05a:	d002      	beq.n	85fb062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb05c:	4b05      	ldr	r3, [pc, #20]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb05e:	1a12      	subs	r2, r2, r0
 85fb060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb062:	4801      	ldr	r0, [pc, #4]	; (85fb068 <module_user_pre_init+0x50>)
 85fb064:	bd08      	pop	{r3, pc}
 85fb066:	bf00      	nop
 85fb068:	1007ad64 	.word	0x1007ad64
 85fb06c:	085ff0b0 	.word	0x085ff0b0
 85fb070:	1007addc 	.word	0x1007addc
 85fb074:	10110d2d 	.word	0x10110d2d
 85fb078:	1007addc 	.word	0x1007addc
 85fb07c:	1007affc 	.word	0x1007affc
 85fb080:	10110ea1 	.word	0x10110ea1
 85fb084:	023fbff0 	.word	0x023fbff0
 85fb088:	085fb0a8 	.word	0x085fb0a8
 85fb08c:	023fbff8 	.word	0x023fbff8
 85fb090:	023fbff8 	.word	0x023fbff8
 85fb094:	085fb0b0 	.word	0x085fb0b0
 85fb098:	023ffff8 	.word	0x023ffff8

085fb09c <dynalib_preinit>:
 85fb09c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fbff8 <__aeabi_drsub>:
 23fbff8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fbffc:	e002      	b.n	23fc004 <__adddf3>
 23fbffe:	bf00      	nop

023fc000 <__aeabi_dsub>:
 23fc000:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fc004 <__adddf3>:
 23fc004:	b530      	push	{r4, r5, lr}
 23fc006:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fc00a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fc00e:	ea94 0f05 	teq	r4, r5
 23fc012:	bf08      	it	eq
 23fc014:	ea90 0f02 	teqeq	r0, r2
 23fc018:	bf1f      	itttt	ne
 23fc01a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fc01e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fc022:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fc026:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fc02a:	f000 80e2 	beq.w	23fc1f2 <__adddf3+0x1ee>
 23fc02e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fc032:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fc036:	bfb8      	it	lt
 23fc038:	426d      	neglt	r5, r5
 23fc03a:	dd0c      	ble.n	23fc056 <__adddf3+0x52>
 23fc03c:	442c      	add	r4, r5
 23fc03e:	ea80 0202 	eor.w	r2, r0, r2
 23fc042:	ea81 0303 	eor.w	r3, r1, r3
 23fc046:	ea82 0000 	eor.w	r0, r2, r0
 23fc04a:	ea83 0101 	eor.w	r1, r3, r1
 23fc04e:	ea80 0202 	eor.w	r2, r0, r2
 23fc052:	ea81 0303 	eor.w	r3, r1, r3
 23fc056:	2d36      	cmp	r5, #54	; 0x36
 23fc058:	bf88      	it	hi
 23fc05a:	bd30      	pophi	{r4, r5, pc}
 23fc05c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fc060:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fc064:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fc068:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fc06c:	d002      	beq.n	23fc074 <__adddf3+0x70>
 23fc06e:	4240      	negs	r0, r0
 23fc070:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fc074:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fc078:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fc07c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fc080:	d002      	beq.n	23fc088 <__adddf3+0x84>
 23fc082:	4252      	negs	r2, r2
 23fc084:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fc088:	ea94 0f05 	teq	r4, r5
 23fc08c:	f000 80a7 	beq.w	23fc1de <__adddf3+0x1da>
 23fc090:	f1a4 0401 	sub.w	r4, r4, #1
 23fc094:	f1d5 0e20 	rsbs	lr, r5, #32
 23fc098:	db0d      	blt.n	23fc0b6 <__adddf3+0xb2>
 23fc09a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fc09e:	fa22 f205 	lsr.w	r2, r2, r5
 23fc0a2:	1880      	adds	r0, r0, r2
 23fc0a4:	f141 0100 	adc.w	r1, r1, #0
 23fc0a8:	fa03 f20e 	lsl.w	r2, r3, lr
 23fc0ac:	1880      	adds	r0, r0, r2
 23fc0ae:	fa43 f305 	asr.w	r3, r3, r5
 23fc0b2:	4159      	adcs	r1, r3
 23fc0b4:	e00e      	b.n	23fc0d4 <__adddf3+0xd0>
 23fc0b6:	f1a5 0520 	sub.w	r5, r5, #32
 23fc0ba:	f10e 0e20 	add.w	lr, lr, #32
 23fc0be:	2a01      	cmp	r2, #1
 23fc0c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fc0c4:	bf28      	it	cs
 23fc0c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fc0ca:	fa43 f305 	asr.w	r3, r3, r5
 23fc0ce:	18c0      	adds	r0, r0, r3
 23fc0d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fc0d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc0d8:	d507      	bpl.n	23fc0ea <__adddf3+0xe6>
 23fc0da:	f04f 0e00 	mov.w	lr, #0
 23fc0de:	f1dc 0c00 	rsbs	ip, ip, #0
 23fc0e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fc0e6:	eb6e 0101 	sbc.w	r1, lr, r1
 23fc0ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fc0ee:	d31b      	bcc.n	23fc128 <__adddf3+0x124>
 23fc0f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fc0f4:	d30c      	bcc.n	23fc110 <__adddf3+0x10c>
 23fc0f6:	0849      	lsrs	r1, r1, #1
 23fc0f8:	ea5f 0030 	movs.w	r0, r0, rrx
 23fc0fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fc100:	f104 0401 	add.w	r4, r4, #1
 23fc104:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fc108:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fc10c:	f080 809a 	bcs.w	23fc244 <__adddf3+0x240>
 23fc110:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fc114:	bf08      	it	eq
 23fc116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fc11a:	f150 0000 	adcs.w	r0, r0, #0
 23fc11e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc122:	ea41 0105 	orr.w	r1, r1, r5
 23fc126:	bd30      	pop	{r4, r5, pc}
 23fc128:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fc12c:	4140      	adcs	r0, r0
 23fc12e:	eb41 0101 	adc.w	r1, r1, r1
 23fc132:	3c01      	subs	r4, #1
 23fc134:	bf28      	it	cs
 23fc136:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fc13a:	d2e9      	bcs.n	23fc110 <__adddf3+0x10c>
 23fc13c:	f091 0f00 	teq	r1, #0
 23fc140:	bf04      	itt	eq
 23fc142:	4601      	moveq	r1, r0
 23fc144:	2000      	moveq	r0, #0
 23fc146:	fab1 f381 	clz	r3, r1
 23fc14a:	bf08      	it	eq
 23fc14c:	3320      	addeq	r3, #32
 23fc14e:	f1a3 030b 	sub.w	r3, r3, #11
 23fc152:	f1b3 0220 	subs.w	r2, r3, #32
 23fc156:	da0c      	bge.n	23fc172 <__adddf3+0x16e>
 23fc158:	320c      	adds	r2, #12
 23fc15a:	dd08      	ble.n	23fc16e <__adddf3+0x16a>
 23fc15c:	f102 0c14 	add.w	ip, r2, #20
 23fc160:	f1c2 020c 	rsb	r2, r2, #12
 23fc164:	fa01 f00c 	lsl.w	r0, r1, ip
 23fc168:	fa21 f102 	lsr.w	r1, r1, r2
 23fc16c:	e00c      	b.n	23fc188 <__adddf3+0x184>
 23fc16e:	f102 0214 	add.w	r2, r2, #20
 23fc172:	bfd8      	it	le
 23fc174:	f1c2 0c20 	rsble	ip, r2, #32
 23fc178:	fa01 f102 	lsl.w	r1, r1, r2
 23fc17c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fc180:	bfdc      	itt	le
 23fc182:	ea41 010c 	orrle.w	r1, r1, ip
 23fc186:	4090      	lslle	r0, r2
 23fc188:	1ae4      	subs	r4, r4, r3
 23fc18a:	bfa2      	ittt	ge
 23fc18c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fc190:	4329      	orrge	r1, r5
 23fc192:	bd30      	popge	{r4, r5, pc}
 23fc194:	ea6f 0404 	mvn.w	r4, r4
 23fc198:	3c1f      	subs	r4, #31
 23fc19a:	da1c      	bge.n	23fc1d6 <__adddf3+0x1d2>
 23fc19c:	340c      	adds	r4, #12
 23fc19e:	dc0e      	bgt.n	23fc1be <__adddf3+0x1ba>
 23fc1a0:	f104 0414 	add.w	r4, r4, #20
 23fc1a4:	f1c4 0220 	rsb	r2, r4, #32
 23fc1a8:	fa20 f004 	lsr.w	r0, r0, r4
 23fc1ac:	fa01 f302 	lsl.w	r3, r1, r2
 23fc1b0:	ea40 0003 	orr.w	r0, r0, r3
 23fc1b4:	fa21 f304 	lsr.w	r3, r1, r4
 23fc1b8:	ea45 0103 	orr.w	r1, r5, r3
 23fc1bc:	bd30      	pop	{r4, r5, pc}
 23fc1be:	f1c4 040c 	rsb	r4, r4, #12
 23fc1c2:	f1c4 0220 	rsb	r2, r4, #32
 23fc1c6:	fa20 f002 	lsr.w	r0, r0, r2
 23fc1ca:	fa01 f304 	lsl.w	r3, r1, r4
 23fc1ce:	ea40 0003 	orr.w	r0, r0, r3
 23fc1d2:	4629      	mov	r1, r5
 23fc1d4:	bd30      	pop	{r4, r5, pc}
 23fc1d6:	fa21 f004 	lsr.w	r0, r1, r4
 23fc1da:	4629      	mov	r1, r5
 23fc1dc:	bd30      	pop	{r4, r5, pc}
 23fc1de:	f094 0f00 	teq	r4, #0
 23fc1e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fc1e6:	bf06      	itte	eq
 23fc1e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fc1ec:	3401      	addeq	r4, #1
 23fc1ee:	3d01      	subne	r5, #1
 23fc1f0:	e74e      	b.n	23fc090 <__adddf3+0x8c>
 23fc1f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fc1f6:	bf18      	it	ne
 23fc1f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fc1fc:	d029      	beq.n	23fc252 <__adddf3+0x24e>
 23fc1fe:	ea94 0f05 	teq	r4, r5
 23fc202:	bf08      	it	eq
 23fc204:	ea90 0f02 	teqeq	r0, r2
 23fc208:	d005      	beq.n	23fc216 <__adddf3+0x212>
 23fc20a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fc20e:	bf04      	itt	eq
 23fc210:	4619      	moveq	r1, r3
 23fc212:	4610      	moveq	r0, r2
 23fc214:	bd30      	pop	{r4, r5, pc}
 23fc216:	ea91 0f03 	teq	r1, r3
 23fc21a:	bf1e      	ittt	ne
 23fc21c:	2100      	movne	r1, #0
 23fc21e:	2000      	movne	r0, #0
 23fc220:	bd30      	popne	{r4, r5, pc}
 23fc222:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fc226:	d105      	bne.n	23fc234 <__adddf3+0x230>
 23fc228:	0040      	lsls	r0, r0, #1
 23fc22a:	4149      	adcs	r1, r1
 23fc22c:	bf28      	it	cs
 23fc22e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fc232:	bd30      	pop	{r4, r5, pc}
 23fc234:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fc238:	bf3c      	itt	cc
 23fc23a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fc23e:	bd30      	popcc	{r4, r5, pc}
 23fc240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc244:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fc248:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fc24c:	f04f 0000 	mov.w	r0, #0
 23fc250:	bd30      	pop	{r4, r5, pc}
 23fc252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fc256:	bf1a      	itte	ne
 23fc258:	4619      	movne	r1, r3
 23fc25a:	4610      	movne	r0, r2
 23fc25c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fc260:	bf1c      	itt	ne
 23fc262:	460b      	movne	r3, r1
 23fc264:	4602      	movne	r2, r0
 23fc266:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fc26a:	bf06      	itte	eq
 23fc26c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fc270:	ea91 0f03 	teqeq	r1, r3
 23fc274:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fc278:	bd30      	pop	{r4, r5, pc}
 23fc27a:	bf00      	nop

023fc27c <__aeabi_ui2d>:
 23fc27c:	f090 0f00 	teq	r0, #0
 23fc280:	bf04      	itt	eq
 23fc282:	2100      	moveq	r1, #0
 23fc284:	4770      	bxeq	lr
 23fc286:	b530      	push	{r4, r5, lr}
 23fc288:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc28c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc290:	f04f 0500 	mov.w	r5, #0
 23fc294:	f04f 0100 	mov.w	r1, #0
 23fc298:	e750      	b.n	23fc13c <__adddf3+0x138>
 23fc29a:	bf00      	nop

023fc29c <__aeabi_i2d>:
 23fc29c:	f090 0f00 	teq	r0, #0
 23fc2a0:	bf04      	itt	eq
 23fc2a2:	2100      	moveq	r1, #0
 23fc2a4:	4770      	bxeq	lr
 23fc2a6:	b530      	push	{r4, r5, lr}
 23fc2a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc2ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc2b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fc2b4:	bf48      	it	mi
 23fc2b6:	4240      	negmi	r0, r0
 23fc2b8:	f04f 0100 	mov.w	r1, #0
 23fc2bc:	e73e      	b.n	23fc13c <__adddf3+0x138>
 23fc2be:	bf00      	nop

023fc2c0 <__aeabi_f2d>:
 23fc2c0:	0042      	lsls	r2, r0, #1
 23fc2c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fc2c6:	ea4f 0131 	mov.w	r1, r1, rrx
 23fc2ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fc2ce:	bf1f      	itttt	ne
 23fc2d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fc2d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fc2d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fc2dc:	4770      	bxne	lr
 23fc2de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fc2e2:	bf08      	it	eq
 23fc2e4:	4770      	bxeq	lr
 23fc2e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fc2ea:	bf04      	itt	eq
 23fc2ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fc2f0:	4770      	bxeq	lr
 23fc2f2:	b530      	push	{r4, r5, lr}
 23fc2f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fc2f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc2fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc300:	e71c      	b.n	23fc13c <__adddf3+0x138>
 23fc302:	bf00      	nop

023fc304 <__aeabi_ul2d>:
 23fc304:	ea50 0201 	orrs.w	r2, r0, r1
 23fc308:	bf08      	it	eq
 23fc30a:	4770      	bxeq	lr
 23fc30c:	b530      	push	{r4, r5, lr}
 23fc30e:	f04f 0500 	mov.w	r5, #0
 23fc312:	e00a      	b.n	23fc32a <__aeabi_l2d+0x16>

023fc314 <__aeabi_l2d>:
 23fc314:	ea50 0201 	orrs.w	r2, r0, r1
 23fc318:	bf08      	it	eq
 23fc31a:	4770      	bxeq	lr
 23fc31c:	b530      	push	{r4, r5, lr}
 23fc31e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fc322:	d502      	bpl.n	23fc32a <__aeabi_l2d+0x16>
 23fc324:	4240      	negs	r0, r0
 23fc326:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fc32a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc32e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc332:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fc336:	f43f aed8 	beq.w	23fc0ea <__adddf3+0xe6>
 23fc33a:	f04f 0203 	mov.w	r2, #3
 23fc33e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fc342:	bf18      	it	ne
 23fc344:	3203      	addne	r2, #3
 23fc346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fc34a:	bf18      	it	ne
 23fc34c:	3203      	addne	r2, #3
 23fc34e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fc352:	f1c2 0320 	rsb	r3, r2, #32
 23fc356:	fa00 fc03 	lsl.w	ip, r0, r3
 23fc35a:	fa20 f002 	lsr.w	r0, r0, r2
 23fc35e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fc362:	ea40 000e 	orr.w	r0, r0, lr
 23fc366:	fa21 f102 	lsr.w	r1, r1, r2
 23fc36a:	4414      	add	r4, r2
 23fc36c:	e6bd      	b.n	23fc0ea <__adddf3+0xe6>
 23fc36e:	bf00      	nop

023fc370 <__aeabi_dmul>:
 23fc370:	b570      	push	{r4, r5, r6, lr}
 23fc372:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fc376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fc37a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fc37e:	bf1d      	ittte	ne
 23fc380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fc384:	ea94 0f0c 	teqne	r4, ip
 23fc388:	ea95 0f0c 	teqne	r5, ip
 23fc38c:	f000 f8de 	bleq	23fc54c <__aeabi_dmul+0x1dc>
 23fc390:	442c      	add	r4, r5
 23fc392:	ea81 0603 	eor.w	r6, r1, r3
 23fc396:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fc39a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fc39e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fc3a2:	bf18      	it	ne
 23fc3a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fc3a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc3ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fc3b0:	d038      	beq.n	23fc424 <__aeabi_dmul+0xb4>
 23fc3b2:	fba0 ce02 	umull	ip, lr, r0, r2
 23fc3b6:	f04f 0500 	mov.w	r5, #0
 23fc3ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fc3be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fc3c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fc3c6:	f04f 0600 	mov.w	r6, #0
 23fc3ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fc3ce:	f09c 0f00 	teq	ip, #0
 23fc3d2:	bf18      	it	ne
 23fc3d4:	f04e 0e01 	orrne.w	lr, lr, #1
 23fc3d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fc3dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fc3e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fc3e4:	d204      	bcs.n	23fc3f0 <__aeabi_dmul+0x80>
 23fc3e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fc3ea:	416d      	adcs	r5, r5
 23fc3ec:	eb46 0606 	adc.w	r6, r6, r6
 23fc3f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fc3f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fc3f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fc3fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fc400:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fc404:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fc408:	bf88      	it	hi
 23fc40a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fc40e:	d81e      	bhi.n	23fc44e <__aeabi_dmul+0xde>
 23fc410:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fc414:	bf08      	it	eq
 23fc416:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fc41a:	f150 0000 	adcs.w	r0, r0, #0
 23fc41e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc422:	bd70      	pop	{r4, r5, r6, pc}
 23fc424:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fc428:	ea46 0101 	orr.w	r1, r6, r1
 23fc42c:	ea40 0002 	orr.w	r0, r0, r2
 23fc430:	ea81 0103 	eor.w	r1, r1, r3
 23fc434:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fc438:	bfc2      	ittt	gt
 23fc43a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fc43e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fc442:	bd70      	popgt	{r4, r5, r6, pc}
 23fc444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc448:	f04f 0e00 	mov.w	lr, #0
 23fc44c:	3c01      	subs	r4, #1
 23fc44e:	f300 80ab 	bgt.w	23fc5a8 <__aeabi_dmul+0x238>
 23fc452:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fc456:	bfde      	ittt	le
 23fc458:	2000      	movle	r0, #0
 23fc45a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fc45e:	bd70      	pople	{r4, r5, r6, pc}
 23fc460:	f1c4 0400 	rsb	r4, r4, #0
 23fc464:	3c20      	subs	r4, #32
 23fc466:	da35      	bge.n	23fc4d4 <__aeabi_dmul+0x164>
 23fc468:	340c      	adds	r4, #12
 23fc46a:	dc1b      	bgt.n	23fc4a4 <__aeabi_dmul+0x134>
 23fc46c:	f104 0414 	add.w	r4, r4, #20
 23fc470:	f1c4 0520 	rsb	r5, r4, #32
 23fc474:	fa00 f305 	lsl.w	r3, r0, r5
 23fc478:	fa20 f004 	lsr.w	r0, r0, r4
 23fc47c:	fa01 f205 	lsl.w	r2, r1, r5
 23fc480:	ea40 0002 	orr.w	r0, r0, r2
 23fc484:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fc488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc48c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fc490:	fa21 f604 	lsr.w	r6, r1, r4
 23fc494:	eb42 0106 	adc.w	r1, r2, r6
 23fc498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fc49c:	bf08      	it	eq
 23fc49e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fc4a2:	bd70      	pop	{r4, r5, r6, pc}
 23fc4a4:	f1c4 040c 	rsb	r4, r4, #12
 23fc4a8:	f1c4 0520 	rsb	r5, r4, #32
 23fc4ac:	fa00 f304 	lsl.w	r3, r0, r4
 23fc4b0:	fa20 f005 	lsr.w	r0, r0, r5
 23fc4b4:	fa01 f204 	lsl.w	r2, r1, r4
 23fc4b8:	ea40 0002 	orr.w	r0, r0, r2
 23fc4bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc4c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fc4c4:	f141 0100 	adc.w	r1, r1, #0
 23fc4c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fc4cc:	bf08      	it	eq
 23fc4ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fc4d2:	bd70      	pop	{r4, r5, r6, pc}
 23fc4d4:	f1c4 0520 	rsb	r5, r4, #32
 23fc4d8:	fa00 f205 	lsl.w	r2, r0, r5
 23fc4dc:	ea4e 0e02 	orr.w	lr, lr, r2
 23fc4e0:	fa20 f304 	lsr.w	r3, r0, r4
 23fc4e4:	fa01 f205 	lsl.w	r2, r1, r5
 23fc4e8:	ea43 0302 	orr.w	r3, r3, r2
 23fc4ec:	fa21 f004 	lsr.w	r0, r1, r4
 23fc4f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc4f4:	fa21 f204 	lsr.w	r2, r1, r4
 23fc4f8:	ea20 0002 	bic.w	r0, r0, r2
 23fc4fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fc500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fc504:	bf08      	it	eq
 23fc506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fc50a:	bd70      	pop	{r4, r5, r6, pc}
 23fc50c:	f094 0f00 	teq	r4, #0
 23fc510:	d10f      	bne.n	23fc532 <__aeabi_dmul+0x1c2>
 23fc512:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fc516:	0040      	lsls	r0, r0, #1
 23fc518:	eb41 0101 	adc.w	r1, r1, r1
 23fc51c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc520:	bf08      	it	eq
 23fc522:	3c01      	subeq	r4, #1
 23fc524:	d0f7      	beq.n	23fc516 <__aeabi_dmul+0x1a6>
 23fc526:	ea41 0106 	orr.w	r1, r1, r6
 23fc52a:	f095 0f00 	teq	r5, #0
 23fc52e:	bf18      	it	ne
 23fc530:	4770      	bxne	lr
 23fc532:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fc536:	0052      	lsls	r2, r2, #1
 23fc538:	eb43 0303 	adc.w	r3, r3, r3
 23fc53c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fc540:	bf08      	it	eq
 23fc542:	3d01      	subeq	r5, #1
 23fc544:	d0f7      	beq.n	23fc536 <__aeabi_dmul+0x1c6>
 23fc546:	ea43 0306 	orr.w	r3, r3, r6
 23fc54a:	4770      	bx	lr
 23fc54c:	ea94 0f0c 	teq	r4, ip
 23fc550:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fc554:	bf18      	it	ne
 23fc556:	ea95 0f0c 	teqne	r5, ip
 23fc55a:	d00c      	beq.n	23fc576 <__aeabi_dmul+0x206>
 23fc55c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc560:	bf18      	it	ne
 23fc562:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc566:	d1d1      	bne.n	23fc50c <__aeabi_dmul+0x19c>
 23fc568:	ea81 0103 	eor.w	r1, r1, r3
 23fc56c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc570:	f04f 0000 	mov.w	r0, #0
 23fc574:	bd70      	pop	{r4, r5, r6, pc}
 23fc576:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc57a:	bf06      	itte	eq
 23fc57c:	4610      	moveq	r0, r2
 23fc57e:	4619      	moveq	r1, r3
 23fc580:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc584:	d019      	beq.n	23fc5ba <__aeabi_dmul+0x24a>
 23fc586:	ea94 0f0c 	teq	r4, ip
 23fc58a:	d102      	bne.n	23fc592 <__aeabi_dmul+0x222>
 23fc58c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fc590:	d113      	bne.n	23fc5ba <__aeabi_dmul+0x24a>
 23fc592:	ea95 0f0c 	teq	r5, ip
 23fc596:	d105      	bne.n	23fc5a4 <__aeabi_dmul+0x234>
 23fc598:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fc59c:	bf1c      	itt	ne
 23fc59e:	4610      	movne	r0, r2
 23fc5a0:	4619      	movne	r1, r3
 23fc5a2:	d10a      	bne.n	23fc5ba <__aeabi_dmul+0x24a>
 23fc5a4:	ea81 0103 	eor.w	r1, r1, r3
 23fc5a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc5ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fc5b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fc5b4:	f04f 0000 	mov.w	r0, #0
 23fc5b8:	bd70      	pop	{r4, r5, r6, pc}
 23fc5ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fc5be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fc5c2:	bd70      	pop	{r4, r5, r6, pc}

023fc5c4 <__aeabi_ddiv>:
 23fc5c4:	b570      	push	{r4, r5, r6, lr}
 23fc5c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fc5ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fc5ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fc5d2:	bf1d      	ittte	ne
 23fc5d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fc5d8:	ea94 0f0c 	teqne	r4, ip
 23fc5dc:	ea95 0f0c 	teqne	r5, ip
 23fc5e0:	f000 f8a7 	bleq	23fc732 <__aeabi_ddiv+0x16e>
 23fc5e4:	eba4 0405 	sub.w	r4, r4, r5
 23fc5e8:	ea81 0e03 	eor.w	lr, r1, r3
 23fc5ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fc5f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fc5f4:	f000 8088 	beq.w	23fc708 <__aeabi_ddiv+0x144>
 23fc5f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fc5fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fc600:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fc604:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fc608:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fc60c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fc610:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fc614:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fc618:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fc61c:	429d      	cmp	r5, r3
 23fc61e:	bf08      	it	eq
 23fc620:	4296      	cmpeq	r6, r2
 23fc622:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fc626:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fc62a:	d202      	bcs.n	23fc632 <__aeabi_ddiv+0x6e>
 23fc62c:	085b      	lsrs	r3, r3, #1
 23fc62e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc632:	1ab6      	subs	r6, r6, r2
 23fc634:	eb65 0503 	sbc.w	r5, r5, r3
 23fc638:	085b      	lsrs	r3, r3, #1
 23fc63a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc63e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fc642:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fc646:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc64a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc64e:	bf22      	ittt	cs
 23fc650:	1ab6      	subcs	r6, r6, r2
 23fc652:	4675      	movcs	r5, lr
 23fc654:	ea40 000c 	orrcs.w	r0, r0, ip
 23fc658:	085b      	lsrs	r3, r3, #1
 23fc65a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc65e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc662:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc666:	bf22      	ittt	cs
 23fc668:	1ab6      	subcs	r6, r6, r2
 23fc66a:	4675      	movcs	r5, lr
 23fc66c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fc670:	085b      	lsrs	r3, r3, #1
 23fc672:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc676:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc67a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc67e:	bf22      	ittt	cs
 23fc680:	1ab6      	subcs	r6, r6, r2
 23fc682:	4675      	movcs	r5, lr
 23fc684:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fc688:	085b      	lsrs	r3, r3, #1
 23fc68a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc68e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc692:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc696:	bf22      	ittt	cs
 23fc698:	1ab6      	subcs	r6, r6, r2
 23fc69a:	4675      	movcs	r5, lr
 23fc69c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fc6a0:	ea55 0e06 	orrs.w	lr, r5, r6
 23fc6a4:	d018      	beq.n	23fc6d8 <__aeabi_ddiv+0x114>
 23fc6a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fc6aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fc6ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fc6b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fc6b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fc6ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fc6be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fc6c2:	d1c0      	bne.n	23fc646 <__aeabi_ddiv+0x82>
 23fc6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc6c8:	d10b      	bne.n	23fc6e2 <__aeabi_ddiv+0x11e>
 23fc6ca:	ea41 0100 	orr.w	r1, r1, r0
 23fc6ce:	f04f 0000 	mov.w	r0, #0
 23fc6d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fc6d6:	e7b6      	b.n	23fc646 <__aeabi_ddiv+0x82>
 23fc6d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc6dc:	bf04      	itt	eq
 23fc6de:	4301      	orreq	r1, r0
 23fc6e0:	2000      	moveq	r0, #0
 23fc6e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fc6e6:	bf88      	it	hi
 23fc6e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fc6ec:	f63f aeaf 	bhi.w	23fc44e <__aeabi_dmul+0xde>
 23fc6f0:	ebb5 0c03 	subs.w	ip, r5, r3
 23fc6f4:	bf04      	itt	eq
 23fc6f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fc6fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fc6fe:	f150 0000 	adcs.w	r0, r0, #0
 23fc702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc706:	bd70      	pop	{r4, r5, r6, pc}
 23fc708:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fc70c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fc710:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fc714:	bfc2      	ittt	gt
 23fc716:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fc71a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fc71e:	bd70      	popgt	{r4, r5, r6, pc}
 23fc720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc724:	f04f 0e00 	mov.w	lr, #0
 23fc728:	3c01      	subs	r4, #1
 23fc72a:	e690      	b.n	23fc44e <__aeabi_dmul+0xde>
 23fc72c:	ea45 0e06 	orr.w	lr, r5, r6
 23fc730:	e68d      	b.n	23fc44e <__aeabi_dmul+0xde>
 23fc732:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fc736:	ea94 0f0c 	teq	r4, ip
 23fc73a:	bf08      	it	eq
 23fc73c:	ea95 0f0c 	teqeq	r5, ip
 23fc740:	f43f af3b 	beq.w	23fc5ba <__aeabi_dmul+0x24a>
 23fc744:	ea94 0f0c 	teq	r4, ip
 23fc748:	d10a      	bne.n	23fc760 <__aeabi_ddiv+0x19c>
 23fc74a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fc74e:	f47f af34 	bne.w	23fc5ba <__aeabi_dmul+0x24a>
 23fc752:	ea95 0f0c 	teq	r5, ip
 23fc756:	f47f af25 	bne.w	23fc5a4 <__aeabi_dmul+0x234>
 23fc75a:	4610      	mov	r0, r2
 23fc75c:	4619      	mov	r1, r3
 23fc75e:	e72c      	b.n	23fc5ba <__aeabi_dmul+0x24a>
 23fc760:	ea95 0f0c 	teq	r5, ip
 23fc764:	d106      	bne.n	23fc774 <__aeabi_ddiv+0x1b0>
 23fc766:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fc76a:	f43f aefd 	beq.w	23fc568 <__aeabi_dmul+0x1f8>
 23fc76e:	4610      	mov	r0, r2
 23fc770:	4619      	mov	r1, r3
 23fc772:	e722      	b.n	23fc5ba <__aeabi_dmul+0x24a>
 23fc774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc778:	bf18      	it	ne
 23fc77a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc77e:	f47f aec5 	bne.w	23fc50c <__aeabi_dmul+0x19c>
 23fc782:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fc786:	f47f af0d 	bne.w	23fc5a4 <__aeabi_dmul+0x234>
 23fc78a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fc78e:	f47f aeeb 	bne.w	23fc568 <__aeabi_dmul+0x1f8>
 23fc792:	e712      	b.n	23fc5ba <__aeabi_dmul+0x24a>

023fc794 <__aeabi_d2f>:
 23fc794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fc798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fc79c:	bf24      	itt	cs
 23fc79e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fc7a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fc7a6:	d90d      	bls.n	23fc7c4 <__aeabi_d2f+0x30>
 23fc7a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fc7ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fc7b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fc7b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fc7b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fc7bc:	bf08      	it	eq
 23fc7be:	f020 0001 	biceq.w	r0, r0, #1
 23fc7c2:	4770      	bx	lr
 23fc7c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fc7c8:	d121      	bne.n	23fc80e <__aeabi_d2f+0x7a>
 23fc7ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fc7ce:	bfbc      	itt	lt
 23fc7d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fc7d4:	4770      	bxlt	lr
 23fc7d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc7da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fc7de:	f1c2 0218 	rsb	r2, r2, #24
 23fc7e2:	f1c2 0c20 	rsb	ip, r2, #32
 23fc7e6:	fa10 f30c 	lsls.w	r3, r0, ip
 23fc7ea:	fa20 f002 	lsr.w	r0, r0, r2
 23fc7ee:	bf18      	it	ne
 23fc7f0:	f040 0001 	orrne.w	r0, r0, #1
 23fc7f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fc7f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fc7fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fc800:	ea40 000c 	orr.w	r0, r0, ip
 23fc804:	fa23 f302 	lsr.w	r3, r3, r2
 23fc808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fc80c:	e7cc      	b.n	23fc7a8 <__aeabi_d2f+0x14>
 23fc80e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fc812:	d107      	bne.n	23fc824 <__aeabi_d2f+0x90>
 23fc814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fc818:	bf1e      	ittt	ne
 23fc81a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fc81e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fc822:	4770      	bxne	lr
 23fc824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fc828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fc82c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fc830:	4770      	bx	lr
 23fc832:	bf00      	nop

023fc834 <strcmp>:
 23fc834:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fc838:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fc83c:	2a01      	cmp	r2, #1
 23fc83e:	bf28      	it	cs
 23fc840:	429a      	cmpcs	r2, r3
 23fc842:	d0f7      	beq.n	23fc834 <strcmp>
 23fc844:	1ad0      	subs	r0, r2, r3
 23fc846:	4770      	bx	lr

023fc848 <strlen>:
 23fc848:	4603      	mov	r3, r0
 23fc84a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fc84e:	2a00      	cmp	r2, #0
 23fc850:	d1fb      	bne.n	23fc84a <strlen+0x2>
 23fc852:	1a18      	subs	r0, r3, r0
 23fc854:	3801      	subs	r0, #1
 23fc856:	4770      	bx	lr

023fc858 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fc858:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fc85a:	f002 f951 	bl	23feb00 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc85e:	2500      	movs	r5, #0
 23fc860:	4e05      	ldr	r6, [pc, #20]	; (23fc878 <module_user_init+0x20>)
 23fc862:	4c06      	ldr	r4, [pc, #24]	; (23fc87c <module_user_init+0x24>)
 23fc864:	1ba4      	subs	r4, r4, r6
 23fc866:	08a4      	lsrs	r4, r4, #2
 23fc868:	42ac      	cmp	r4, r5
 23fc86a:	d100      	bne.n	23fc86e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fc86c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fc86e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fc872:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc874:	3501      	adds	r5, #1
 23fc876:	e7f7      	b.n	23fc868 <module_user_init+0x10>
 23fc878:	023fffd0 	.word	0x023fffd0
 23fc87c:	023ffff8 	.word	0x023ffff8

023fc880 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fc880:	f000 b85a 	b.w	23fc938 <setup>

023fc884 <module_user_loop>:
}

void module_user_loop() {
 23fc884:	b508      	push	{r3, lr}
    loop();
 23fc886:	f000 f873 	bl	23fc970 <loop>
    _post_loop();
}
 23fc88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fc88e:	f002 b8ef 	b.w	23fea70 <_post_loop>

023fc892 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fc892:	f000 beaf 	b.w	23fd5f4 <malloc>

023fc896 <_Znaj>:
 23fc896:	f000 bead 	b.w	23fd5f4 <malloc>

023fc89a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fc89a:	f000 beb9 	b.w	23fd610 <free>
	...

023fc8a0 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc8a0:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fc8a2:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc8a4:	4a02      	ldr	r2, [pc, #8]	; (23fc8b0 <__cxa_pure_virtual+0x10>)
 23fc8a6:	4903      	ldr	r1, [pc, #12]	; (23fc8b4 <__cxa_pure_virtual+0x14>)
 23fc8a8:	f000 fd70 	bl	23fd38c <panic_>
  while (1);
 23fc8ac:	e7fe      	b.n	23fc8ac <__cxa_pure_virtual+0xc>
 23fc8ae:	bf00      	nop
 23fc8b0:	023fcf49 	.word	0x023fcf49
 23fc8b4:	023ffb50 	.word	0x023ffb50

023fc8b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fc8b8:	7800      	ldrb	r0, [r0, #0]
 23fc8ba:	fab0 f080 	clz	r0, r0
 23fc8be:	0940      	lsrs	r0, r0, #5
 23fc8c0:	4770      	bx	lr

023fc8c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fc8c2:	2301      	movs	r3, #1
 23fc8c4:	7003      	strb	r3, [r0, #0]
 23fc8c6:	4770      	bx	lr

023fc8c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fc8c8:	4770      	bx	lr

023fc8ca <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23fc8ca:	6803      	ldr	r3, [r0, #0]
 23fc8cc:	b2c9      	uxtb	r1, r1
 23fc8ce:	689b      	ldr	r3, [r3, #8]
 23fc8d0:	4718      	bx	r3
	...

023fc8d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fc8d4:	b510      	push	{r4, lr}
 23fc8d6:	4604      	mov	r4, r0
 23fc8d8:	4b09      	ldr	r3, [pc, #36]	; (23fc900 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fc8da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fc8dc:	f001 fa44 	bl	23fdd68 <_ZN5spark10LogManager8instanceEv>
 23fc8e0:	4621      	mov	r1, r4
 23fc8e2:	f001 fc8d 	bl	23fe200 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fc8e6:	f002 fa17 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fc8ea:	f002 fa09 	bl	23fed00 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fc8ee:	4620      	mov	r0, r4
 23fc8f0:	4b04      	ldr	r3, [pc, #16]	; (23fc904 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fc8f2:	f840 3b04 	str.w	r3, [r0], #4
 23fc8f6:	f001 fb0d 	bl	23fdf14 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fc8fa:	4620      	mov	r0, r4
 23fc8fc:	bd10      	pop	{r4, pc}
 23fc8fe:	bf00      	nop
 23fc900:	023ffb94 	.word	0x023ffb94
 23fc904:	023ffb7c 	.word	0x023ffb7c

023fc908 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fc908:	b510      	push	{r4, lr}
 23fc90a:	4604      	mov	r4, r0
    }
 23fc90c:	f7ff ffe2 	bl	23fc8d4 <_ZN5spark16SerialLogHandlerD1Ev>
 23fc910:	4620      	mov	r0, r4
 23fc912:	2124      	movs	r1, #36	; 0x24
 23fc914:	f7ff ffc1 	bl	23fc89a <_ZdlPvj>
 23fc918:	4620      	mov	r0, r4
 23fc91a:	bd10      	pop	{r4, pc}

023fc91c <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fc91c:	b40e      	push	{r1, r2, r3}
 23fc91e:	b503      	push	{r0, r1, lr}
 23fc920:	ab03      	add	r3, sp, #12
 23fc922:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23fc926:	2100      	movs	r1, #0
        va_start(args, format);
 23fc928:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23fc92a:	f001 f862 	bl	23fd9f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fc92e:	b002      	add	sp, #8
 23fc930:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc934:	b003      	add	sp, #12
 23fc936:	4770      	bx	lr

023fc938 <setup>:
float w_z, degree, steps;
const int DELTAT = 100;
unsigned int lastTime;
Stepper stepper(2048, D3, D4, D5, D6);
// setup() runs once, when the device is first turned on
void setup() {
 23fc938:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here
  //bigStepper.setSpeed(12);
  Wire.begin();
 23fc93a:	f002 ff31 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc93e:	f002 fac9 	bl	23feed4 <_ZN7TwoWire5beginEv>
  //Begin transmission to MPU-6050
  Wire.beginTransmission(MPUADDR);
 23fc942:	f002 ff2d 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc946:	2168      	movs	r1, #104	; 0x68
 23fc948:	f002 faef 	bl	23fef2a <_ZN7TwoWire17beginTransmissionEi>
  //Select and write to PWR_MGMT1 register
  Wire.write(0x47);
 23fc94c:	f002 ff28 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc950:	2147      	movs	r1, #71	; 0x47
 23fc952:	f7ff ffba 	bl	23fc8ca <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(0x00);//Wakes up MPU-6050
 23fc956:	f002 ff23 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc95a:	2100      	movs	r1, #0
 23fc95c:	f7ff ffb5 	bl	23fc8ca <_ZN7TwoWire5writeEi.isra.0>
  //End transmission and close connection
  Wire.endTransmission(true);
 23fc960:	f002 ff1e 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
}
 23fc964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission(true);
 23fc968:	2101      	movs	r1, #1
 23fc96a:	f002 bae1 	b.w	23fef30 <_ZN7TwoWire15endTransmissionEh>
	...

023fc970 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 23fc970:	b538      	push	{r3, r4, r5, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fc972:	f000 fb05 	bl	23fcf80 <HAL_Timer_Get_Milli_Seconds>
  if((millis()-lastTime) > DELTAT){
 23fc976:	4c3c      	ldr	r4, [pc, #240]	; (23fca68 <loop+0xf8>)
 23fc978:	6823      	ldr	r3, [r4, #0]
 23fc97a:	1ac0      	subs	r0, r0, r3
 23fc97c:	2864      	cmp	r0, #100	; 0x64
 23fc97e:	d965      	bls.n	23fca4c <loop+0xdc>
 23fc980:	f000 fafe 	bl	23fcf80 <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
 23fc984:	6020      	str	r0, [r4, #0]
    Wire.beginTransmission(MPUADDR);
 23fc986:	f002 ff0b 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc98a:	2168      	movs	r1, #104	; 0x68
 23fc98c:	f002 facd 	bl	23fef2a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(0x47);
 23fc990:	f002 ff06 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc994:	2147      	movs	r1, #71	; 0x47
 23fc996:	f7ff ff98 	bl	23fc8ca <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission(false);
 23fc99a:	f002 ff01 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc99e:	2100      	movs	r1, #0
 23fc9a0:	f002 fac6 	bl	23fef30 <_ZN7TwoWire15endTransmissionEh>

    Wire.requestFrom(MPUADDR, 2, true);
 23fc9a4:	f002 fefc 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc9a8:	2202      	movs	r2, #2
 23fc9aa:	2168      	movs	r1, #104	; 0x68
 23fc9ac:	2301      	movs	r3, #1
 23fc9ae:	f002 faa4 	bl	23feefa <_ZN7TwoWire11requestFromEhjh>
    gyroZh = Wire.read();
 23fc9b2:	f002 fef5 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc9b6:	6803      	ldr	r3, [r0, #0]
 23fc9b8:	4d2c      	ldr	r5, [pc, #176]	; (23fca6c <loop+0xfc>)
 23fc9ba:	695b      	ldr	r3, [r3, #20]
 23fc9bc:	4798      	blx	r3
 23fc9be:	7028      	strb	r0, [r5, #0]
    gyroZL = Wire.read();
 23fc9c0:	f002 feee 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23fc9c4:	6803      	ldr	r3, [r0, #0]

    gyroZ = gyroZh << 8 | gyroZL;
 23fc9c6:	4c2a      	ldr	r4, [pc, #168]	; (23fca70 <loop+0x100>)
    gyroZL = Wire.read();
 23fc9c8:	695b      	ldr	r3, [r3, #20]
 23fc9ca:	4798      	blx	r3
 23fc9cc:	4b29      	ldr	r3, [pc, #164]	; (23fca74 <loop+0x104>)
 23fc9ce:	b2c0      	uxtb	r0, r0
 23fc9d0:	7018      	strb	r0, [r3, #0]
    gyroZ = gyroZh << 8 | gyroZL;
 23fc9d2:	782b      	ldrb	r3, [r5, #0]
 23fc9d4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 23fc9d8:	8020      	strh	r0, [r4, #0]
    Serial.printf("Z Gyro: %i\n", gyroZ);
 23fc9da:	f002 f99d 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fc9de:	f9b4 2000 	ldrsh.w	r2, [r4]
 23fc9e2:	4925      	ldr	r1, [pc, #148]	; (23fca78 <loop+0x108>)
 23fc9e4:	f7ff ff9a 	bl	23fc91c <_ZN5Print6printfEPKcz>
    w_z = (1/131.0)*gyroZ;
 23fc9e8:	f9b4 0000 	ldrsh.w	r0, [r4]
 23fc9ec:	f7ff fc56 	bl	23fc29c <__aeabi_i2d>
 23fc9f0:	a317      	add	r3, pc, #92	; (adr r3, 23fca50 <loop+0xe0>)
 23fc9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc9f6:	f7ff fcbb 	bl	23fc370 <__aeabi_dmul>
 23fc9fa:	f7ff fecb 	bl	23fc794 <__aeabi_d2f>
 23fc9fe:	4b1f      	ldr	r3, [pc, #124]	; (23fca7c <loop+0x10c>)
    degree = w_z * (DELTAT/1000.0);
    steps = (2048/360.0)*degree;
 23fca00:	4c1f      	ldr	r4, [pc, #124]	; (23fca80 <loop+0x110>)
    w_z = (1/131.0)*gyroZ;
 23fca02:	6018      	str	r0, [r3, #0]
    degree = w_z * (DELTAT/1000.0);
 23fca04:	f7ff fc5c 	bl	23fc2c0 <__aeabi_f2d>
 23fca08:	a313      	add	r3, pc, #76	; (adr r3, 23fca58 <loop+0xe8>)
 23fca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca0e:	f7ff fcaf 	bl	23fc370 <__aeabi_dmul>
 23fca12:	f7ff febf 	bl	23fc794 <__aeabi_d2f>
 23fca16:	4b1b      	ldr	r3, [pc, #108]	; (23fca84 <loop+0x114>)
 23fca18:	6018      	str	r0, [r3, #0]
    steps = (2048/360.0)*degree;
 23fca1a:	f7ff fc51 	bl	23fc2c0 <__aeabi_f2d>
 23fca1e:	a310      	add	r3, pc, #64	; (adr r3, 23fca60 <loop+0xf0>)
 23fca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca24:	f7ff fca4 	bl	23fc370 <__aeabi_dmul>
 23fca28:	f7ff feb4 	bl	23fc794 <__aeabi_d2f>
    stepper.setSpeed(12);
 23fca2c:	210c      	movs	r1, #12
    steps = (2048/360.0)*degree;
 23fca2e:	6020      	str	r0, [r4, #0]
    stepper.setSpeed(12);
 23fca30:	4815      	ldr	r0, [pc, #84]	; (23fca88 <loop+0x118>)
 23fca32:	f000 f923 	bl	23fcc7c <_ZN7Stepper8setSpeedEl>
    stepper.step(steps);
 23fca36:	edd4 7a00 	vldr	s15, [r4]
  }
  

 23fca3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    stepper.step(steps);
 23fca3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23fca42:	4811      	ldr	r0, [pc, #68]	; (23fca88 <loop+0x118>)
 23fca44:	ee17 1a90 	vmov	r1, s15
 23fca48:	f000 b9ea 	b.w	23fce20 <_ZN7Stepper4stepEi>
 23fca4c:	bd38      	pop	{r3, r4, r5, pc}
 23fca4e:	bf00      	nop
 23fca50:	9e4a4271 	.word	0x9e4a4271
 23fca54:	3f7f4465 	.word	0x3f7f4465
 23fca58:	9999999a 	.word	0x9999999a
 23fca5c:	3fb99999 	.word	0x3fb99999
 23fca60:	16c16c17 	.word	0x16c16c17
 23fca64:	4016c16c 	.word	0x4016c16c
 23fca68:	1007adf0 	.word	0x1007adf0
 23fca6c:	1007adef 	.word	0x1007adef
 23fca70:	1007adec 	.word	0x1007adec
 23fca74:	1007adee 	.word	0x1007adee
 23fca78:	023ffb65 	.word	0x023ffb65
 23fca7c:	1007ae48 	.word	0x1007ae48
 23fca80:	1007ae44 	.word	0x1007ae44
 23fca84:	1007ade8 	.word	0x1007ade8
 23fca88:	1007ae18 	.word	0x1007ae18

023fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fca8c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fca8e:	2614      	movs	r6, #20
 23fca90:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fca94:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fca96:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fca9a:	42ae      	cmp	r6, r5
 23fca9c:	d004      	beq.n	23fcaa8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fca9e:	4628      	mov	r0, r5
 23fcaa0:	f000 fe84 	bl	23fd7ac <_ZN6StringD1Ev>
 23fcaa4:	3514      	adds	r5, #20
 23fcaa6:	e7f8      	b.n	23fca9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fcaa8:	6820      	ldr	r0, [r4, #0]
 23fcaaa:	f000 fdb1 	bl	23fd610 <free>
    AllocatorT::free(data_);
}
 23fcaae:	4620      	mov	r0, r4
 23fcab0:	bd70      	pop	{r4, r5, r6, pc}

023fcab2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fcab2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcab6:	4604      	mov	r4, r0
 23fcab8:	460d      	mov	r5, r1
 23fcaba:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcabc:	d916      	bls.n	23fcaec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fcabe:	4290      	cmp	r0, r2
 23fcac0:	d215      	bcs.n	23fcaee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fcac2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fcac6:	1a75      	subs	r5, r6, r1
 23fcac8:	f1a1 0714 	sub.w	r7, r1, #20
 23fcacc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcace:	42b7      	cmp	r7, r6
 23fcad0:	d01c      	beq.n	23fcb0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fcad2:	b12c      	cbz	r4, 23fcae0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fcad4:	4631      	mov	r1, r6
 23fcad6:	4620      	mov	r0, r4
 23fcad8:	f000 fed1 	bl	23fd87e <_ZN6StringC1EOS_>
 23fcadc:	7c33      	ldrb	r3, [r6, #16]
 23fcade:	7423      	strb	r3, [r4, #16]
 23fcae0:	4630      	mov	r0, r6
 23fcae2:	f000 fe63 	bl	23fd7ac <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fcae6:	3e14      	subs	r6, #20
 23fcae8:	3c14      	subs	r4, #20
 23fcaea:	e7f0      	b.n	23fcace <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fcaec:	d00e      	beq.n	23fcb0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fcaee:	42b5      	cmp	r5, r6
 23fcaf0:	d00c      	beq.n	23fcb0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fcaf2:	b12c      	cbz	r4, 23fcb00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fcaf4:	4629      	mov	r1, r5
 23fcaf6:	4620      	mov	r0, r4
 23fcaf8:	f000 fec1 	bl	23fd87e <_ZN6StringC1EOS_>
 23fcafc:	7c2b      	ldrb	r3, [r5, #16]
 23fcafe:	7423      	strb	r3, [r4, #16]
 23fcb00:	4628      	mov	r0, r5
 23fcb02:	f000 fe53 	bl	23fd7ac <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcb06:	3514      	adds	r5, #20
 23fcb08:	3414      	adds	r4, #20
 23fcb0a:	e7f0      	b.n	23fcaee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fcb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcb0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fcb0e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fcb14:	e9c0 3300 	strd	r3, r3, [r0]
 23fcb18:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcb1a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcb1c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcb1e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcb20:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcb22:	dd24      	ble.n	23fcb6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fcb24:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fcb28:	fb08 f007 	mul.w	r0, r8, r7
 23fcb2c:	f000 fd62 	bl	23fd5f4 <malloc>
            if (!d) {
 23fcb30:	4605      	mov	r5, r0
 23fcb32:	b1e0      	cbz	r0, 23fcb6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fcb34:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fcb38:	fb08 1202 	mla	r2, r8, r2, r1
 23fcb3c:	f7ff ffb9 	bl	23fcab2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fcb40:	6820      	ldr	r0, [r4, #0]
 23fcb42:	f000 fd65 	bl	23fd610 <free>
        data_ = d;
 23fcb46:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fcb48:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fcb4a:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fcb4e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fcb52:	45b8      	cmp	r8, r7
 23fcb54:	d009      	beq.n	23fcb6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fcb56:	4639      	mov	r1, r7
 23fcb58:	4628      	mov	r0, r5
 23fcb5a:	f000 feaa 	bl	23fd8b2 <_ZN6StringC1ERKS_>
 23fcb5e:	7c3b      	ldrb	r3, [r7, #16]
 23fcb60:	3514      	adds	r5, #20
 23fcb62:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fcb66:	3714      	adds	r7, #20
 23fcb68:	e7f3      	b.n	23fcb52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fcb6a:	6873      	ldr	r3, [r6, #4]
 23fcb6c:	6063      	str	r3, [r4, #4]
}
 23fcb6e:	4620      	mov	r0, r4
 23fcb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcb74 <_GLOBAL__sub_I_SystemMode>:
 23fcb74:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fcb76:	2400      	movs	r4, #0
 23fcb78:	4b28      	ldr	r3, [pc, #160]	; (23fcc1c <_GLOBAL__sub_I_SystemMode+0xa8>)
    SleepResult() {}
 23fcb7a:	4a29      	ldr	r2, [pc, #164]	; (23fcc20 <_GLOBAL__sub_I_SystemMode+0xac>)
 23fcb7c:	b08e      	sub	sp, #56	; 0x38
 23fcb7e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23fcb80:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fcb84:	2001      	movs	r0, #1
 23fcb86:	f000 fc2b 	bl	23fd3e0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fcb8a:	4621      	mov	r1, r4
 23fcb8c:	2001      	movs	r0, #1
 23fcb8e:	f000 fc35 	bl	23fd3fc <system_thread_set_state>
        capacity_(0) {
 23fcb92:	e9cd 4402 	strd	r4, r4, [sp, #8]
 23fcb96:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 23fcb98:	f002 f8be 	bl	23fed18 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fcb9c:	4c21      	ldr	r4, [pc, #132]	; (23fcc24 <_GLOBAL__sub_I_SystemMode+0xb0>)
 23fcb9e:	4605      	mov	r5, r0
 23fcba0:	4626      	mov	r6, r4
 23fcba2:	a902      	add	r1, sp, #8
 23fcba4:	a805      	add	r0, sp, #20
 23fcba6:	f7ff ffb2 	bl	23fcb0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23fcbaa:	a905      	add	r1, sp, #20
 23fcbac:	a808      	add	r0, sp, #32
 23fcbae:	f7ff ffae 	bl	23fcb0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fcbb2:	4b1d      	ldr	r3, [pc, #116]	; (23fcc28 <_GLOBAL__sub_I_SystemMode+0xb4>)
 23fcbb4:	a908      	add	r1, sp, #32
 23fcbb6:	f846 3b04 	str.w	r3, [r6], #4
 23fcbba:	a80b      	add	r0, sp, #44	; 0x2c
 23fcbbc:	f7ff ffa7 	bl	23fcb0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fcbc0:	aa0b      	add	r2, sp, #44	; 0x2c
 23fcbc2:	211e      	movs	r1, #30
 23fcbc4:	4630      	mov	r0, r6
 23fcbc6:	f001 fbfd 	bl	23fe3c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcbca:	a80b      	add	r0, sp, #44	; 0x2c
 23fcbcc:	f7ff ff5e 	bl	23fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fcbd0:	a808      	add	r0, sp, #32
 23fcbd2:	f7ff ff5b 	bl	23fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fcbd6:	4b15      	ldr	r3, [pc, #84]	; (23fcc2c <_GLOBAL__sub_I_SystemMode+0xb8>)
 23fcbd8:	6225      	str	r5, [r4, #32]
 23fcbda:	6023      	str	r3, [r4, #0]
 23fcbdc:	a805      	add	r0, sp, #20
 23fcbde:	f7ff ff55 	bl	23fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fcbe2:	4b13      	ldr	r3, [pc, #76]	; (23fcc30 <_GLOBAL__sub_I_SystemMode+0xbc>)
 23fcbe4:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fcbe6:	f002 f897 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fcbea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fcbee:	f002 f883 	bl	23fecf8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fcbf2:	f001 f8b9 	bl	23fdd68 <_ZN5spark10LogManager8instanceEv>
 23fcbf6:	4621      	mov	r1, r4
 23fcbf8:	f001 fabc 	bl	23fe174 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fcbfc:	a802      	add	r0, sp, #8
 23fcbfe:	f7ff ff45 	bl	23fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Stepper stepper(2048, D3, D4, D5, D6);
 23fcc02:	2305      	movs	r3, #5
 23fcc04:	2206      	movs	r2, #6
 23fcc06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 23fcc0a:	e9cd 3200 	strd	r3, r2, [sp]
 23fcc0e:	4809      	ldr	r0, [pc, #36]	; (23fcc34 <_GLOBAL__sub_I_SystemMode+0xc0>)
 23fcc10:	2304      	movs	r3, #4
 23fcc12:	2203      	movs	r2, #3
 23fcc14:	f000 f810 	bl	23fcc38 <_ZN7StepperC1Eiiiii>
 23fcc18:	b00e      	add	sp, #56	; 0x38
 23fcc1a:	bd70      	pop	{r4, r5, r6, pc}
 23fcc1c:	1007addc 	.word	0x1007addc
 23fcc20:	ffff0000 	.word	0xffff0000
 23fcc24:	1007adf4 	.word	0x1007adf4
 23fcc28:	023ffb7c 	.word	0x023ffb7c
 23fcc2c:	023ffc80 	.word	0x023ffc80
 23fcc30:	023ffb94 	.word	0x023ffb94
 23fcc34:	1007ae18 	.word	0x1007ae18

023fcc38 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 23fcc38:	b538      	push	{r3, r4, r5, lr}
                                      int motor_pin_3, int motor_pin_4)
{
  this->step_number = 0;    // which step the motor is on
 23fcc3a:	2500      	movs	r5, #0
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 23fcc3c:	4604      	mov	r4, r0
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
 23fcc3e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  this->motor_pin_3 = motor_pin_3;
 23fcc42:	9b04      	ldr	r3, [sp, #16]
  this->step_number = 0;    // which step the motor is on
 23fcc44:	6105      	str	r5, [r0, #16]
  this->motor_pin_3 = motor_pin_3;
 23fcc46:	61c3      	str	r3, [r0, #28]
  this->motor_pin_4 = motor_pin_4;
 23fcc48:	9b05      	ldr	r3, [sp, #20]
  this->direction = 0;      // motor direction
 23fcc4a:	6005      	str	r5, [r0, #0]
  this->motor_pin_4 = motor_pin_4;
 23fcc4c:	6203      	str	r3, [r0, #32]
  this->last_step_time = 0; // time stamp in us of the last step taken
 23fcc4e:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 23fcc50:	6081      	str	r1, [r0, #8]

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
 23fcc52:	b290      	uxth	r0, r2
 23fcc54:	2101      	movs	r1, #1
 23fcc56:	f002 fc9d 	bl	23ff594 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
 23fcc5a:	8b20      	ldrh	r0, [r4, #24]
 23fcc5c:	2101      	movs	r1, #1
 23fcc5e:	f002 fc99 	bl	23ff594 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
 23fcc62:	8ba0      	ldrh	r0, [r4, #28]
 23fcc64:	2101      	movs	r1, #1
 23fcc66:	f002 fc95 	bl	23ff594 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
 23fcc6a:	8c20      	ldrh	r0, [r4, #32]
 23fcc6c:	2101      	movs	r1, #1
 23fcc6e:	f002 fc91 	bl	23ff594 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 23fcc72:	2304      	movs	r3, #4
}
 23fcc74:	4620      	mov	r0, r4
  this->motor_pin_5 = 0;
 23fcc76:	6265      	str	r5, [r4, #36]	; 0x24
  this->pin_count = 4;
 23fcc78:	60e3      	str	r3, [r4, #12]
}
 23fcc7a:	bd38      	pop	{r3, r4, r5, pc}

023fcc7c <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
 23fcc7c:	6882      	ldr	r2, [r0, #8]
 23fcc7e:	4b03      	ldr	r3, [pc, #12]	; (23fcc8c <_ZN7Stepper8setSpeedEl+0x10>)
 23fcc80:	fb93 f3f2 	sdiv	r3, r3, r2
 23fcc84:	fb93 f1f1 	sdiv	r1, r3, r1
 23fcc88:	6041      	str	r1, [r0, #4]
}
 23fcc8a:	4770      	bx	lr
 23fcc8c:	03938700 	.word	0x03938700

023fcc90 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 23fcc90:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
 23fcc92:	68c3      	ldr	r3, [r0, #12]
{
 23fcc94:	4604      	mov	r4, r0
  if (this->pin_count == 2) {
 23fcc96:	2b02      	cmp	r3, #2
{
 23fcc98:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
 23fcc9a:	d10d      	bne.n	23fccb8 <_ZN7Stepper9stepMotorEi+0x28>
    switch (thisStep) {
 23fcc9c:	2903      	cmp	r1, #3
 23fcc9e:	d80b      	bhi.n	23fccb8 <_ZN7Stepper9stepMotorEi+0x28>
 23fcca0:	e8df f001 	tbb	[pc, r1]
 23fcca4:	1b151302 	.word	0x1b151302
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
 23fcca8:	2100      	movs	r1, #0
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
 23fccaa:	8aa0      	ldrh	r0, [r4, #20]
 23fccac:	f002 fc83 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 23fccb0:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
 23fccb2:	8b20      	ldrh	r0, [r4, #24]
 23fccb4:	f002 fc7f 	bl	23ff5b6 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
 23fccb8:	68e3      	ldr	r3, [r4, #12]
 23fccba:	2b04      	cmp	r3, #4
 23fccbc:	d11f      	bne.n	23fccfe <_ZN7Stepper9stepMotorEi+0x6e>
    switch (thisStep) {
 23fccbe:	2d03      	cmp	r5, #3
 23fccc0:	d81d      	bhi.n	23fccfe <_ZN7Stepper9stepMotorEi+0x6e>
 23fccc2:	e8df f005 	tbb	[pc, r5]
 23fccc6:	2a0c      	.short	0x2a0c
 23fccc8:	3e30      	.short	0x3e30
        digitalWrite(motor_pin_1, HIGH);
 23fccca:	2101      	movs	r1, #1
 23fcccc:	e7ed      	b.n	23fccaa <_ZN7Stepper9stepMotorEi+0x1a>
        digitalWrite(motor_pin_1, HIGH);
 23fccce:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
 23fccd0:	8aa0      	ldrh	r0, [r4, #20]
 23fccd2:	f002 fc70 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 23fccd6:	2100      	movs	r1, #0
 23fccd8:	e7eb      	b.n	23fccb2 <_ZN7Stepper9stepMotorEi+0x22>
        digitalWrite(motor_pin_1, LOW);
 23fccda:	2100      	movs	r1, #0
 23fccdc:	e7f8      	b.n	23fccd0 <_ZN7Stepper9stepMotorEi+0x40>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
 23fccde:	2101      	movs	r1, #1
 23fcce0:	8aa0      	ldrh	r0, [r4, #20]
 23fcce2:	f002 fc68 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 23fcce6:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
 23fcce8:	8b20      	ldrh	r0, [r4, #24]
 23fccea:	f002 fc64 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 23fccee:	2101      	movs	r1, #1
 23fccf0:	8ba0      	ldrh	r0, [r4, #28]
 23fccf2:	f002 fc60 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 23fccf6:	2100      	movs	r1, #0
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
 23fccf8:	8c20      	ldrh	r0, [r4, #32]
 23fccfa:	f002 fc5c 	bl	23ff5b6 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
 23fccfe:	68e3      	ldr	r3, [r4, #12]
 23fcd00:	2b05      	cmp	r3, #5
 23fcd02:	f040 808c 	bne.w	23fce1e <_ZN7Stepper9stepMotorEi+0x18e>
    switch (thisStep) {
 23fcd06:	2d09      	cmp	r5, #9
 23fcd08:	f200 8089 	bhi.w	23fce1e <_ZN7Stepper9stepMotorEi+0x18e>
 23fcd0c:	e8df f005 	tbb	[pc, r5]
 23fcd10:	4937291f 	.word	0x4937291f
 23fcd14:	7167615f 	.word	0x7167615f
 23fcd18:	857f      	.short	0x857f
        digitalWrite(motor_pin_1, LOW);
 23fcd1a:	2100      	movs	r1, #0
 23fcd1c:	8aa0      	ldrh	r0, [r4, #20]
 23fcd1e:	f002 fc4a 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 23fcd22:	2101      	movs	r1, #1
 23fcd24:	e7e0      	b.n	23fcce8 <_ZN7Stepper9stepMotorEi+0x58>
        digitalWrite(motor_pin_1, LOW);
 23fcd26:	2100      	movs	r1, #0
 23fcd28:	8aa0      	ldrh	r0, [r4, #20]
 23fcd2a:	f002 fc44 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 23fcd2e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
 23fcd30:	8b20      	ldrh	r0, [r4, #24]
 23fcd32:	f002 fc40 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 23fcd36:	2100      	movs	r1, #0
 23fcd38:	8ba0      	ldrh	r0, [r4, #28]
 23fcd3a:	f002 fc3c 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 23fcd3e:	2101      	movs	r1, #1
 23fcd40:	e7da      	b.n	23fccf8 <_ZN7Stepper9stepMotorEi+0x68>
        digitalWrite(motor_pin_1, HIGH);
 23fcd42:	2101      	movs	r1, #1
 23fcd44:	8aa0      	ldrh	r0, [r4, #20]
 23fcd46:	f002 fc36 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 23fcd4a:	2100      	movs	r1, #0
 23fcd4c:	e7f0      	b.n	23fcd30 <_ZN7Stepper9stepMotorEi+0xa0>
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
 23fcd4e:	2100      	movs	r1, #0
 23fcd50:	8aa0      	ldrh	r0, [r4, #20]
 23fcd52:	f002 fc30 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 23fcd56:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
 23fcd58:	8b20      	ldrh	r0, [r4, #24]
 23fcd5a:	f002 fc2c 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 23fcd5e:	2101      	movs	r1, #1
 23fcd60:	e008      	b.n	23fcd74 <_ZN7Stepper9stepMotorEi+0xe4>
        digitalWrite(motor_pin_1, LOW);
 23fcd62:	2100      	movs	r1, #0
 23fcd64:	8aa0      	ldrh	r0, [r4, #20]
 23fcd66:	f002 fc26 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 23fcd6a:	2101      	movs	r1, #1
 23fcd6c:	8b20      	ldrh	r0, [r4, #24]
 23fcd6e:	f002 fc22 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 23fcd72:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
 23fcd74:	8ba0      	ldrh	r0, [r4, #28]
 23fcd76:	f002 fc1e 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 23fcd7a:	2100      	movs	r1, #0
 23fcd7c:	e00c      	b.n	23fcd98 <_ZN7Stepper9stepMotorEi+0x108>
        digitalWrite(motor_pin_1, LOW);
 23fcd7e:	2100      	movs	r1, #0
 23fcd80:	8aa0      	ldrh	r0, [r4, #20]
 23fcd82:	f002 fc18 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 23fcd86:	2101      	movs	r1, #1
 23fcd88:	8b20      	ldrh	r0, [r4, #24]
 23fcd8a:	f002 fc14 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 23fcd8e:	2100      	movs	r1, #0
 23fcd90:	8ba0      	ldrh	r0, [r4, #28]
 23fcd92:	f002 fc10 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 23fcd96:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
 23fcd98:	8c20      	ldrh	r0, [r4, #32]
 23fcd9a:	f002 fc0c 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
 23fcd9e:	2101      	movs	r1, #1
 23fcda0:	e010      	b.n	23fcdc4 <_ZN7Stepper9stepMotorEi+0x134>
        digitalWrite(motor_pin_1, LOW);
 23fcda2:	2100      	movs	r1, #0
        digitalWrite(motor_pin_1, HIGH);
 23fcda4:	8aa0      	ldrh	r0, [r4, #20]
 23fcda6:	f002 fc06 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
 23fcdaa:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
 23fcdac:	8b20      	ldrh	r0, [r4, #24]
 23fcdae:	f002 fc02 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
 23fcdb2:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
 23fcdb4:	8ba0      	ldrh	r0, [r4, #28]
 23fcdb6:	f002 fbfe 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
 23fcdba:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
 23fcdbc:	8c20      	ldrh	r0, [r4, #32]
 23fcdbe:	f002 fbfa 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
 23fcdc2:	2100      	movs	r1, #0
        digitalWrite(motor_pin_5, HIGH);
 23fcdc4:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
 23fcdc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(motor_pin_5, HIGH);
 23fcdca:	f002 bbf4 	b.w	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_1, HIGH);
 23fcdce:	2101      	movs	r1, #1
 23fcdd0:	e7e8      	b.n	23fcda4 <_ZN7Stepper9stepMotorEi+0x114>
        digitalWrite(motor_pin_1, HIGH);
 23fcdd2:	2101      	movs	r1, #1
 23fcdd4:	8aa0      	ldrh	r0, [r4, #20]
 23fcdd6:	f002 fbee 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 23fcdda:	2100      	movs	r1, #0
 23fcddc:	e7e6      	b.n	23fcdac <_ZN7Stepper9stepMotorEi+0x11c>
        digitalWrite(motor_pin_1, HIGH);
 23fcdde:	2101      	movs	r1, #1
 23fcde0:	8aa0      	ldrh	r0, [r4, #20]
 23fcde2:	f002 fbe8 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 23fcde6:	2100      	movs	r1, #0
 23fcde8:	8b20      	ldrh	r0, [r4, #24]
 23fcdea:	f002 fbe4 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 23fcdee:	2101      	movs	r1, #1
 23fcdf0:	e7e0      	b.n	23fcdb4 <_ZN7Stepper9stepMotorEi+0x124>
        digitalWrite(motor_pin_1, HIGH);
 23fcdf2:	2101      	movs	r1, #1
 23fcdf4:	8aa0      	ldrh	r0, [r4, #20]
 23fcdf6:	f002 fbde 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 23fcdfa:	2100      	movs	r1, #0
 23fcdfc:	8b20      	ldrh	r0, [r4, #24]
 23fcdfe:	f002 fbda 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
 23fce02:	2101      	movs	r1, #1
 23fce04:	8ba0      	ldrh	r0, [r4, #28]
 23fce06:	f002 fbd6 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
 23fce0a:	2100      	movs	r1, #0
 23fce0c:	e7d6      	b.n	23fcdbc <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_1, HIGH);
 23fce0e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
 23fce10:	8aa0      	ldrh	r0, [r4, #20]
 23fce12:	f002 fbd0 	bl	23ff5b6 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
 23fce16:	2100      	movs	r1, #0
 23fce18:	e79e      	b.n	23fcd58 <_ZN7Stepper9stepMotorEi+0xc8>
        digitalWrite(motor_pin_1, LOW);
 23fce1a:	2100      	movs	r1, #0
 23fce1c:	e7f8      	b.n	23fce10 <_ZN7Stepper9stepMotorEi+0x180>
}
 23fce1e:	bd38      	pop	{r3, r4, r5, pc}

023fce20 <_ZN7Stepper4stepEi>:
{
 23fce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (steps_to_move > 0) { this->direction = 1; }
 23fce22:	2900      	cmp	r1, #0
  int steps_left = abs(steps_to_move);  // how many steps to take
 23fce24:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
{
 23fce28:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
 23fce2a:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
  if (steps_to_move > 0) { this->direction = 1; }
 23fce2e:	dd24      	ble.n	23fce7a <_ZN7Stepper4stepEi+0x5a>
 23fce30:	2301      	movs	r3, #1
 23fce32:	6023      	str	r3, [r4, #0]
          this->step_number = 0;
 23fce34:	2700      	movs	r7, #0
        stepMotor(this->step_number % 10);
 23fce36:	260a      	movs	r6, #10
  while (steps_left > 0)
 23fce38:	b385      	cbz	r5, 23fce9c <_ZN7Stepper4stepEi+0x7c>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23fce3a:	f000 f893 	bl	23fcf64 <HAL_Timer_Get_Micro_Seconds>
    if (now - this->last_step_time >= this->step_delay)
 23fce3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23fce40:	6862      	ldr	r2, [r4, #4]
 23fce42:	1ac3      	subs	r3, r0, r3
 23fce44:	4293      	cmp	r3, r2
 23fce46:	d3f7      	bcc.n	23fce38 <_ZN7Stepper4stepEi+0x18>
      if (this->direction == 1)
 23fce48:	6822      	ldr	r2, [r4, #0]
        this->step_number++;
 23fce4a:	6923      	ldr	r3, [r4, #16]
      if (this->direction == 1)
 23fce4c:	2a01      	cmp	r2, #1
      this->last_step_time = now;
 23fce4e:	62a0      	str	r0, [r4, #40]	; 0x28
      if (this->direction == 1)
 23fce50:	d116      	bne.n	23fce80 <_ZN7Stepper4stepEi+0x60>
        if (this->step_number == this->number_of_steps) {
 23fce52:	68a2      	ldr	r2, [r4, #8]
        this->step_number++;
 23fce54:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
 23fce56:	4293      	cmp	r3, r2
          this->step_number = 0;
 23fce58:	bf08      	it	eq
 23fce5a:	463b      	moveq	r3, r7
        this->step_number--;
 23fce5c:	6123      	str	r3, [r4, #16]
      if (this->pin_count == 5)
 23fce5e:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 23fce62:	2b05      	cmp	r3, #5
      steps_left--;
 23fce64:	f105 35ff 	add.w	r5, r5, #4294967295
      if (this->pin_count == 5)
 23fce68:	d110      	bne.n	23fce8c <_ZN7Stepper4stepEi+0x6c>
        stepMotor(this->step_number % 10);
 23fce6a:	fb91 f3f6 	sdiv	r3, r1, r6
 23fce6e:	fb06 1113 	mls	r1, r6, r3, r1
        stepMotor(this->step_number % 4);
 23fce72:	4620      	mov	r0, r4
 23fce74:	f7ff ff0c 	bl	23fcc90 <_ZN7Stepper9stepMotorEi>
 23fce78:	e7de      	b.n	23fce38 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
 23fce7a:	d0db      	beq.n	23fce34 <_ZN7Stepper4stepEi+0x14>
 23fce7c:	2300      	movs	r3, #0
 23fce7e:	e7d8      	b.n	23fce32 <_ZN7Stepper4stepEi+0x12>
        if (this->step_number == 0) {
 23fce80:	b90b      	cbnz	r3, 23fce86 <_ZN7Stepper4stepEi+0x66>
          this->step_number = this->number_of_steps;
 23fce82:	68a3      	ldr	r3, [r4, #8]
 23fce84:	6123      	str	r3, [r4, #16]
        this->step_number--;
 23fce86:	6923      	ldr	r3, [r4, #16]
 23fce88:	3b01      	subs	r3, #1
 23fce8a:	e7e7      	b.n	23fce5c <_ZN7Stepper4stepEi+0x3c>
        stepMotor(this->step_number % 4);
 23fce8c:	424b      	negs	r3, r1
 23fce8e:	f003 0303 	and.w	r3, r3, #3
 23fce92:	f001 0103 	and.w	r1, r1, #3
 23fce96:	bf58      	it	pl
 23fce98:	4259      	negpl	r1, r3
 23fce9a:	e7ea      	b.n	23fce72 <_ZN7Stepper4stepEi+0x52>
}
 23fce9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

023fcea0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fcea0:	b509      	push	{r0, r3, lr}
 23fcea2:	4804      	ldr	r0, [pc, #16]	; (23fceb4 <netdb_freeaddrinfo+0x14>)
 23fcea4:	6800      	ldr	r0, [r0, #0]
 23fcea6:	4b04      	ldr	r3, [pc, #16]	; (23fceb8 <netdb_freeaddrinfo+0x18>)
 23fcea8:	4403      	add	r3, r0
 23fceaa:	681b      	ldr	r3, [r3, #0]
 23fceac:	689b      	ldr	r3, [r3, #8]
 23fceae:	9302      	str	r3, [sp, #8]
 23fceb0:	bd09      	pop	{r0, r3, pc}
 23fceb2:	0000      	.short	0x0000
 23fceb4:	1007ad64 	.word	0x1007ad64
 23fceb8:	00000050 	.word	0x00000050

023fcebc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fcebc:	b509      	push	{r0, r3, lr}
 23fcebe:	4804      	ldr	r0, [pc, #16]	; (23fced0 <netdb_getaddrinfo+0x14>)
 23fcec0:	6800      	ldr	r0, [r0, #0]
 23fcec2:	4b04      	ldr	r3, [pc, #16]	; (23fced4 <netdb_getaddrinfo+0x18>)
 23fcec4:	4403      	add	r3, r0
 23fcec6:	681b      	ldr	r3, [r3, #0]
 23fcec8:	68db      	ldr	r3, [r3, #12]
 23fceca:	9302      	str	r3, [sp, #8]
 23fcecc:	bd09      	pop	{r0, r3, pc}
 23fcece:	0000      	.short	0x0000
 23fced0:	1007ad64 	.word	0x1007ad64
 23fced4:	00000050 	.word	0x00000050

023fced8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fced8:	b509      	push	{r0, r3, lr}
 23fceda:	4804      	ldr	r0, [pc, #16]	; (23fceec <hal_gpio_mode+0x14>)
 23fcedc:	6800      	ldr	r0, [r0, #0]
 23fcede:	4b04      	ldr	r3, [pc, #16]	; (23fcef0 <hal_gpio_mode+0x18>)
 23fcee0:	4403      	add	r3, r0
 23fcee2:	681b      	ldr	r3, [r3, #0]
 23fcee4:	689b      	ldr	r3, [r3, #8]
 23fcee6:	9302      	str	r3, [sp, #8]
 23fcee8:	bd09      	pop	{r0, r3, pc}
 23fceea:	0000      	.short	0x0000
 23fceec:	1007ad64 	.word	0x1007ad64
 23fcef0:	00000014 	.word	0x00000014

023fcef4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fcef4:	b509      	push	{r0, r3, lr}
 23fcef6:	4804      	ldr	r0, [pc, #16]	; (23fcf08 <hal_gpio_get_mode+0x14>)
 23fcef8:	6800      	ldr	r0, [r0, #0]
 23fcefa:	4b04      	ldr	r3, [pc, #16]	; (23fcf0c <hal_gpio_get_mode+0x18>)
 23fcefc:	4403      	add	r3, r0
 23fcefe:	681b      	ldr	r3, [r3, #0]
 23fcf00:	68db      	ldr	r3, [r3, #12]
 23fcf02:	9302      	str	r3, [sp, #8]
 23fcf04:	bd09      	pop	{r0, r3, pc}
 23fcf06:	0000      	.short	0x0000
 23fcf08:	1007ad64 	.word	0x1007ad64
 23fcf0c:	00000014 	.word	0x00000014

023fcf10 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fcf10:	b509      	push	{r0, r3, lr}
 23fcf12:	4804      	ldr	r0, [pc, #16]	; (23fcf24 <hal_gpio_write+0x14>)
 23fcf14:	6800      	ldr	r0, [r0, #0]
 23fcf16:	4b04      	ldr	r3, [pc, #16]	; (23fcf28 <hal_gpio_write+0x18>)
 23fcf18:	4403      	add	r3, r0
 23fcf1a:	681b      	ldr	r3, [r3, #0]
 23fcf1c:	691b      	ldr	r3, [r3, #16]
 23fcf1e:	9302      	str	r3, [sp, #8]
 23fcf20:	bd09      	pop	{r0, r3, pc}
 23fcf22:	0000      	.short	0x0000
 23fcf24:	1007ad64 	.word	0x1007ad64
 23fcf28:	00000014 	.word	0x00000014

023fcf2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fcf2c:	b509      	push	{r0, r3, lr}
 23fcf2e:	4804      	ldr	r0, [pc, #16]	; (23fcf40 <HAL_RNG_GetRandomNumber+0x14>)
 23fcf30:	6800      	ldr	r0, [r0, #0]
 23fcf32:	4b04      	ldr	r3, [pc, #16]	; (23fcf44 <HAL_RNG_GetRandomNumber+0x18>)
 23fcf34:	4403      	add	r3, r0
 23fcf36:	681b      	ldr	r3, [r3, #0]
 23fcf38:	685b      	ldr	r3, [r3, #4]
 23fcf3a:	9302      	str	r3, [sp, #8]
 23fcf3c:	bd09      	pop	{r0, r3, pc}
 23fcf3e:	0000      	.short	0x0000
 23fcf40:	1007ad64 	.word	0x1007ad64
 23fcf44:	00000000 	.word	0x00000000

023fcf48 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fcf48:	b509      	push	{r0, r3, lr}
 23fcf4a:	4804      	ldr	r0, [pc, #16]	; (23fcf5c <HAL_Delay_Microseconds+0x14>)
 23fcf4c:	6800      	ldr	r0, [r0, #0]
 23fcf4e:	4b04      	ldr	r3, [pc, #16]	; (23fcf60 <HAL_Delay_Microseconds+0x18>)
 23fcf50:	4403      	add	r3, r0
 23fcf52:	681b      	ldr	r3, [r3, #0]
 23fcf54:	68db      	ldr	r3, [r3, #12]
 23fcf56:	9302      	str	r3, [sp, #8]
 23fcf58:	bd09      	pop	{r0, r3, pc}
 23fcf5a:	0000      	.short	0x0000
 23fcf5c:	1007ad64 	.word	0x1007ad64
 23fcf60:	00000000 	.word	0x00000000

023fcf64 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23fcf64:	b509      	push	{r0, r3, lr}
 23fcf66:	4804      	ldr	r0, [pc, #16]	; (23fcf78 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23fcf68:	6800      	ldr	r0, [r0, #0]
 23fcf6a:	4b04      	ldr	r3, [pc, #16]	; (23fcf7c <HAL_Timer_Get_Micro_Seconds+0x18>)
 23fcf6c:	4403      	add	r3, r0
 23fcf6e:	681b      	ldr	r3, [r3, #0]
 23fcf70:	691b      	ldr	r3, [r3, #16]
 23fcf72:	9302      	str	r3, [sp, #8]
 23fcf74:	bd09      	pop	{r0, r3, pc}
 23fcf76:	0000      	.short	0x0000
 23fcf78:	1007ad64 	.word	0x1007ad64
 23fcf7c:	00000000 	.word	0x00000000

023fcf80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fcf80:	b509      	push	{r0, r3, lr}
 23fcf82:	4804      	ldr	r0, [pc, #16]	; (23fcf94 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fcf84:	6800      	ldr	r0, [r0, #0]
 23fcf86:	4b04      	ldr	r3, [pc, #16]	; (23fcf98 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fcf88:	4403      	add	r3, r0
 23fcf8a:	681b      	ldr	r3, [r3, #0]
 23fcf8c:	695b      	ldr	r3, [r3, #20]
 23fcf8e:	9302      	str	r3, [sp, #8]
 23fcf90:	bd09      	pop	{r0, r3, pc}
 23fcf92:	0000      	.short	0x0000
 23fcf94:	1007ad64 	.word	0x1007ad64
 23fcf98:	00000000 	.word	0x00000000

023fcf9c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcf9c:	b509      	push	{r0, r3, lr}
 23fcf9e:	4804      	ldr	r0, [pc, #16]	; (23fcfb0 <os_mutex_recursive_create+0x14>)
 23fcfa0:	6800      	ldr	r0, [r0, #0]
 23fcfa2:	4b04      	ldr	r3, [pc, #16]	; (23fcfb4 <os_mutex_recursive_create+0x18>)
 23fcfa4:	4403      	add	r3, r0
 23fcfa6:	681b      	ldr	r3, [r3, #0]
 23fcfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcfaa:	9302      	str	r3, [sp, #8]
 23fcfac:	bd09      	pop	{r0, r3, pc}
 23fcfae:	0000      	.short	0x0000
 23fcfb0:	1007ad64 	.word	0x1007ad64
 23fcfb4:	00000030 	.word	0x00000030

023fcfb8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fcfb8:	b509      	push	{r0, r3, lr}
 23fcfba:	4804      	ldr	r0, [pc, #16]	; (23fcfcc <os_mutex_recursive_destroy+0x14>)
 23fcfbc:	6800      	ldr	r0, [r0, #0]
 23fcfbe:	4b04      	ldr	r3, [pc, #16]	; (23fcfd0 <os_mutex_recursive_destroy+0x18>)
 23fcfc0:	4403      	add	r3, r0
 23fcfc2:	681b      	ldr	r3, [r3, #0]
 23fcfc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fcfc6:	9302      	str	r3, [sp, #8]
 23fcfc8:	bd09      	pop	{r0, r3, pc}
 23fcfca:	0000      	.short	0x0000
 23fcfcc:	1007ad64 	.word	0x1007ad64
 23fcfd0:	00000030 	.word	0x00000030

023fcfd4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fcfd4:	b509      	push	{r0, r3, lr}
 23fcfd6:	4804      	ldr	r0, [pc, #16]	; (23fcfe8 <os_mutex_recursive_lock+0x14>)
 23fcfd8:	6800      	ldr	r0, [r0, #0]
 23fcfda:	4b04      	ldr	r3, [pc, #16]	; (23fcfec <os_mutex_recursive_lock+0x18>)
 23fcfdc:	4403      	add	r3, r0
 23fcfde:	681b      	ldr	r3, [r3, #0]
 23fcfe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fcfe2:	9302      	str	r3, [sp, #8]
 23fcfe4:	bd09      	pop	{r0, r3, pc}
 23fcfe6:	0000      	.short	0x0000
 23fcfe8:	1007ad64 	.word	0x1007ad64
 23fcfec:	00000030 	.word	0x00000030

023fcff0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fcff0:	b509      	push	{r0, r3, lr}
 23fcff2:	4804      	ldr	r0, [pc, #16]	; (23fd004 <os_mutex_recursive_unlock+0x14>)
 23fcff4:	6800      	ldr	r0, [r0, #0]
 23fcff6:	4b04      	ldr	r3, [pc, #16]	; (23fd008 <os_mutex_recursive_unlock+0x18>)
 23fcff8:	4403      	add	r3, r0
 23fcffa:	681b      	ldr	r3, [r3, #0]
 23fcffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcffe:	9302      	str	r3, [sp, #8]
 23fd000:	bd09      	pop	{r0, r3, pc}
 23fd002:	0000      	.short	0x0000
 23fd004:	1007ad64 	.word	0x1007ad64
 23fd008:	00000030 	.word	0x00000030

023fd00c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fd00c:	b509      	push	{r0, r3, lr}
 23fd00e:	4804      	ldr	r0, [pc, #16]	; (23fd020 <inet_inet_ntop+0x14>)
 23fd010:	6800      	ldr	r0, [r0, #0]
 23fd012:	4b04      	ldr	r3, [pc, #16]	; (23fd024 <inet_inet_ntop+0x18>)
 23fd014:	4403      	add	r3, r0
 23fd016:	681b      	ldr	r3, [r3, #0]
 23fd018:	695b      	ldr	r3, [r3, #20]
 23fd01a:	9302      	str	r3, [sp, #8]
 23fd01c:	bd09      	pop	{r0, r3, pc}
 23fd01e:	0000      	.short	0x0000
 23fd020:	1007ad64 	.word	0x1007ad64
 23fd024:	0000004c 	.word	0x0000004c

023fd028 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fd028:	b509      	push	{r0, r3, lr}
 23fd02a:	4804      	ldr	r0, [pc, #16]	; (23fd03c <hal_usart_end+0x14>)
 23fd02c:	6800      	ldr	r0, [r0, #0]
 23fd02e:	4b04      	ldr	r3, [pc, #16]	; (23fd040 <hal_usart_end+0x18>)
 23fd030:	4403      	add	r3, r0
 23fd032:	681b      	ldr	r3, [r3, #0]
 23fd034:	689b      	ldr	r3, [r3, #8]
 23fd036:	9302      	str	r3, [sp, #8]
 23fd038:	bd09      	pop	{r0, r3, pc}
 23fd03a:	0000      	.short	0x0000
 23fd03c:	1007ad64 	.word	0x1007ad64
 23fd040:	00000024 	.word	0x00000024

023fd044 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fd044:	b509      	push	{r0, r3, lr}
 23fd046:	4804      	ldr	r0, [pc, #16]	; (23fd058 <hal_usart_write+0x14>)
 23fd048:	6800      	ldr	r0, [r0, #0]
 23fd04a:	4b04      	ldr	r3, [pc, #16]	; (23fd05c <hal_usart_write+0x18>)
 23fd04c:	4403      	add	r3, r0
 23fd04e:	681b      	ldr	r3, [r3, #0]
 23fd050:	68db      	ldr	r3, [r3, #12]
 23fd052:	9302      	str	r3, [sp, #8]
 23fd054:	bd09      	pop	{r0, r3, pc}
 23fd056:	0000      	.short	0x0000
 23fd058:	1007ad64 	.word	0x1007ad64
 23fd05c:	00000024 	.word	0x00000024

023fd060 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fd060:	b509      	push	{r0, r3, lr}
 23fd062:	4804      	ldr	r0, [pc, #16]	; (23fd074 <hal_usart_available+0x14>)
 23fd064:	6800      	ldr	r0, [r0, #0]
 23fd066:	4b04      	ldr	r3, [pc, #16]	; (23fd078 <hal_usart_available+0x18>)
 23fd068:	4403      	add	r3, r0
 23fd06a:	681b      	ldr	r3, [r3, #0]
 23fd06c:	691b      	ldr	r3, [r3, #16]
 23fd06e:	9302      	str	r3, [sp, #8]
 23fd070:	bd09      	pop	{r0, r3, pc}
 23fd072:	0000      	.short	0x0000
 23fd074:	1007ad64 	.word	0x1007ad64
 23fd078:	00000024 	.word	0x00000024

023fd07c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fd07c:	b509      	push	{r0, r3, lr}
 23fd07e:	4804      	ldr	r0, [pc, #16]	; (23fd090 <hal_usart_read+0x14>)
 23fd080:	6800      	ldr	r0, [r0, #0]
 23fd082:	4b04      	ldr	r3, [pc, #16]	; (23fd094 <hal_usart_read+0x18>)
 23fd084:	4403      	add	r3, r0
 23fd086:	681b      	ldr	r3, [r3, #0]
 23fd088:	695b      	ldr	r3, [r3, #20]
 23fd08a:	9302      	str	r3, [sp, #8]
 23fd08c:	bd09      	pop	{r0, r3, pc}
 23fd08e:	0000      	.short	0x0000
 23fd090:	1007ad64 	.word	0x1007ad64
 23fd094:	00000024 	.word	0x00000024

023fd098 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fd098:	b509      	push	{r0, r3, lr}
 23fd09a:	4804      	ldr	r0, [pc, #16]	; (23fd0ac <hal_usart_peek+0x14>)
 23fd09c:	6800      	ldr	r0, [r0, #0]
 23fd09e:	4b04      	ldr	r3, [pc, #16]	; (23fd0b0 <hal_usart_peek+0x18>)
 23fd0a0:	4403      	add	r3, r0
 23fd0a2:	681b      	ldr	r3, [r3, #0]
 23fd0a4:	699b      	ldr	r3, [r3, #24]
 23fd0a6:	9302      	str	r3, [sp, #8]
 23fd0a8:	bd09      	pop	{r0, r3, pc}
 23fd0aa:	0000      	.short	0x0000
 23fd0ac:	1007ad64 	.word	0x1007ad64
 23fd0b0:	00000024 	.word	0x00000024

023fd0b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fd0b4:	b509      	push	{r0, r3, lr}
 23fd0b6:	4804      	ldr	r0, [pc, #16]	; (23fd0c8 <hal_usart_flush+0x14>)
 23fd0b8:	6800      	ldr	r0, [r0, #0]
 23fd0ba:	4b04      	ldr	r3, [pc, #16]	; (23fd0cc <hal_usart_flush+0x18>)
 23fd0bc:	4403      	add	r3, r0
 23fd0be:	681b      	ldr	r3, [r3, #0]
 23fd0c0:	69db      	ldr	r3, [r3, #28]
 23fd0c2:	9302      	str	r3, [sp, #8]
 23fd0c4:	bd09      	pop	{r0, r3, pc}
 23fd0c6:	0000      	.short	0x0000
 23fd0c8:	1007ad64 	.word	0x1007ad64
 23fd0cc:	00000024 	.word	0x00000024

023fd0d0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fd0d0:	b509      	push	{r0, r3, lr}
 23fd0d2:	4804      	ldr	r0, [pc, #16]	; (23fd0e4 <hal_usart_is_enabled+0x14>)
 23fd0d4:	6800      	ldr	r0, [r0, #0]
 23fd0d6:	4b04      	ldr	r3, [pc, #16]	; (23fd0e8 <hal_usart_is_enabled+0x18>)
 23fd0d8:	4403      	add	r3, r0
 23fd0da:	681b      	ldr	r3, [r3, #0]
 23fd0dc:	6a1b      	ldr	r3, [r3, #32]
 23fd0de:	9302      	str	r3, [sp, #8]
 23fd0e0:	bd09      	pop	{r0, r3, pc}
 23fd0e2:	0000      	.short	0x0000
 23fd0e4:	1007ad64 	.word	0x1007ad64
 23fd0e8:	00000024 	.word	0x00000024

023fd0ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fd0ec:	b509      	push	{r0, r3, lr}
 23fd0ee:	4804      	ldr	r0, [pc, #16]	; (23fd100 <hal_usart_available_data_for_write+0x14>)
 23fd0f0:	6800      	ldr	r0, [r0, #0]
 23fd0f2:	4b04      	ldr	r3, [pc, #16]	; (23fd104 <hal_usart_available_data_for_write+0x18>)
 23fd0f4:	4403      	add	r3, r0
 23fd0f6:	681b      	ldr	r3, [r3, #0]
 23fd0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd0fa:	9302      	str	r3, [sp, #8]
 23fd0fc:	bd09      	pop	{r0, r3, pc}
 23fd0fe:	0000      	.short	0x0000
 23fd100:	1007ad64 	.word	0x1007ad64
 23fd104:	00000024 	.word	0x00000024

023fd108 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fd108:	b509      	push	{r0, r3, lr}
 23fd10a:	4804      	ldr	r0, [pc, #16]	; (23fd11c <hal_usart_begin_config+0x14>)
 23fd10c:	6800      	ldr	r0, [r0, #0]
 23fd10e:	4b04      	ldr	r3, [pc, #16]	; (23fd120 <hal_usart_begin_config+0x18>)
 23fd110:	4403      	add	r3, r0
 23fd112:	681b      	ldr	r3, [r3, #0]
 23fd114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd116:	9302      	str	r3, [sp, #8]
 23fd118:	bd09      	pop	{r0, r3, pc}
 23fd11a:	0000      	.short	0x0000
 23fd11c:	1007ad64 	.word	0x1007ad64
 23fd120:	00000024 	.word	0x00000024

023fd124 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fd124:	b509      	push	{r0, r3, lr}
 23fd126:	4804      	ldr	r0, [pc, #16]	; (23fd138 <hal_usart_init_ex+0x14>)
 23fd128:	6800      	ldr	r0, [r0, #0]
 23fd12a:	4b04      	ldr	r3, [pc, #16]	; (23fd13c <hal_usart_init_ex+0x18>)
 23fd12c:	4403      	add	r3, r0
 23fd12e:	681b      	ldr	r3, [r3, #0]
 23fd130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd132:	9302      	str	r3, [sp, #8]
 23fd134:	bd09      	pop	{r0, r3, pc}
 23fd136:	0000      	.short	0x0000
 23fd138:	1007ad64 	.word	0x1007ad64
 23fd13c:	00000024 	.word	0x00000024

023fd140 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fd140:	b509      	push	{r0, r3, lr}
 23fd142:	4804      	ldr	r0, [pc, #16]	; (23fd154 <hal_i2c_begin+0x14>)
 23fd144:	6800      	ldr	r0, [r0, #0]
 23fd146:	4b04      	ldr	r3, [pc, #16]	; (23fd158 <hal_i2c_begin+0x18>)
 23fd148:	4403      	add	r3, r0
 23fd14a:	681b      	ldr	r3, [r3, #0]
 23fd14c:	68db      	ldr	r3, [r3, #12]
 23fd14e:	9302      	str	r3, [sp, #8]
 23fd150:	bd09      	pop	{r0, r3, pc}
 23fd152:	0000      	.short	0x0000
 23fd154:	1007ad64 	.word	0x1007ad64
 23fd158:	00000010 	.word	0x00000010

023fd15c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fd15c:	b509      	push	{r0, r3, lr}
 23fd15e:	4804      	ldr	r0, [pc, #16]	; (23fd170 <hal_i2c_begin_transmission+0x14>)
 23fd160:	6800      	ldr	r0, [r0, #0]
 23fd162:	4b04      	ldr	r3, [pc, #16]	; (23fd174 <hal_i2c_begin_transmission+0x18>)
 23fd164:	4403      	add	r3, r0
 23fd166:	681b      	ldr	r3, [r3, #0]
 23fd168:	699b      	ldr	r3, [r3, #24]
 23fd16a:	9302      	str	r3, [sp, #8]
 23fd16c:	bd09      	pop	{r0, r3, pc}
 23fd16e:	0000      	.short	0x0000
 23fd170:	1007ad64 	.word	0x1007ad64
 23fd174:	00000010 	.word	0x00000010

023fd178 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fd178:	b509      	push	{r0, r3, lr}
 23fd17a:	4804      	ldr	r0, [pc, #16]	; (23fd18c <hal_i2c_end_transmission+0x14>)
 23fd17c:	6800      	ldr	r0, [r0, #0]
 23fd17e:	4b04      	ldr	r3, [pc, #16]	; (23fd190 <hal_i2c_end_transmission+0x18>)
 23fd180:	4403      	add	r3, r0
 23fd182:	681b      	ldr	r3, [r3, #0]
 23fd184:	69db      	ldr	r3, [r3, #28]
 23fd186:	9302      	str	r3, [sp, #8]
 23fd188:	bd09      	pop	{r0, r3, pc}
 23fd18a:	0000      	.short	0x0000
 23fd18c:	1007ad64 	.word	0x1007ad64
 23fd190:	00000010 	.word	0x00000010

023fd194 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fd194:	b509      	push	{r0, r3, lr}
 23fd196:	4804      	ldr	r0, [pc, #16]	; (23fd1a8 <hal_i2c_write+0x14>)
 23fd198:	6800      	ldr	r0, [r0, #0]
 23fd19a:	4b04      	ldr	r3, [pc, #16]	; (23fd1ac <hal_i2c_write+0x18>)
 23fd19c:	4403      	add	r3, r0
 23fd19e:	681b      	ldr	r3, [r3, #0]
 23fd1a0:	6a1b      	ldr	r3, [r3, #32]
 23fd1a2:	9302      	str	r3, [sp, #8]
 23fd1a4:	bd09      	pop	{r0, r3, pc}
 23fd1a6:	0000      	.short	0x0000
 23fd1a8:	1007ad64 	.word	0x1007ad64
 23fd1ac:	00000010 	.word	0x00000010

023fd1b0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fd1b0:	b509      	push	{r0, r3, lr}
 23fd1b2:	4804      	ldr	r0, [pc, #16]	; (23fd1c4 <hal_i2c_available+0x14>)
 23fd1b4:	6800      	ldr	r0, [r0, #0]
 23fd1b6:	4b04      	ldr	r3, [pc, #16]	; (23fd1c8 <hal_i2c_available+0x18>)
 23fd1b8:	4403      	add	r3, r0
 23fd1ba:	681b      	ldr	r3, [r3, #0]
 23fd1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd1be:	9302      	str	r3, [sp, #8]
 23fd1c0:	bd09      	pop	{r0, r3, pc}
 23fd1c2:	0000      	.short	0x0000
 23fd1c4:	1007ad64 	.word	0x1007ad64
 23fd1c8:	00000010 	.word	0x00000010

023fd1cc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fd1cc:	b509      	push	{r0, r3, lr}
 23fd1ce:	4804      	ldr	r0, [pc, #16]	; (23fd1e0 <hal_i2c_read+0x14>)
 23fd1d0:	6800      	ldr	r0, [r0, #0]
 23fd1d2:	4b04      	ldr	r3, [pc, #16]	; (23fd1e4 <hal_i2c_read+0x18>)
 23fd1d4:	4403      	add	r3, r0
 23fd1d6:	681b      	ldr	r3, [r3, #0]
 23fd1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd1da:	9302      	str	r3, [sp, #8]
 23fd1dc:	bd09      	pop	{r0, r3, pc}
 23fd1de:	0000      	.short	0x0000
 23fd1e0:	1007ad64 	.word	0x1007ad64
 23fd1e4:	00000010 	.word	0x00000010

023fd1e8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fd1e8:	b509      	push	{r0, r3, lr}
 23fd1ea:	4804      	ldr	r0, [pc, #16]	; (23fd1fc <hal_i2c_peek+0x14>)
 23fd1ec:	6800      	ldr	r0, [r0, #0]
 23fd1ee:	4b04      	ldr	r3, [pc, #16]	; (23fd200 <hal_i2c_peek+0x18>)
 23fd1f0:	4403      	add	r3, r0
 23fd1f2:	681b      	ldr	r3, [r3, #0]
 23fd1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd1f6:	9302      	str	r3, [sp, #8]
 23fd1f8:	bd09      	pop	{r0, r3, pc}
 23fd1fa:	0000      	.short	0x0000
 23fd1fc:	1007ad64 	.word	0x1007ad64
 23fd200:	00000010 	.word	0x00000010

023fd204 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fd204:	b509      	push	{r0, r3, lr}
 23fd206:	4804      	ldr	r0, [pc, #16]	; (23fd218 <hal_i2c_flush+0x14>)
 23fd208:	6800      	ldr	r0, [r0, #0]
 23fd20a:	4b04      	ldr	r3, [pc, #16]	; (23fd21c <hal_i2c_flush+0x18>)
 23fd20c:	4403      	add	r3, r0
 23fd20e:	681b      	ldr	r3, [r3, #0]
 23fd210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd212:	9302      	str	r3, [sp, #8]
 23fd214:	bd09      	pop	{r0, r3, pc}
 23fd216:	0000      	.short	0x0000
 23fd218:	1007ad64 	.word	0x1007ad64
 23fd21c:	00000010 	.word	0x00000010

023fd220 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fd220:	b509      	push	{r0, r3, lr}
 23fd222:	4804      	ldr	r0, [pc, #16]	; (23fd234 <hal_i2c_is_enabled+0x14>)
 23fd224:	6800      	ldr	r0, [r0, #0]
 23fd226:	4b04      	ldr	r3, [pc, #16]	; (23fd238 <hal_i2c_is_enabled+0x18>)
 23fd228:	4403      	add	r3, r0
 23fd22a:	681b      	ldr	r3, [r3, #0]
 23fd22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd22e:	9302      	str	r3, [sp, #8]
 23fd230:	bd09      	pop	{r0, r3, pc}
 23fd232:	0000      	.short	0x0000
 23fd234:	1007ad64 	.word	0x1007ad64
 23fd238:	00000010 	.word	0x00000010

023fd23c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fd23c:	b509      	push	{r0, r3, lr}
 23fd23e:	4804      	ldr	r0, [pc, #16]	; (23fd250 <hal_i2c_init+0x14>)
 23fd240:	6800      	ldr	r0, [r0, #0]
 23fd242:	4b04      	ldr	r3, [pc, #16]	; (23fd254 <hal_i2c_init+0x18>)
 23fd244:	4403      	add	r3, r0
 23fd246:	681b      	ldr	r3, [r3, #0]
 23fd248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd24a:	9302      	str	r3, [sp, #8]
 23fd24c:	bd09      	pop	{r0, r3, pc}
 23fd24e:	0000      	.short	0x0000
 23fd250:	1007ad64 	.word	0x1007ad64
 23fd254:	00000010 	.word	0x00000010

023fd258 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fd258:	b509      	push	{r0, r3, lr}
 23fd25a:	4804      	ldr	r0, [pc, #16]	; (23fd26c <hal_i2c_request_ex+0x14>)
 23fd25c:	6800      	ldr	r0, [r0, #0]
 23fd25e:	4b04      	ldr	r3, [pc, #16]	; (23fd270 <hal_i2c_request_ex+0x18>)
 23fd260:	4403      	add	r3, r0
 23fd262:	681b      	ldr	r3, [r3, #0]
 23fd264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fd266:	9302      	str	r3, [sp, #8]
 23fd268:	bd09      	pop	{r0, r3, pc}
 23fd26a:	0000      	.short	0x0000
 23fd26c:	1007ad64 	.word	0x1007ad64
 23fd270:	00000010 	.word	0x00000010

023fd274 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fd274:	b509      	push	{r0, r3, lr}
 23fd276:	4804      	ldr	r0, [pc, #16]	; (23fd288 <hal_spi_init+0x14>)
 23fd278:	6800      	ldr	r0, [r0, #0]
 23fd27a:	4b04      	ldr	r3, [pc, #16]	; (23fd28c <hal_spi_init+0x18>)
 23fd27c:	4403      	add	r3, r0
 23fd27e:	681b      	ldr	r3, [r3, #0]
 23fd280:	69db      	ldr	r3, [r3, #28]
 23fd282:	9302      	str	r3, [sp, #8]
 23fd284:	bd09      	pop	{r0, r3, pc}
 23fd286:	0000      	.short	0x0000
 23fd288:	1007ad64 	.word	0x1007ad64
 23fd28c:	00000018 	.word	0x00000018

023fd290 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fd290:	b509      	push	{r0, r3, lr}
 23fd292:	4804      	ldr	r0, [pc, #16]	; (23fd2a4 <hal_spi_is_enabled+0x14>)
 23fd294:	6800      	ldr	r0, [r0, #0]
 23fd296:	4b04      	ldr	r3, [pc, #16]	; (23fd2a8 <hal_spi_is_enabled+0x18>)
 23fd298:	4403      	add	r3, r0
 23fd29a:	681b      	ldr	r3, [r3, #0]
 23fd29c:	6a1b      	ldr	r3, [r3, #32]
 23fd29e:	9302      	str	r3, [sp, #8]
 23fd2a0:	bd09      	pop	{r0, r3, pc}
 23fd2a2:	0000      	.short	0x0000
 23fd2a4:	1007ad64 	.word	0x1007ad64
 23fd2a8:	00000018 	.word	0x00000018

023fd2ac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fd2ac:	b509      	push	{r0, r3, lr}
 23fd2ae:	4804      	ldr	r0, [pc, #16]	; (23fd2c0 <HAL_USB_USART_Init+0x14>)
 23fd2b0:	6800      	ldr	r0, [r0, #0]
 23fd2b2:	4b04      	ldr	r3, [pc, #16]	; (23fd2c4 <HAL_USB_USART_Init+0x18>)
 23fd2b4:	4403      	add	r3, r0
 23fd2b6:	681b      	ldr	r3, [r3, #0]
 23fd2b8:	681b      	ldr	r3, [r3, #0]
 23fd2ba:	9302      	str	r3, [sp, #8]
 23fd2bc:	bd09      	pop	{r0, r3, pc}
 23fd2be:	0000      	.short	0x0000
 23fd2c0:	1007ad64 	.word	0x1007ad64
 23fd2c4:	00000034 	.word	0x00000034

023fd2c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fd2c8:	b509      	push	{r0, r3, lr}
 23fd2ca:	4804      	ldr	r0, [pc, #16]	; (23fd2dc <HAL_USB_USART_Begin+0x14>)
 23fd2cc:	6800      	ldr	r0, [r0, #0]
 23fd2ce:	4b04      	ldr	r3, [pc, #16]	; (23fd2e0 <HAL_USB_USART_Begin+0x18>)
 23fd2d0:	4403      	add	r3, r0
 23fd2d2:	681b      	ldr	r3, [r3, #0]
 23fd2d4:	685b      	ldr	r3, [r3, #4]
 23fd2d6:	9302      	str	r3, [sp, #8]
 23fd2d8:	bd09      	pop	{r0, r3, pc}
 23fd2da:	0000      	.short	0x0000
 23fd2dc:	1007ad64 	.word	0x1007ad64
 23fd2e0:	00000034 	.word	0x00000034

023fd2e4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fd2e4:	b509      	push	{r0, r3, lr}
 23fd2e6:	4804      	ldr	r0, [pc, #16]	; (23fd2f8 <HAL_USB_USART_End+0x14>)
 23fd2e8:	6800      	ldr	r0, [r0, #0]
 23fd2ea:	4b04      	ldr	r3, [pc, #16]	; (23fd2fc <HAL_USB_USART_End+0x18>)
 23fd2ec:	4403      	add	r3, r0
 23fd2ee:	681b      	ldr	r3, [r3, #0]
 23fd2f0:	689b      	ldr	r3, [r3, #8]
 23fd2f2:	9302      	str	r3, [sp, #8]
 23fd2f4:	bd09      	pop	{r0, r3, pc}
 23fd2f6:	0000      	.short	0x0000
 23fd2f8:	1007ad64 	.word	0x1007ad64
 23fd2fc:	00000034 	.word	0x00000034

023fd300 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fd300:	b509      	push	{r0, r3, lr}
 23fd302:	4804      	ldr	r0, [pc, #16]	; (23fd314 <HAL_USB_USART_Available_Data+0x14>)
 23fd304:	6800      	ldr	r0, [r0, #0]
 23fd306:	4b04      	ldr	r3, [pc, #16]	; (23fd318 <HAL_USB_USART_Available_Data+0x18>)
 23fd308:	4403      	add	r3, r0
 23fd30a:	681b      	ldr	r3, [r3, #0]
 23fd30c:	691b      	ldr	r3, [r3, #16]
 23fd30e:	9302      	str	r3, [sp, #8]
 23fd310:	bd09      	pop	{r0, r3, pc}
 23fd312:	0000      	.short	0x0000
 23fd314:	1007ad64 	.word	0x1007ad64
 23fd318:	00000034 	.word	0x00000034

023fd31c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fd31c:	b509      	push	{r0, r3, lr}
 23fd31e:	4804      	ldr	r0, [pc, #16]	; (23fd330 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd320:	6800      	ldr	r0, [r0, #0]
 23fd322:	4b04      	ldr	r3, [pc, #16]	; (23fd334 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd324:	4403      	add	r3, r0
 23fd326:	681b      	ldr	r3, [r3, #0]
 23fd328:	695b      	ldr	r3, [r3, #20]
 23fd32a:	9302      	str	r3, [sp, #8]
 23fd32c:	bd09      	pop	{r0, r3, pc}
 23fd32e:	0000      	.short	0x0000
 23fd330:	1007ad64 	.word	0x1007ad64
 23fd334:	00000034 	.word	0x00000034

023fd338 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd338:	b509      	push	{r0, r3, lr}
 23fd33a:	4804      	ldr	r0, [pc, #16]	; (23fd34c <HAL_USB_USART_Receive_Data+0x14>)
 23fd33c:	6800      	ldr	r0, [r0, #0]
 23fd33e:	4b04      	ldr	r3, [pc, #16]	; (23fd350 <HAL_USB_USART_Receive_Data+0x18>)
 23fd340:	4403      	add	r3, r0
 23fd342:	681b      	ldr	r3, [r3, #0]
 23fd344:	699b      	ldr	r3, [r3, #24]
 23fd346:	9302      	str	r3, [sp, #8]
 23fd348:	bd09      	pop	{r0, r3, pc}
 23fd34a:	0000      	.short	0x0000
 23fd34c:	1007ad64 	.word	0x1007ad64
 23fd350:	00000034 	.word	0x00000034

023fd354 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd354:	b509      	push	{r0, r3, lr}
 23fd356:	4804      	ldr	r0, [pc, #16]	; (23fd368 <HAL_USB_USART_Send_Data+0x14>)
 23fd358:	6800      	ldr	r0, [r0, #0]
 23fd35a:	4b04      	ldr	r3, [pc, #16]	; (23fd36c <HAL_USB_USART_Send_Data+0x18>)
 23fd35c:	4403      	add	r3, r0
 23fd35e:	681b      	ldr	r3, [r3, #0]
 23fd360:	69db      	ldr	r3, [r3, #28]
 23fd362:	9302      	str	r3, [sp, #8]
 23fd364:	bd09      	pop	{r0, r3, pc}
 23fd366:	0000      	.short	0x0000
 23fd368:	1007ad64 	.word	0x1007ad64
 23fd36c:	00000034 	.word	0x00000034

023fd370 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fd370:	b509      	push	{r0, r3, lr}
 23fd372:	4804      	ldr	r0, [pc, #16]	; (23fd384 <HAL_USB_USART_Flush_Data+0x14>)
 23fd374:	6800      	ldr	r0, [r0, #0]
 23fd376:	4b04      	ldr	r3, [pc, #16]	; (23fd388 <HAL_USB_USART_Flush_Data+0x18>)
 23fd378:	4403      	add	r3, r0
 23fd37a:	681b      	ldr	r3, [r3, #0]
 23fd37c:	6a1b      	ldr	r3, [r3, #32]
 23fd37e:	9302      	str	r3, [sp, #8]
 23fd380:	bd09      	pop	{r0, r3, pc}
 23fd382:	0000      	.short	0x0000
 23fd384:	1007ad64 	.word	0x1007ad64
 23fd388:	00000034 	.word	0x00000034

023fd38c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd38c:	b509      	push	{r0, r3, lr}
 23fd38e:	4804      	ldr	r0, [pc, #16]	; (23fd3a0 <panic_+0x14>)
 23fd390:	6800      	ldr	r0, [r0, #0]
 23fd392:	4b04      	ldr	r3, [pc, #16]	; (23fd3a4 <panic_+0x18>)
 23fd394:	4403      	add	r3, r0
 23fd396:	681b      	ldr	r3, [r3, #0]
 23fd398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd39a:	9302      	str	r3, [sp, #8]
 23fd39c:	bd09      	pop	{r0, r3, pc}
 23fd39e:	0000      	.short	0x0000
 23fd3a0:	1007ad64 	.word	0x1007ad64
 23fd3a4:	00000048 	.word	0x00000048

023fd3a8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fd3a8:	b509      	push	{r0, r3, lr}
 23fd3aa:	4804      	ldr	r0, [pc, #16]	; (23fd3bc <log_level_name+0x14>)
 23fd3ac:	6800      	ldr	r0, [r0, #0]
 23fd3ae:	4b04      	ldr	r3, [pc, #16]	; (23fd3c0 <log_level_name+0x18>)
 23fd3b0:	4403      	add	r3, r0
 23fd3b2:	681b      	ldr	r3, [r3, #0]
 23fd3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fd3b6:	9302      	str	r3, [sp, #8]
 23fd3b8:	bd09      	pop	{r0, r3, pc}
 23fd3ba:	0000      	.short	0x0000
 23fd3bc:	1007ad64 	.word	0x1007ad64
 23fd3c0:	00000048 	.word	0x00000048

023fd3c4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fd3c4:	b509      	push	{r0, r3, lr}
 23fd3c6:	4804      	ldr	r0, [pc, #16]	; (23fd3d8 <log_set_callbacks+0x14>)
 23fd3c8:	6800      	ldr	r0, [r0, #0]
 23fd3ca:	4b04      	ldr	r3, [pc, #16]	; (23fd3dc <log_set_callbacks+0x18>)
 23fd3cc:	4403      	add	r3, r0
 23fd3ce:	681b      	ldr	r3, [r3, #0]
 23fd3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fd3d2:	9302      	str	r3, [sp, #8]
 23fd3d4:	bd09      	pop	{r0, r3, pc}
 23fd3d6:	0000      	.short	0x0000
 23fd3d8:	1007ad64 	.word	0x1007ad64
 23fd3dc:	00000048 	.word	0x00000048

023fd3e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd3e0:	b509      	push	{r0, r3, lr}
 23fd3e2:	4804      	ldr	r0, [pc, #16]	; (23fd3f4 <set_system_mode+0x14>)
 23fd3e4:	6800      	ldr	r0, [r0, #0]
 23fd3e6:	4b04      	ldr	r3, [pc, #16]	; (23fd3f8 <set_system_mode+0x18>)
 23fd3e8:	4403      	add	r3, r0
 23fd3ea:	681b      	ldr	r3, [r3, #0]
 23fd3ec:	685b      	ldr	r3, [r3, #4]
 23fd3ee:	9302      	str	r3, [sp, #8]
 23fd3f0:	bd09      	pop	{r0, r3, pc}
 23fd3f2:	0000      	.short	0x0000
 23fd3f4:	1007ad64 	.word	0x1007ad64
 23fd3f8:	00000008 	.word	0x00000008

023fd3fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fd3fc:	b509      	push	{r0, r3, lr}
 23fd3fe:	4804      	ldr	r0, [pc, #16]	; (23fd410 <system_thread_set_state+0x14>)
 23fd400:	6800      	ldr	r0, [r0, #0]
 23fd402:	4b04      	ldr	r3, [pc, #16]	; (23fd414 <system_thread_set_state+0x18>)
 23fd404:	4403      	add	r3, r0
 23fd406:	681b      	ldr	r3, [r3, #0]
 23fd408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd40a:	9302      	str	r3, [sp, #8]
 23fd40c:	bd09      	pop	{r0, r3, pc}
 23fd40e:	0000      	.short	0x0000
 23fd410:	1007ad64 	.word	0x1007ad64
 23fd414:	00000008 	.word	0x00000008

023fd418 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd418:	b509      	push	{r0, r3, lr}
 23fd41a:	4804      	ldr	r0, [pc, #16]	; (23fd42c <system_ctrl_set_app_request_handler+0x14>)
 23fd41c:	6800      	ldr	r0, [r0, #0]
 23fd41e:	4b04      	ldr	r3, [pc, #16]	; (23fd430 <system_ctrl_set_app_request_handler+0x18>)
 23fd420:	4403      	add	r3, r0
 23fd422:	681b      	ldr	r3, [r3, #0]
 23fd424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd428:	9302      	str	r3, [sp, #8]
 23fd42a:	bd09      	pop	{r0, r3, pc}
 23fd42c:	1007ad64 	.word	0x1007ad64
 23fd430:	00000008 	.word	0x00000008

023fd434 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd434:	b509      	push	{r0, r3, lr}
 23fd436:	4804      	ldr	r0, [pc, #16]	; (23fd448 <system_ctrl_set_result+0x14>)
 23fd438:	6800      	ldr	r0, [r0, #0]
 23fd43a:	4b04      	ldr	r3, [pc, #16]	; (23fd44c <system_ctrl_set_result+0x18>)
 23fd43c:	4403      	add	r3, r0
 23fd43e:	681b      	ldr	r3, [r3, #0]
 23fd440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd444:	9302      	str	r3, [sp, #8]
 23fd446:	bd09      	pop	{r0, r3, pc}
 23fd448:	1007ad64 	.word	0x1007ad64
 23fd44c:	00000008 	.word	0x00000008

023fd450 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd450:	b509      	push	{r0, r3, lr}
 23fd452:	4804      	ldr	r0, [pc, #16]	; (23fd464 <network_connect+0x14>)
 23fd454:	6800      	ldr	r0, [r0, #0]
 23fd456:	4b04      	ldr	r3, [pc, #16]	; (23fd468 <network_connect+0x18>)
 23fd458:	4403      	add	r3, r0
 23fd45a:	681b      	ldr	r3, [r3, #0]
 23fd45c:	685b      	ldr	r3, [r3, #4]
 23fd45e:	9302      	str	r3, [sp, #8]
 23fd460:	bd09      	pop	{r0, r3, pc}
 23fd462:	0000      	.short	0x0000
 23fd464:	1007ad64 	.word	0x1007ad64
 23fd468:	00000028 	.word	0x00000028

023fd46c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd46c:	b509      	push	{r0, r3, lr}
 23fd46e:	4804      	ldr	r0, [pc, #16]	; (23fd480 <network_connecting+0x14>)
 23fd470:	6800      	ldr	r0, [r0, #0]
 23fd472:	4b04      	ldr	r3, [pc, #16]	; (23fd484 <network_connecting+0x18>)
 23fd474:	4403      	add	r3, r0
 23fd476:	681b      	ldr	r3, [r3, #0]
 23fd478:	689b      	ldr	r3, [r3, #8]
 23fd47a:	9302      	str	r3, [sp, #8]
 23fd47c:	bd09      	pop	{r0, r3, pc}
 23fd47e:	0000      	.short	0x0000
 23fd480:	1007ad64 	.word	0x1007ad64
 23fd484:	00000028 	.word	0x00000028

023fd488 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd488:	b509      	push	{r0, r3, lr}
 23fd48a:	4804      	ldr	r0, [pc, #16]	; (23fd49c <network_disconnect+0x14>)
 23fd48c:	6800      	ldr	r0, [r0, #0]
 23fd48e:	4b04      	ldr	r3, [pc, #16]	; (23fd4a0 <network_disconnect+0x18>)
 23fd490:	4403      	add	r3, r0
 23fd492:	681b      	ldr	r3, [r3, #0]
 23fd494:	68db      	ldr	r3, [r3, #12]
 23fd496:	9302      	str	r3, [sp, #8]
 23fd498:	bd09      	pop	{r0, r3, pc}
 23fd49a:	0000      	.short	0x0000
 23fd49c:	1007ad64 	.word	0x1007ad64
 23fd4a0:	00000028 	.word	0x00000028

023fd4a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd4a4:	b509      	push	{r0, r3, lr}
 23fd4a6:	4804      	ldr	r0, [pc, #16]	; (23fd4b8 <network_ready+0x14>)
 23fd4a8:	6800      	ldr	r0, [r0, #0]
 23fd4aa:	4b04      	ldr	r3, [pc, #16]	; (23fd4bc <network_ready+0x18>)
 23fd4ac:	4403      	add	r3, r0
 23fd4ae:	681b      	ldr	r3, [r3, #0]
 23fd4b0:	691b      	ldr	r3, [r3, #16]
 23fd4b2:	9302      	str	r3, [sp, #8]
 23fd4b4:	bd09      	pop	{r0, r3, pc}
 23fd4b6:	0000      	.short	0x0000
 23fd4b8:	1007ad64 	.word	0x1007ad64
 23fd4bc:	00000028 	.word	0x00000028

023fd4c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd4c0:	b509      	push	{r0, r3, lr}
 23fd4c2:	4804      	ldr	r0, [pc, #16]	; (23fd4d4 <network_on+0x14>)
 23fd4c4:	6800      	ldr	r0, [r0, #0]
 23fd4c6:	4b04      	ldr	r3, [pc, #16]	; (23fd4d8 <network_on+0x18>)
 23fd4c8:	4403      	add	r3, r0
 23fd4ca:	681b      	ldr	r3, [r3, #0]
 23fd4cc:	695b      	ldr	r3, [r3, #20]
 23fd4ce:	9302      	str	r3, [sp, #8]
 23fd4d0:	bd09      	pop	{r0, r3, pc}
 23fd4d2:	0000      	.short	0x0000
 23fd4d4:	1007ad64 	.word	0x1007ad64
 23fd4d8:	00000028 	.word	0x00000028

023fd4dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd4dc:	b509      	push	{r0, r3, lr}
 23fd4de:	4804      	ldr	r0, [pc, #16]	; (23fd4f0 <network_off+0x14>)
 23fd4e0:	6800      	ldr	r0, [r0, #0]
 23fd4e2:	4b04      	ldr	r3, [pc, #16]	; (23fd4f4 <network_off+0x18>)
 23fd4e4:	4403      	add	r3, r0
 23fd4e6:	681b      	ldr	r3, [r3, #0]
 23fd4e8:	699b      	ldr	r3, [r3, #24]
 23fd4ea:	9302      	str	r3, [sp, #8]
 23fd4ec:	bd09      	pop	{r0, r3, pc}
 23fd4ee:	0000      	.short	0x0000
 23fd4f0:	1007ad64 	.word	0x1007ad64
 23fd4f4:	00000028 	.word	0x00000028

023fd4f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd4f8:	b509      	push	{r0, r3, lr}
 23fd4fa:	4804      	ldr	r0, [pc, #16]	; (23fd50c <network_listen+0x14>)
 23fd4fc:	6800      	ldr	r0, [r0, #0]
 23fd4fe:	4b04      	ldr	r3, [pc, #16]	; (23fd510 <network_listen+0x18>)
 23fd500:	4403      	add	r3, r0
 23fd502:	681b      	ldr	r3, [r3, #0]
 23fd504:	69db      	ldr	r3, [r3, #28]
 23fd506:	9302      	str	r3, [sp, #8]
 23fd508:	bd09      	pop	{r0, r3, pc}
 23fd50a:	0000      	.short	0x0000
 23fd50c:	1007ad64 	.word	0x1007ad64
 23fd510:	00000028 	.word	0x00000028

023fd514 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd514:	b509      	push	{r0, r3, lr}
 23fd516:	4804      	ldr	r0, [pc, #16]	; (23fd528 <network_listening+0x14>)
 23fd518:	6800      	ldr	r0, [r0, #0]
 23fd51a:	4b04      	ldr	r3, [pc, #16]	; (23fd52c <network_listening+0x18>)
 23fd51c:	4403      	add	r3, r0
 23fd51e:	681b      	ldr	r3, [r3, #0]
 23fd520:	6a1b      	ldr	r3, [r3, #32]
 23fd522:	9302      	str	r3, [sp, #8]
 23fd524:	bd09      	pop	{r0, r3, pc}
 23fd526:	0000      	.short	0x0000
 23fd528:	1007ad64 	.word	0x1007ad64
 23fd52c:	00000028 	.word	0x00000028

023fd530 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd530:	b509      	push	{r0, r3, lr}
 23fd532:	4804      	ldr	r0, [pc, #16]	; (23fd544 <network_set_listen_timeout+0x14>)
 23fd534:	6800      	ldr	r0, [r0, #0]
 23fd536:	4b04      	ldr	r3, [pc, #16]	; (23fd548 <network_set_listen_timeout+0x18>)
 23fd538:	4403      	add	r3, r0
 23fd53a:	681b      	ldr	r3, [r3, #0]
 23fd53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd53e:	9302      	str	r3, [sp, #8]
 23fd540:	bd09      	pop	{r0, r3, pc}
 23fd542:	0000      	.short	0x0000
 23fd544:	1007ad64 	.word	0x1007ad64
 23fd548:	00000028 	.word	0x00000028

023fd54c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd54c:	b509      	push	{r0, r3, lr}
 23fd54e:	4804      	ldr	r0, [pc, #16]	; (23fd560 <network_get_listen_timeout+0x14>)
 23fd550:	6800      	ldr	r0, [r0, #0]
 23fd552:	4b04      	ldr	r3, [pc, #16]	; (23fd564 <network_get_listen_timeout+0x18>)
 23fd554:	4403      	add	r3, r0
 23fd556:	681b      	ldr	r3, [r3, #0]
 23fd558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd55a:	9302      	str	r3, [sp, #8]
 23fd55c:	bd09      	pop	{r0, r3, pc}
 23fd55e:	0000      	.short	0x0000
 23fd560:	1007ad64 	.word	0x1007ad64
 23fd564:	00000028 	.word	0x00000028

023fd568 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd568:	b509      	push	{r0, r3, lr}
 23fd56a:	4804      	ldr	r0, [pc, #16]	; (23fd57c <network_is_on+0x14>)
 23fd56c:	6800      	ldr	r0, [r0, #0]
 23fd56e:	4b04      	ldr	r3, [pc, #16]	; (23fd580 <network_is_on+0x18>)
 23fd570:	4403      	add	r3, r0
 23fd572:	681b      	ldr	r3, [r3, #0]
 23fd574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd576:	9302      	str	r3, [sp, #8]
 23fd578:	bd09      	pop	{r0, r3, pc}
 23fd57a:	0000      	.short	0x0000
 23fd57c:	1007ad64 	.word	0x1007ad64
 23fd580:	00000028 	.word	0x00000028

023fd584 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd584:	b509      	push	{r0, r3, lr}
 23fd586:	4804      	ldr	r0, [pc, #16]	; (23fd598 <network_is_off+0x14>)
 23fd588:	6800      	ldr	r0, [r0, #0]
 23fd58a:	4b04      	ldr	r3, [pc, #16]	; (23fd59c <network_is_off+0x18>)
 23fd58c:	4403      	add	r3, r0
 23fd58e:	681b      	ldr	r3, [r3, #0]
 23fd590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd592:	9302      	str	r3, [sp, #8]
 23fd594:	bd09      	pop	{r0, r3, pc}
 23fd596:	0000      	.short	0x0000
 23fd598:	1007ad64 	.word	0x1007ad64
 23fd59c:	00000028 	.word	0x00000028

023fd5a0 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fd5a0:	b509      	push	{r0, r3, lr}
 23fd5a2:	4804      	ldr	r0, [pc, #16]	; (23fd5b4 <network_prefer+0x14>)
 23fd5a4:	6800      	ldr	r0, [r0, #0]
 23fd5a6:	4b04      	ldr	r3, [pc, #16]	; (23fd5b8 <network_prefer+0x18>)
 23fd5a8:	4403      	add	r3, r0
 23fd5aa:	681b      	ldr	r3, [r3, #0]
 23fd5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd5ae:	9302      	str	r3, [sp, #8]
 23fd5b0:	bd09      	pop	{r0, r3, pc}
 23fd5b2:	0000      	.short	0x0000
 23fd5b4:	1007ad64 	.word	0x1007ad64
 23fd5b8:	00000028 	.word	0x00000028

023fd5bc <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fd5bc:	b509      	push	{r0, r3, lr}
 23fd5be:	4804      	ldr	r0, [pc, #16]	; (23fd5d0 <network_is_preferred+0x14>)
 23fd5c0:	6800      	ldr	r0, [r0, #0]
 23fd5c2:	4b04      	ldr	r3, [pc, #16]	; (23fd5d4 <network_is_preferred+0x18>)
 23fd5c4:	4403      	add	r3, r0
 23fd5c6:	681b      	ldr	r3, [r3, #0]
 23fd5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd5ca:	9302      	str	r3, [sp, #8]
 23fd5cc:	bd09      	pop	{r0, r3, pc}
 23fd5ce:	0000      	.short	0x0000
 23fd5d0:	1007ad64 	.word	0x1007ad64
 23fd5d4:	00000028 	.word	0x00000028

023fd5d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd5d8:	b509      	push	{r0, r3, lr}
 23fd5da:	4804      	ldr	r0, [pc, #16]	; (23fd5ec <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd5dc:	6800      	ldr	r0, [r0, #0]
 23fd5de:	4b04      	ldr	r3, [pc, #16]	; (23fd5f0 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd5e0:	4403      	add	r3, r0
 23fd5e2:	681b      	ldr	r3, [r3, #0]
 23fd5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd5e6:	9302      	str	r3, [sp, #8]
 23fd5e8:	bd09      	pop	{r0, r3, pc}
 23fd5ea:	0000      	.short	0x0000
 23fd5ec:	1007ad64 	.word	0x1007ad64
 23fd5f0:	0000002c 	.word	0x0000002c

023fd5f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd5f4:	b509      	push	{r0, r3, lr}
 23fd5f6:	4804      	ldr	r0, [pc, #16]	; (23fd608 <malloc+0x14>)
 23fd5f8:	6800      	ldr	r0, [r0, #0]
 23fd5fa:	4b04      	ldr	r3, [pc, #16]	; (23fd60c <malloc+0x18>)
 23fd5fc:	4403      	add	r3, r0
 23fd5fe:	681b      	ldr	r3, [r3, #0]
 23fd600:	681b      	ldr	r3, [r3, #0]
 23fd602:	9302      	str	r3, [sp, #8]
 23fd604:	bd09      	pop	{r0, r3, pc}
 23fd606:	0000      	.short	0x0000
 23fd608:	1007ad64 	.word	0x1007ad64
 23fd60c:	00000004 	.word	0x00000004

023fd610 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd610:	b509      	push	{r0, r3, lr}
 23fd612:	4804      	ldr	r0, [pc, #16]	; (23fd624 <free+0x14>)
 23fd614:	6800      	ldr	r0, [r0, #0]
 23fd616:	4b04      	ldr	r3, [pc, #16]	; (23fd628 <free+0x18>)
 23fd618:	4403      	add	r3, r0
 23fd61a:	681b      	ldr	r3, [r3, #0]
 23fd61c:	685b      	ldr	r3, [r3, #4]
 23fd61e:	9302      	str	r3, [sp, #8]
 23fd620:	bd09      	pop	{r0, r3, pc}
 23fd622:	0000      	.short	0x0000
 23fd624:	1007ad64 	.word	0x1007ad64
 23fd628:	00000004 	.word	0x00000004

023fd62c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd62c:	b509      	push	{r0, r3, lr}
 23fd62e:	4804      	ldr	r0, [pc, #16]	; (23fd640 <realloc+0x14>)
 23fd630:	6800      	ldr	r0, [r0, #0]
 23fd632:	4b04      	ldr	r3, [pc, #16]	; (23fd644 <realloc+0x18>)
 23fd634:	4403      	add	r3, r0
 23fd636:	681b      	ldr	r3, [r3, #0]
 23fd638:	689b      	ldr	r3, [r3, #8]
 23fd63a:	9302      	str	r3, [sp, #8]
 23fd63c:	bd09      	pop	{r0, r3, pc}
 23fd63e:	0000      	.short	0x0000
 23fd640:	1007ad64 	.word	0x1007ad64
 23fd644:	00000004 	.word	0x00000004

023fd648 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd648:	b509      	push	{r0, r3, lr}
 23fd64a:	4804      	ldr	r0, [pc, #16]	; (23fd65c <vsnprintf+0x14>)
 23fd64c:	6800      	ldr	r0, [r0, #0]
 23fd64e:	4b04      	ldr	r3, [pc, #16]	; (23fd660 <vsnprintf+0x18>)
 23fd650:	4403      	add	r3, r0
 23fd652:	681b      	ldr	r3, [r3, #0]
 23fd654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd656:	9302      	str	r3, [sp, #8]
 23fd658:	bd09      	pop	{r0, r3, pc}
 23fd65a:	0000      	.short	0x0000
 23fd65c:	1007ad64 	.word	0x1007ad64
 23fd660:	00000004 	.word	0x00000004

023fd664 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd664:	b509      	push	{r0, r3, lr}
 23fd666:	4804      	ldr	r0, [pc, #16]	; (23fd678 <__errno+0x14>)
 23fd668:	6800      	ldr	r0, [r0, #0]
 23fd66a:	4b04      	ldr	r3, [pc, #16]	; (23fd67c <__errno+0x18>)
 23fd66c:	4403      	add	r3, r0
 23fd66e:	681b      	ldr	r3, [r3, #0]
 23fd670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd672:	9302      	str	r3, [sp, #8]
 23fd674:	bd09      	pop	{r0, r3, pc}
 23fd676:	0000      	.short	0x0000
 23fd678:	1007ad64 	.word	0x1007ad64
 23fd67c:	00000004 	.word	0x00000004

023fd680 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd680:	b509      	push	{r0, r3, lr}
 23fd682:	4804      	ldr	r0, [pc, #16]	; (23fd694 <__assert_func+0x14>)
 23fd684:	6800      	ldr	r0, [r0, #0]
 23fd686:	4b04      	ldr	r3, [pc, #16]	; (23fd698 <__assert_func+0x18>)
 23fd688:	4403      	add	r3, r0
 23fd68a:	681b      	ldr	r3, [r3, #0]
 23fd68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd68e:	9302      	str	r3, [sp, #8]
 23fd690:	bd09      	pop	{r0, r3, pc}
 23fd692:	0000      	.short	0x0000
 23fd694:	1007ad64 	.word	0x1007ad64
 23fd698:	00000004 	.word	0x00000004

023fd69c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd69c:	b509      	push	{r0, r3, lr}
 23fd69e:	4804      	ldr	r0, [pc, #16]	; (23fd6b0 <newlib_impure_ptr_callback+0x14>)
 23fd6a0:	6800      	ldr	r0, [r0, #0]
 23fd6a2:	4b04      	ldr	r3, [pc, #16]	; (23fd6b4 <newlib_impure_ptr_callback+0x18>)
 23fd6a4:	4403      	add	r3, r0
 23fd6a6:	681b      	ldr	r3, [r3, #0]
 23fd6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd6aa:	9302      	str	r3, [sp, #8]
 23fd6ac:	bd09      	pop	{r0, r3, pc}
 23fd6ae:	0000      	.short	0x0000
 23fd6b0:	1007ad64 	.word	0x1007ad64
 23fd6b4:	00000004 	.word	0x00000004

023fd6b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd6b8:	2200      	movs	r2, #0
 23fd6ba:	6840      	ldr	r0, [r0, #4]
 23fd6bc:	4611      	mov	r1, r2
 23fd6be:	f7ff bf29 	b.w	23fd514 <network_listening>

023fd6c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd6c2:	2200      	movs	r2, #0
 23fd6c4:	6840      	ldr	r0, [r0, #4]
 23fd6c6:	4611      	mov	r1, r2
 23fd6c8:	f7ff bf40 	b.w	23fd54c <network_get_listen_timeout>

023fd6cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd6cc:	2200      	movs	r2, #0
 23fd6ce:	6840      	ldr	r0, [r0, #4]
 23fd6d0:	f7ff bf2e 	b.w	23fd530 <network_set_listen_timeout>

023fd6d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd6d4:	2200      	movs	r2, #0
 23fd6d6:	6840      	ldr	r0, [r0, #4]
 23fd6d8:	f081 0101 	eor.w	r1, r1, #1
 23fd6dc:	f7ff bf0c 	b.w	23fd4f8 <network_listen>

023fd6e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd6e0:	2300      	movs	r3, #0
 23fd6e2:	6840      	ldr	r0, [r0, #4]
 23fd6e4:	461a      	mov	r2, r3
 23fd6e6:	4619      	mov	r1, r3
 23fd6e8:	f7ff bef8 	b.w	23fd4dc <network_off>

023fd6ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd6ec:	2300      	movs	r3, #0
 23fd6ee:	6840      	ldr	r0, [r0, #4]
 23fd6f0:	461a      	mov	r2, r3
 23fd6f2:	4619      	mov	r1, r3
 23fd6f4:	f7ff bee4 	b.w	23fd4c0 <network_on>

023fd6f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd6f8:	2200      	movs	r2, #0
 23fd6fa:	6840      	ldr	r0, [r0, #4]
 23fd6fc:	4611      	mov	r1, r2
 23fd6fe:	f7ff bed1 	b.w	23fd4a4 <network_ready>

023fd702 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd702:	2200      	movs	r2, #0
 23fd704:	6840      	ldr	r0, [r0, #4]
 23fd706:	4611      	mov	r1, r2
 23fd708:	f7ff beb0 	b.w	23fd46c <network_connecting>

023fd70c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd70c:	2200      	movs	r2, #0
 23fd70e:	2102      	movs	r1, #2
 23fd710:	6840      	ldr	r0, [r0, #4]
 23fd712:	f7ff beb9 	b.w	23fd488 <network_disconnect>

023fd716 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd716:	2300      	movs	r3, #0
 23fd718:	6840      	ldr	r0, [r0, #4]
 23fd71a:	461a      	mov	r2, r3
 23fd71c:	f7ff be98 	b.w	23fd450 <network_connect>

023fd720 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd720:	2203      	movs	r2, #3
 23fd722:	4b02      	ldr	r3, [pc, #8]	; (23fd72c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd724:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd726:	4a02      	ldr	r2, [pc, #8]	; (23fd730 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd728:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd72a:	4770      	bx	lr
 23fd72c:	1007ae4c 	.word	0x1007ae4c
 23fd730:	023ffbac 	.word	0x023ffbac

023fd734 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd734:	680b      	ldr	r3, [r1, #0]
 23fd736:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd738:	684b      	ldr	r3, [r1, #4]
 23fd73a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd73c:	b113      	cbz	r3, 23fd744 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd73e:	685a      	ldr	r2, [r3, #4]
 23fd740:	3201      	adds	r2, #1
 23fd742:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd744:	4770      	bx	lr

023fd746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fd746:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fd748:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fd74a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fd74c:	b17c      	cbz	r4, 23fd76e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fd74e:	6863      	ldr	r3, [r4, #4]
 23fd750:	3b01      	subs	r3, #1
 23fd752:	6063      	str	r3, [r4, #4]
 23fd754:	b95b      	cbnz	r3, 23fd76e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fd756:	6823      	ldr	r3, [r4, #0]
 23fd758:	4620      	mov	r0, r4
 23fd75a:	689b      	ldr	r3, [r3, #8]
 23fd75c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd75e:	68a3      	ldr	r3, [r4, #8]
 23fd760:	3b01      	subs	r3, #1
 23fd762:	60a3      	str	r3, [r4, #8]
 23fd764:	b91b      	cbnz	r3, 23fd76e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fd766:	6823      	ldr	r3, [r4, #0]
 23fd768:	4620      	mov	r0, r4
 23fd76a:	68db      	ldr	r3, [r3, #12]
 23fd76c:	4798      	blx	r3
      }
 23fd76e:	4628      	mov	r0, r5
 23fd770:	bd38      	pop	{r3, r4, r5, pc}

023fd772 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd772:	b510      	push	{r4, lr}
 23fd774:	4604      	mov	r4, r0
 23fd776:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd778:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd77a:	f7ff fd7b 	bl	23fd274 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd77e:	2300      	movs	r3, #0
}
 23fd780:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd782:	6063      	str	r3, [r4, #4]
}
 23fd784:	bd10      	pop	{r4, pc}
	...

023fd788 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd788:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd78a:	2000      	movs	r0, #0
 23fd78c:	4b04      	ldr	r3, [pc, #16]	; (23fd7a0 <_GLOBAL__sub_I_System+0x18>)
 23fd78e:	601a      	str	r2, [r3, #0]
 23fd790:	4b04      	ldr	r3, [pc, #16]	; (23fd7a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd792:	4a05      	ldr	r2, [pc, #20]	; (23fd7a8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd794:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd798:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd79a:	f7ff be21 	b.w	23fd3e0 <set_system_mode>
 23fd79e:	bf00      	nop
 23fd7a0:	1007ae60 	.word	0x1007ae60
 23fd7a4:	1007ae54 	.word	0x1007ae54
 23fd7a8:	ffff0000 	.word	0xffff0000

023fd7ac <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fd7ac:	b510      	push	{r4, lr}
 23fd7ae:	4604      	mov	r4, r0
{
    free(buffer);
 23fd7b0:	6800      	ldr	r0, [r0, #0]
 23fd7b2:	f7ff ff2d 	bl	23fd610 <free>
}
 23fd7b6:	4620      	mov	r0, r4
 23fd7b8:	bd10      	pop	{r4, pc}

023fd7ba <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fd7ba:	b510      	push	{r4, lr}
 23fd7bc:	4604      	mov	r4, r0
    if (buffer) {
 23fd7be:	6800      	ldr	r0, [r0, #0]
 23fd7c0:	b108      	cbz	r0, 23fd7c6 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fd7c2:	f7ff ff25 	bl	23fd610 <free>
    }
    buffer = nullptr;
 23fd7c6:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fd7c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fd7cc:	6023      	str	r3, [r4, #0]
}
 23fd7ce:	bd10      	pop	{r4, pc}

023fd7d0 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd7d0:	b538      	push	{r3, r4, r5, lr}
 23fd7d2:	4604      	mov	r4, r0
 23fd7d4:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd7d6:	6800      	ldr	r0, [r0, #0]
 23fd7d8:	3101      	adds	r1, #1
 23fd7da:	f7ff ff27 	bl	23fd62c <realloc>
    if (newbuffer) {
 23fd7de:	b110      	cbz	r0, 23fd7e6 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fd7e0:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fd7e4:	2001      	movs	r0, #1
    }
    return 0;
}
 23fd7e6:	bd38      	pop	{r3, r4, r5, pc}

023fd7e8 <_ZN6String7reserveEj>:
{
 23fd7e8:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fd7ea:	6803      	ldr	r3, [r0, #0]
{
 23fd7ec:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fd7ee:	b123      	cbz	r3, 23fd7fa <_ZN6String7reserveEj+0x12>
 23fd7f0:	6843      	ldr	r3, [r0, #4]
 23fd7f2:	428b      	cmp	r3, r1
 23fd7f4:	d301      	bcc.n	23fd7fa <_ZN6String7reserveEj+0x12>
 23fd7f6:	2001      	movs	r0, #1
}
 23fd7f8:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fd7fa:	4620      	mov	r0, r4
 23fd7fc:	f7ff ffe8 	bl	23fd7d0 <_ZN6String12changeBufferEj>
 23fd800:	2800      	cmp	r0, #0
 23fd802:	d0f9      	beq.n	23fd7f8 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fd804:	68a3      	ldr	r3, [r4, #8]
 23fd806:	2b00      	cmp	r3, #0
 23fd808:	d1f5      	bne.n	23fd7f6 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fd80a:	6822      	ldr	r2, [r4, #0]
 23fd80c:	7013      	strb	r3, [r2, #0]
 23fd80e:	e7f2      	b.n	23fd7f6 <_ZN6String7reserveEj+0xe>

023fd810 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd812:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fd814:	4611      	mov	r1, r2
 23fd816:	9201      	str	r2, [sp, #4]
{
 23fd818:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fd81a:	f7ff ffe5 	bl	23fd7e8 <_ZN6String7reserveEj>
 23fd81e:	9a01      	ldr	r2, [sp, #4]
 23fd820:	b928      	cbnz	r0, 23fd82e <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fd822:	4620      	mov	r0, r4
 23fd824:	f7ff ffc9 	bl	23fd7ba <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fd828:	4620      	mov	r0, r4
 23fd82a:	b003      	add	sp, #12
 23fd82c:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fd82e:	4629      	mov	r1, r5
    len = length;
 23fd830:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fd832:	6820      	ldr	r0, [r4, #0]
 23fd834:	f001 ffea 	bl	23ff80c <memcpy>
    buffer[len] = 0;
 23fd838:	2100      	movs	r1, #0
 23fd83a:	6822      	ldr	r2, [r4, #0]
 23fd83c:	68a3      	ldr	r3, [r4, #8]
 23fd83e:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fd840:	e7f2      	b.n	23fd828 <_ZN6String4copyEPKcj+0x18>

023fd842 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd842:	b538      	push	{r3, r4, r5, lr}
 23fd844:	4605      	mov	r5, r0
    if (buffer) {
 23fd846:	6800      	ldr	r0, [r0, #0]
{
 23fd848:	460c      	mov	r4, r1
    if (buffer) {
 23fd84a:	b170      	cbz	r0, 23fd86a <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fd84c:	686a      	ldr	r2, [r5, #4]
 23fd84e:	688b      	ldr	r3, [r1, #8]
 23fd850:	429a      	cmp	r2, r3
 23fd852:	d308      	bcc.n	23fd866 <_ZN6String4moveERS_+0x24>
 23fd854:	6809      	ldr	r1, [r1, #0]
 23fd856:	b131      	cbz	r1, 23fd866 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fd858:	f002 f84d 	bl	23ff8f6 <strcpy>
            len = rhs.len;
 23fd85c:	68a3      	ldr	r3, [r4, #8]
 23fd85e:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fd860:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fd862:	60a3      	str	r3, [r4, #8]
}
 23fd864:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fd866:	f7ff fed3 	bl	23fd610 <free>
    buffer = rhs.buffer;
 23fd86a:	6823      	ldr	r3, [r4, #0]
 23fd86c:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fd86e:	6863      	ldr	r3, [r4, #4]
 23fd870:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fd872:	68a3      	ldr	r3, [r4, #8]
 23fd874:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fd876:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fd878:	e9c4 3300 	strd	r3, r3, [r4]
 23fd87c:	e7f1      	b.n	23fd862 <_ZN6String4moveERS_+0x20>

023fd87e <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fd87e:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd880:	b510      	push	{r4, lr}
 23fd882:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd884:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd888:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd88a:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fd88c:	f7ff ffd9 	bl	23fd842 <_ZN6String4moveERS_>
}
 23fd890:	4620      	mov	r0, r4
 23fd892:	bd10      	pop	{r4, pc}

023fd894 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fd894:	4288      	cmp	r0, r1
{
 23fd896:	b510      	push	{r4, lr}
 23fd898:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fd89a:	d005      	beq.n	23fd8a8 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fd89c:	680b      	ldr	r3, [r1, #0]
 23fd89e:	b12b      	cbz	r3, 23fd8ac <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fd8a0:	688a      	ldr	r2, [r1, #8]
 23fd8a2:	4619      	mov	r1, r3
 23fd8a4:	f7ff ffb4 	bl	23fd810 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fd8a8:	4620      	mov	r0, r4
 23fd8aa:	bd10      	pop	{r4, pc}
        invalidate();
 23fd8ac:	f7ff ff85 	bl	23fd7ba <_ZN6String10invalidateEv>
 23fd8b0:	e7fa      	b.n	23fd8a8 <_ZN6StringaSERKS_+0x14>

023fd8b2 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fd8b2:	2300      	movs	r3, #0
String::String(const String &value)
 23fd8b4:	b510      	push	{r4, lr}
 23fd8b6:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd8b8:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd8bc:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd8be:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fd8c0:	f7ff ffe8 	bl	23fd894 <_ZN6StringaSERKS_>
}
 23fd8c4:	4620      	mov	r0, r4
 23fd8c6:	bd10      	pop	{r4, pc}

023fd8c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fd8c8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd8ca:	6843      	ldr	r3, [r0, #4]
    {
 23fd8cc:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd8ce:	3b01      	subs	r3, #1
 23fd8d0:	6043      	str	r3, [r0, #4]
 23fd8d2:	b963      	cbnz	r3, 23fd8ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fd8d4:	6803      	ldr	r3, [r0, #0]
 23fd8d6:	689b      	ldr	r3, [r3, #8]
 23fd8d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd8da:	68a3      	ldr	r3, [r4, #8]
 23fd8dc:	3b01      	subs	r3, #1
 23fd8de:	60a3      	str	r3, [r4, #8]
 23fd8e0:	b92b      	cbnz	r3, 23fd8ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd8e2:	6823      	ldr	r3, [r4, #0]
 23fd8e4:	4620      	mov	r0, r4
    }
 23fd8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd8ea:	68db      	ldr	r3, [r3, #12]
 23fd8ec:	4718      	bx	r3
    }
 23fd8ee:	bd10      	pop	{r4, pc}

023fd8f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd8f0:	b570      	push	{r4, r5, r6, lr}
 23fd8f2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd8f4:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd8f8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd8fc:	42ae      	cmp	r6, r5
 23fd8fe:	d004      	beq.n	23fd90a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd900:	4628      	mov	r0, r5
 23fd902:	f7ff ff53 	bl	23fd7ac <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd906:	3510      	adds	r5, #16
 23fd908:	e7f8      	b.n	23fd8fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd90a:	6820      	ldr	r0, [r4, #0]
 23fd90c:	f7ff fe80 	bl	23fd610 <free>
    AllocatorT::free(data_);
}
 23fd910:	4620      	mov	r0, r4
 23fd912:	bd70      	pop	{r4, r5, r6, pc}

023fd914 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd914:	2300      	movs	r3, #0
 23fd916:	4802      	ldr	r0, [pc, #8]	; (23fd920 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd918:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd91a:	f7ff bb3f 	b.w	23fcf9c <os_mutex_recursive_create>
 23fd91e:	bf00      	nop
 23fd920:	1007ae64 	.word	0x1007ae64

023fd924 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23fd924:	b510      	push	{r4, lr}
 23fd926:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23fd928:	6880      	ldr	r0, [r0, #8]
 23fd92a:	6803      	ldr	r3, [r0, #0]
 23fd92c:	68db      	ldr	r3, [r3, #12]
 23fd92e:	4798      	blx	r3
 23fd930:	68e3      	ldr	r3, [r4, #12]
 23fd932:	4418      	add	r0, r3
 23fd934:	60e0      	str	r0, [r4, #12]
}
 23fd936:	bd10      	pop	{r4, pc}

023fd938 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd93a:	4606      	mov	r6, r0
 23fd93c:	460d      	mov	r5, r1
  size_t n = 0;
 23fd93e:	2400      	movs	r4, #0
 23fd940:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd942:	42bd      	cmp	r5, r7
 23fd944:	d00c      	beq.n	23fd960 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd946:	6833      	ldr	r3, [r6, #0]
 23fd948:	4630      	mov	r0, r6
 23fd94a:	689b      	ldr	r3, [r3, #8]
 23fd94c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd950:	4798      	blx	r3
     if (chunk>=0)
 23fd952:	1e03      	subs	r3, r0, #0
 23fd954:	db01      	blt.n	23fd95a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd956:	441c      	add	r4, r3
  while (size--) {
 23fd958:	e7f3      	b.n	23fd942 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd95a:	2c00      	cmp	r4, #0
 23fd95c:	bf08      	it	eq
 23fd95e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd960:	4620      	mov	r0, r4
 23fd962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd964 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd964:	4770      	bx	lr

023fd966 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd966:	b510      	push	{r4, lr}
 23fd968:	4604      	mov	r4, r0
 23fd96a:	2110      	movs	r1, #16
 23fd96c:	f7fe ff95 	bl	23fc89a <_ZdlPvj>
 23fd970:	4620      	mov	r0, r4
 23fd972:	bd10      	pop	{r4, pc}

023fd974 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fd974:	b513      	push	{r0, r1, r4, lr}
 23fd976:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fd978:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd97a:	b159      	cbz	r1, 23fd994 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd97c:	9101      	str	r1, [sp, #4]
 23fd97e:	f7fe ff63 	bl	23fc848 <strlen>
 23fd982:	4602      	mov	r2, r0
 23fd984:	4620      	mov	r0, r4
 23fd986:	6823      	ldr	r3, [r4, #0]
 23fd988:	9901      	ldr	r1, [sp, #4]
 23fd98a:	68db      	ldr	r3, [r3, #12]
    }
 23fd98c:	b002      	add	sp, #8
 23fd98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd992:	4718      	bx	r3
    }
 23fd994:	b002      	add	sp, #8
 23fd996:	bd10      	pop	{r4, pc}

023fd998 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd998:	6803      	ldr	r3, [r0, #0]
 23fd99a:	689b      	ldr	r3, [r3, #8]
 23fd99c:	4718      	bx	r3

023fd99e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fd99e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fd9a0:	210d      	movs	r1, #13
{
 23fd9a2:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fd9a4:	f7ff fff8 	bl	23fd998 <_ZN5Print5printEc>
  n += print('\n');
 23fd9a8:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fd9aa:	4604      	mov	r4, r0
  n += print('\n');
 23fd9ac:	4628      	mov	r0, r5
 23fd9ae:	f7ff fff3 	bl	23fd998 <_ZN5Print5printEc>
  return n;
}
 23fd9b2:	4420      	add	r0, r4
 23fd9b4:	bd38      	pop	{r3, r4, r5, pc}

023fd9b6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd9b6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd9b8:	2a01      	cmp	r2, #1
 23fd9ba:	bf98      	it	ls
 23fd9bc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd9be:	b530      	push	{r4, r5, lr}
 23fd9c0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd9c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd9c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd9c8:	460d      	mov	r5, r1
 23fd9ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd9ce:	fb01 5312 	mls	r3, r1, r2, r5
 23fd9d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd9d6:	2b09      	cmp	r3, #9
 23fd9d8:	bf94      	ite	ls
 23fd9da:	3330      	addls	r3, #48	; 0x30
 23fd9dc:	3337      	addhi	r3, #55	; 0x37
 23fd9de:	b2db      	uxtb	r3, r3
  } while(n);
 23fd9e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd9e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd9e6:	d9ef      	bls.n	23fd9c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd9e8:	4621      	mov	r1, r4
 23fd9ea:	f7ff ffc3 	bl	23fd974 <_ZN5Print5writeEPKc>
}
 23fd9ee:	b00b      	add	sp, #44	; 0x2c
 23fd9f0:	bd30      	pop	{r4, r5, pc}

023fd9f2 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fd9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd9f6:	b086      	sub	sp, #24
 23fd9f8:	af00      	add	r7, sp, #0
 23fd9fa:	4605      	mov	r5, r0
 23fd9fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fd9fe:	1d38      	adds	r0, r7, #4
 23fda00:	2114      	movs	r1, #20
{
 23fda02:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fda04:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fda06:	f7ff fe1f 	bl	23fd648 <vsnprintf>

    if (n<bufsize)
 23fda0a:	2813      	cmp	r0, #19
 23fda0c:	d80e      	bhi.n	23fda2c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fda0e:	4628      	mov	r0, r5
 23fda10:	1d39      	adds	r1, r7, #4
 23fda12:	f7ff ffaf 	bl	23fd974 <_ZN5Print5writeEPKc>
 23fda16:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fda18:	b11e      	cbz	r6, 23fda22 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fda1a:	4628      	mov	r0, r5
 23fda1c:	f7ff ffbf 	bl	23fd99e <_ZN5Print7printlnEv>
 23fda20:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fda22:	4620      	mov	r0, r4
 23fda24:	3718      	adds	r7, #24
 23fda26:	46bd      	mov	sp, r7
 23fda28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fda2c:	f100 0308 	add.w	r3, r0, #8
 23fda30:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fda34:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fda36:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fda3a:	4622      	mov	r2, r4
 23fda3c:	1c41      	adds	r1, r0, #1
 23fda3e:	683b      	ldr	r3, [r7, #0]
 23fda40:	4668      	mov	r0, sp
 23fda42:	f7ff fe01 	bl	23fd648 <vsnprintf>
  return write(str);
 23fda46:	4669      	mov	r1, sp
 23fda48:	4628      	mov	r0, r5
 23fda4a:	f7ff ff93 	bl	23fd974 <_ZN5Print5writeEPKc>
 23fda4e:	4604      	mov	r4, r0
 23fda50:	46c5      	mov	sp, r8
 23fda52:	e7e1      	b.n	23fda18 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fda54 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fda54:	b510      	push	{r4, lr}
 23fda56:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fda58:	f7ff fa92 	bl	23fcf80 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fda5c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fda5e:	6823      	ldr	r3, [r4, #0]
 23fda60:	4620      	mov	r0, r4
 23fda62:	695b      	ldr	r3, [r3, #20]
 23fda64:	4798      	blx	r3
    if (c >= 0) return c;
 23fda66:	2800      	cmp	r0, #0
 23fda68:	da08      	bge.n	23fda7c <_ZN6Stream9timedReadEv+0x28>
 23fda6a:	f7ff fa89 	bl	23fcf80 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fda6e:	68e3      	ldr	r3, [r4, #12]
 23fda70:	1ac0      	subs	r0, r0, r3
 23fda72:	68a3      	ldr	r3, [r4, #8]
 23fda74:	4298      	cmp	r0, r3
 23fda76:	d3f2      	bcc.n	23fda5e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fda78:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fda7c:	bd10      	pop	{r4, pc}

023fda7e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fda7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fda82:	4607      	mov	r7, r0
 23fda84:	460c      	mov	r4, r1
 23fda86:	460d      	mov	r5, r1
 23fda88:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fda8a:	42b5      	cmp	r5, r6
 23fda8c:	eba5 0804 	sub.w	r8, r5, r4
 23fda90:	d007      	beq.n	23fdaa2 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fda92:	4638      	mov	r0, r7
 23fda94:	f7ff ffde 	bl	23fda54 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fda98:	1e03      	subs	r3, r0, #0
 23fda9a:	db02      	blt.n	23fdaa2 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fda9c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fdaa0:	e7f3      	b.n	23fda8a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fdaa2:	4640      	mov	r0, r8
 23fdaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fdaa8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fdaa8:	4770      	bx	lr

023fdaaa <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fdaaa:	4608      	mov	r0, r1
 23fdaac:	b111      	cbz	r1, 23fdab4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fdaae:	680b      	ldr	r3, [r1, #0]
 23fdab0:	685b      	ldr	r3, [r3, #4]
 23fdab2:	4718      	bx	r3
}
 23fdab4:	4770      	bx	lr

023fdab6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fdab6:	4770      	bx	lr

023fdab8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdab8:	4770      	bx	lr

023fdaba <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fdaba:	4770      	bx	lr

023fdabc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fdabc:	b538      	push	{r3, r4, r5, lr}
 23fdabe:	4604      	mov	r4, r0
 23fdac0:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fdac2:	6800      	ldr	r0, [r0, #0]
 23fdac4:	212e      	movs	r1, #46	; 0x2e
 23fdac6:	f001 ff0c 	bl	23ff8e2 <strchrnul>
    size = s - category;
 23fdaca:	6823      	ldr	r3, [r4, #0]
 23fdacc:	1ac3      	subs	r3, r0, r3
 23fdace:	602b      	str	r3, [r5, #0]
    if (size) {
 23fdad0:	b123      	cbz	r3, 23fdadc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fdad2:	7803      	ldrb	r3, [r0, #0]
 23fdad4:	b103      	cbz	r3, 23fdad8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fdad6:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fdad8:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdada:	6020      	str	r0, [r4, #0]
}
 23fdadc:	4618      	mov	r0, r3
 23fdade:	bd38      	pop	{r3, r4, r5, pc}

023fdae0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fdae0:	b510      	push	{r4, lr}
 23fdae2:	4604      	mov	r4, r0
 23fdae4:	2104      	movs	r1, #4
 23fdae6:	f7fe fed8 	bl	23fc89a <_ZdlPvj>
 23fdaea:	4620      	mov	r0, r4
 23fdaec:	bd10      	pop	{r4, pc}

023fdaee <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdaee:	b510      	push	{r4, lr}
 23fdaf0:	4604      	mov	r4, r0
 23fdaf2:	2104      	movs	r1, #4
 23fdaf4:	f7fe fed1 	bl	23fc89a <_ZdlPvj>
 23fdaf8:	4620      	mov	r0, r4
 23fdafa:	bd10      	pop	{r4, pc}

023fdafc <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fdafc:	f7ff ba6a 	b.w	23fcfd4 <os_mutex_recursive_lock>

023fdb00 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fdb00:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fdb02:	f7fe fe97 	bl	23fc834 <strcmp>
}
 23fdb06:	fab0 f080 	clz	r0, r0
 23fdb0a:	0940      	lsrs	r0, r0, #5
 23fdb0c:	bd08      	pop	{r3, pc}

023fdb0e <__tcf_1>:
 23fdb0e:	4770      	bx	lr

023fdb10 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fdb10:	b510      	push	{r4, lr}
 23fdb12:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fdb14:	f001 f900 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fdb18:	4284      	cmp	r4, r0
 23fdb1a:	d105      	bne.n	23fdb28 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fdb1c:	f001 f8fc 	bl	23fed18 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fdb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fdb24:	f001 b8ec 	b.w	23fed00 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fdb28:	f001 fd8e 	bl	23ff648 <_Z22__fetch_global_Serial1v>
 23fdb2c:	4284      	cmp	r4, r0
 23fdb2e:	d105      	bne.n	23fdb3c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fdb30:	f001 fd8a 	bl	23ff648 <_Z22__fetch_global_Serial1v>
}
 23fdb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fdb38:	f001 b96b 	b.w	23fee12 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fdb3c:	b12c      	cbz	r4, 23fdb4a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fdb3e:	6823      	ldr	r3, [r4, #0]
 23fdb40:	4620      	mov	r0, r4
}
 23fdb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fdb46:	685b      	ldr	r3, [r3, #4]
 23fdb48:	4718      	bx	r3
 23fdb4a:	bd10      	pop	{r4, pc}

023fdb4c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fdb4c:	b513      	push	{r0, r1, r4, lr}
 23fdb4e:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fdb50:	4608      	mov	r0, r1
 23fdb52:	9101      	str	r1, [sp, #4]
 23fdb54:	f7fe fe78 	bl	23fc848 <strlen>
 23fdb58:	4602      	mov	r2, r0
 23fdb5a:	4620      	mov	r0, r4
 23fdb5c:	9901      	ldr	r1, [sp, #4]
}
 23fdb5e:	b002      	add	sp, #8
 23fdb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fdb64:	f001 bcc8 	b.w	23ff4f8 <_ZN5spark10JSONWriter5valueEPKcj>

023fdb68 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fdb68:	b513      	push	{r0, r1, r4, lr}
 23fdb6a:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fdb6c:	4608      	mov	r0, r1
 23fdb6e:	9101      	str	r1, [sp, #4]
 23fdb70:	f7fe fe6a 	bl	23fc848 <strlen>
 23fdb74:	4602      	mov	r2, r0
 23fdb76:	4620      	mov	r0, r4
 23fdb78:	6823      	ldr	r3, [r4, #0]
 23fdb7a:	9901      	ldr	r1, [sp, #4]
 23fdb7c:	68db      	ldr	r3, [r3, #12]
}
 23fdb7e:	b002      	add	sp, #8
 23fdb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fdb84:	4718      	bx	r3

023fdb86 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fdb86:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fdb88:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fdb8a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fdb8e:	2201      	movs	r2, #1
 23fdb90:	68db      	ldr	r3, [r3, #12]
 23fdb92:	f10d 0107 	add.w	r1, sp, #7
 23fdb96:	4798      	blx	r3
}
 23fdb98:	b003      	add	sp, #12
 23fdb9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fdba0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fdba4:	f04f 0a14 	mov.w	sl, #20
 23fdba8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fdbac:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fdbae:	4645      	mov	r5, r8
 23fdbb0:	fb0a f404 	mul.w	r4, sl, r4
 23fdbb4:	9300      	str	r3, [sp, #0]
 23fdbb6:	4b17      	ldr	r3, [pc, #92]	; (23fdc14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdbb8:	10a4      	asrs	r4, r4, #2
 23fdbba:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fdbbc:	2c00      	cmp	r4, #0
 23fdbbe:	dd21      	ble.n	23fdc04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fdbc0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fdbc2:	fb0a f006 	mul.w	r0, sl, r6
 23fdbc6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fdbca:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fdbce:	463a      	mov	r2, r7
 23fdbd0:	455f      	cmp	r7, fp
 23fdbd2:	bf28      	it	cs
 23fdbd4:	465a      	movcs	r2, fp
 23fdbd6:	5828      	ldr	r0, [r5, r0]
 23fdbd8:	9101      	str	r1, [sp, #4]
 23fdbda:	f001 fe94 	bl	23ff906 <strncmp>
                if (cmp == 0) {
 23fdbde:	2800      	cmp	r0, #0
 23fdbe0:	f04f 0301 	mov.w	r3, #1
 23fdbe4:	9901      	ldr	r1, [sp, #4]
 23fdbe6:	d10b      	bne.n	23fdc00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fdbe8:	455f      	cmp	r7, fp
 23fdbea:	d103      	bne.n	23fdbf4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fdbec:	9a00      	ldr	r2, [sp, #0]
 23fdbee:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdbf0:	4634      	mov	r4, r6
 23fdbf2:	e7e3      	b.n	23fdbbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fdbf4:	d9fc      	bls.n	23fdbf0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fdbf6:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fdbf8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fdbfc:	3e01      	subs	r6, #1
 23fdbfe:	e7f7      	b.n	23fdbf0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fdc00:	dbf9      	blt.n	23fdbf6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fdc02:	e7f5      	b.n	23fdbf0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fdc04:	eba5 0508 	sub.w	r5, r5, r8
}
 23fdc08:	4802      	ldr	r0, [pc, #8]	; (23fdc14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdc0a:	10ad      	asrs	r5, r5, #2
 23fdc0c:	4368      	muls	r0, r5
 23fdc0e:	b003      	add	sp, #12
 23fdc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fdc14:	cccccccd 	.word	0xcccccccd

023fdc18 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdc18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fdc1a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fdc1c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdc1e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fdc20:	b303      	cbz	r3, 23fdc64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fdc22:	b1f9      	cbz	r1, 23fdc64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fdc24:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fdc26:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fdc2a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fdc2c:	a903      	add	r1, sp, #12
 23fdc2e:	a801      	add	r0, sp, #4
 23fdc30:	f7ff ff44 	bl	23fdabc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdc34:	4601      	mov	r1, r0
 23fdc36:	b1a8      	cbz	r0, 23fdc64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdc38:	f10d 030b 	add.w	r3, sp, #11
 23fdc3c:	4620      	mov	r0, r4
 23fdc3e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fdc40:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdc44:	f7ff ffac 	bl	23fdba0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fdc48:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fdc4c:	b153      	cbz	r3, 23fdc64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fdc4e:	6823      	ldr	r3, [r4, #0]
 23fdc50:	2414      	movs	r4, #20
 23fdc52:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fdc56:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fdc5a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fdc5c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fdc5e:	bfa8      	it	ge
 23fdc60:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fdc62:	e7e3      	b.n	23fdc2c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fdc64:	4628      	mov	r0, r5
 23fdc66:	b004      	add	sp, #16
 23fdc68:	bd70      	pop	{r4, r5, r6, pc}

023fdc6a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fdc6a:	b40e      	push	{r1, r2, r3}
 23fdc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdc6e:	b08c      	sub	sp, #48	; 0x30
 23fdc70:	af00      	add	r7, sp, #0
 23fdc72:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fdc76:	f855 2b04 	ldr.w	r2, [r5], #4
 23fdc7a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdc7c:	462b      	mov	r3, r5
 23fdc7e:	2120      	movs	r1, #32
 23fdc80:	f107 0010 	add.w	r0, r7, #16
 23fdc84:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fdc86:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdc88:	f7ff fcde 	bl	23fd648 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fdc8c:	281f      	cmp	r0, #31
 23fdc8e:	687a      	ldr	r2, [r7, #4]
 23fdc90:	d91a      	bls.n	23fdcc8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fdc92:	f100 0308 	add.w	r3, r0, #8
 23fdc96:	f023 0307 	bic.w	r3, r3, #7
        }
 23fdc9a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fdc9c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdca0:	1c41      	adds	r1, r0, #1
 23fdca2:	462b      	mov	r3, r5
 23fdca4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fdca6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdca8:	f7ff fcce 	bl	23fd648 <vsnprintf>
        if (n > 0) {
 23fdcac:	1e02      	subs	r2, r0, #0
 23fdcae:	dd04      	ble.n	23fdcba <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fdcb0:	6823      	ldr	r3, [r4, #0]
 23fdcb2:	4669      	mov	r1, sp
 23fdcb4:	4620      	mov	r0, r4
 23fdcb6:	68db      	ldr	r3, [r3, #12]
 23fdcb8:	4798      	blx	r3
 23fdcba:	46b5      	mov	sp, r6
}
 23fdcbc:	3730      	adds	r7, #48	; 0x30
 23fdcbe:	46bd      	mov	sp, r7
 23fdcc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdcc4:	b003      	add	sp, #12
 23fdcc6:	4770      	bx	lr
    } else if (n > 0) {
 23fdcc8:	2800      	cmp	r0, #0
 23fdcca:	d0f7      	beq.n	23fdcbc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fdccc:	6823      	ldr	r3, [r4, #0]
 23fdcce:	4602      	mov	r2, r0
 23fdcd0:	68db      	ldr	r3, [r3, #12]
 23fdcd2:	4620      	mov	r0, r4
 23fdcd4:	f107 0110 	add.w	r1, r7, #16
 23fdcd8:	4798      	blx	r3
}
 23fdcda:	e7ef      	b.n	23fdcbc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fdcdc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fdcdc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fdcde:	4c08      	ldr	r4, [pc, #32]	; (23fdd00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fdce0:	e8d4 3f8f 	ldab	r3, [r4]
 23fdce4:	07db      	lsls	r3, r3, #31
 23fdce6:	d409      	bmi.n	23fdcfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdce8:	4620      	mov	r0, r4
 23fdcea:	f7fe fde5 	bl	23fc8b8 <__cxa_guard_acquire>
 23fdcee:	b128      	cbz	r0, 23fdcfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdcf0:	4620      	mov	r0, r4
 23fdcf2:	f7fe fde6 	bl	23fc8c2 <__cxa_guard_release>
 23fdcf6:	4803      	ldr	r0, [pc, #12]	; (23fdd04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fdcf8:	f001 fd7a 	bl	23ff7f0 <atexit>
}
 23fdcfc:	4802      	ldr	r0, [pc, #8]	; (23fdd08 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fdcfe:	bd10      	pop	{r4, pc}
 23fdd00:	1007ae6c 	.word	0x1007ae6c
 23fdd04:	023fdab7 	.word	0x023fdab7
 23fdd08:	1007ad68 	.word	0x1007ad68

023fdd0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fdd0c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fdd0e:	4c08      	ldr	r4, [pc, #32]	; (23fdd30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fdd10:	e8d4 3f8f 	ldab	r3, [r4]
 23fdd14:	07db      	lsls	r3, r3, #31
 23fdd16:	d409      	bmi.n	23fdd2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdd18:	4620      	mov	r0, r4
 23fdd1a:	f7fe fdcd 	bl	23fc8b8 <__cxa_guard_acquire>
 23fdd1e:	b128      	cbz	r0, 23fdd2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdd20:	4620      	mov	r0, r4
 23fdd22:	f7fe fdce 	bl	23fc8c2 <__cxa_guard_release>
 23fdd26:	4803      	ldr	r0, [pc, #12]	; (23fdd34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fdd28:	f001 fd62 	bl	23ff7f0 <atexit>
    return &factory;
}
 23fdd2c:	4802      	ldr	r0, [pc, #8]	; (23fdd38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fdd2e:	bd10      	pop	{r4, pc}
 23fdd30:	1007ae70 	.word	0x1007ae70
 23fdd34:	023fdb0f 	.word	0x023fdb0f
 23fdd38:	1007ad6c 	.word	0x1007ad6c

023fdd3c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fdd3c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fdd3e:	2500      	movs	r5, #0
 23fdd40:	4604      	mov	r4, r0
 23fdd42:	e9c0 5500 	strd	r5, r5, [r0]
 23fdd46:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fdd4a:	6085      	str	r5, [r0, #8]
 23fdd4c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fdd4e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fdd52:	f7ff f923 	bl	23fcf9c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fdd56:	f7ff ffc1 	bl	23fdcdc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fdd5a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdd5c:	f7ff ffd6 	bl	23fdd0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fdd60:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdd62:	6220      	str	r0, [r4, #32]
}
 23fdd64:	4620      	mov	r0, r4
 23fdd66:	bd38      	pop	{r3, r4, r5, pc}

023fdd68 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fdd68:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fdd6a:	4c0a      	ldr	r4, [pc, #40]	; (23fdd94 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fdd6c:	e8d4 3f8f 	ldab	r3, [r4]
 23fdd70:	07db      	lsls	r3, r3, #31
 23fdd72:	d40c      	bmi.n	23fdd8e <_ZN5spark10LogManager8instanceEv+0x26>
 23fdd74:	4620      	mov	r0, r4
 23fdd76:	f7fe fd9f 	bl	23fc8b8 <__cxa_guard_acquire>
 23fdd7a:	b140      	cbz	r0, 23fdd8e <_ZN5spark10LogManager8instanceEv+0x26>
 23fdd7c:	4806      	ldr	r0, [pc, #24]	; (23fdd98 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdd7e:	f7ff ffdd 	bl	23fdd3c <_ZN5spark10LogManagerC1Ev>
 23fdd82:	4620      	mov	r0, r4
 23fdd84:	f7fe fd9d 	bl	23fc8c2 <__cxa_guard_release>
 23fdd88:	4804      	ldr	r0, [pc, #16]	; (23fdd9c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fdd8a:	f001 fd31 	bl	23ff7f0 <atexit>
    return &mgr;
}
 23fdd8e:	4802      	ldr	r0, [pc, #8]	; (23fdd98 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdd90:	bd10      	pop	{r4, pc}
 23fdd92:	bf00      	nop
 23fdd94:	1007ae68 	.word	0x1007ae68
 23fdd98:	1007ae78 	.word	0x1007ae78
 23fdd9c:	023fe2dd 	.word	0x023fe2dd

023fdda0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fdda0:	2300      	movs	r3, #0
 23fdda2:	4a02      	ldr	r2, [pc, #8]	; (23fddac <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fdda4:	4902      	ldr	r1, [pc, #8]	; (23fddb0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fdda6:	4803      	ldr	r0, [pc, #12]	; (23fddb4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fdda8:	f7ff bb0c 	b.w	23fd3c4 <log_set_callbacks>
 23fddac:	023fe0c5 	.word	0x023fe0c5
 23fddb0:	023fe051 	.word	0x023fe051
 23fddb4:	023fdfd1 	.word	0x023fdfd1

023fddb8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fddb8:	2300      	movs	r3, #0
 23fddba:	461a      	mov	r2, r3
 23fddbc:	4619      	mov	r1, r3
 23fddbe:	4618      	mov	r0, r3
 23fddc0:	f7ff bb00 	b.w	23fd3c4 <log_set_callbacks>

023fddc4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fddc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fddc6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fddc8:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fddca:	4668      	mov	r0, sp
 23fddcc:	f7ff fcb2 	bl	23fd734 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fddd0:	466a      	mov	r2, sp
 23fddd2:	4629      	mov	r1, r5
 23fddd4:	4620      	mov	r0, r4
 23fddd6:	f001 faaf 	bl	23ff338 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fddda:	a801      	add	r0, sp, #4
 23fdddc:	f7ff fcb3 	bl	23fd746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdde0:	4620      	mov	r0, r4
 23fdde2:	b003      	add	sp, #12
 23fdde4:	bd30      	pop	{r4, r5, pc}

023fdde6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fdde6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdde8:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fddea:	68cd      	ldr	r5, [r1, #12]
 23fddec:	4668      	mov	r0, sp
 23fddee:	f7ff fca1 	bl	23fd734 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fddf2:	466a      	mov	r2, sp
 23fddf4:	4629      	mov	r1, r5
 23fddf6:	4620      	mov	r0, r4
 23fddf8:	f001 fa7a 	bl	23ff2f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fddfc:	a801      	add	r0, sp, #4
 23fddfe:	f7ff fca2 	bl	23fd746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fde02:	4620      	mov	r0, r4
 23fde04:	b003      	add	sp, #12
 23fde06:	bd30      	pop	{r4, r5, pc}

023fde08 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fde08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fde0a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fde0c:	690d      	ldr	r5, [r1, #16]
 23fde0e:	4668      	mov	r0, sp
 23fde10:	f7ff fc90 	bl	23fd734 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fde14:	466a      	mov	r2, sp
 23fde16:	4629      	mov	r1, r5
 23fde18:	4620      	mov	r0, r4
 23fde1a:	f001 fa12 	bl	23ff242 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fde1e:	a801      	add	r0, sp, #4
 23fde20:	f7ff fc91 	bl	23fd746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fde24:	4620      	mov	r0, r4
 23fde26:	b003      	add	sp, #12
 23fde28:	bd30      	pop	{r4, r5, pc}
	...

023fde2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fde2c:	b570      	push	{r4, r5, r6, lr}
 23fde2e:	b08a      	sub	sp, #40	; 0x28
 23fde30:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fde32:	4601      	mov	r1, r0
 23fde34:	a804      	add	r0, sp, #16
 23fde36:	f7ff ffc5 	bl	23fddc4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fde3a:	4e14      	ldr	r6, [pc, #80]	; (23fde8c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fde3c:	a804      	add	r0, sp, #16
 23fde3e:	f001 fa93 	bl	23ff368 <_ZN5spark18JSONObjectIterator4nextEv>
 23fde42:	b1e8      	cbz	r0, 23fde80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fde44:	4668      	mov	r0, sp
 23fde46:	a904      	add	r1, sp, #16
 23fde48:	f7ff ffcd 	bl	23fdde6 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fde4c:	4631      	mov	r1, r6
 23fde4e:	9802      	ldr	r0, [sp, #8]
 23fde50:	f7ff fe56 	bl	23fdb00 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fde54:	4604      	mov	r4, r0
 23fde56:	b110      	cbz	r0, 23fde5e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fde58:	1e2c      	subs	r4, r5, #0
 23fde5a:	bf18      	it	ne
 23fde5c:	2401      	movne	r4, #1
 23fde5e:	a801      	add	r0, sp, #4
 23fde60:	f7ff fc71 	bl	23fd746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fde64:	2c00      	cmp	r4, #0
 23fde66:	d0e9      	beq.n	23fde3c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fde68:	4668      	mov	r0, sp
 23fde6a:	a904      	add	r1, sp, #16
 23fde6c:	f7ff ffcc 	bl	23fde08 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fde70:	4668      	mov	r0, sp
 23fde72:	f001 fa1c 	bl	23ff2ae <_ZNK5spark9JSONValue5toIntEv>
 23fde76:	6028      	str	r0, [r5, #0]
 23fde78:	a801      	add	r0, sp, #4
 23fde7a:	f7ff fc64 	bl	23fd746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fde7e:	e7dd      	b.n	23fde3c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fde80:	a805      	add	r0, sp, #20
 23fde82:	f7ff fc60 	bl	23fd746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fde86:	b00a      	add	sp, #40	; 0x28
 23fde88:	bd70      	pop	{r4, r5, r6, pc}
 23fde8a:	bf00      	nop
 23fde8c:	023ffc00 	.word	0x023ffc00

023fde90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fde90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fde92:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fde94:	4913      	ldr	r1, [pc, #76]	; (23fdee4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fde96:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fde98:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fde9a:	f7fe fccb 	bl	23fc834 <strcmp>
 23fde9e:	b950      	cbnz	r0, 23fdeb6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fdea0:	f000 ff3a 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fdea4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fdea8:	f000 ff26 	bl	23fecf8 <_ZN9USBSerial5beginEl>
}
 23fdeac:	b003      	add	sp, #12
 23fdeae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fdeb2:	f000 bf31 	b.w	23fed18 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fdeb6:	4620      	mov	r0, r4
 23fdeb8:	490b      	ldr	r1, [pc, #44]	; (23fdee8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fdeba:	f7fe fcbb 	bl	23fc834 <strcmp>
 23fdebe:	b978      	cbnz	r0, 23fdee0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fdec0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fdec4:	a901      	add	r1, sp, #4
 23fdec6:	4628      	mov	r0, r5
        int baud = 9600;
 23fdec8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fdeca:	f7ff ffaf 	bl	23fde2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fdece:	f001 fbbb 	bl	23ff648 <_Z22__fetch_global_Serial1v>
 23fded2:	9901      	ldr	r1, [sp, #4]
 23fded4:	f000 ff9a 	bl	23fee0c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fded8:	f001 fbb6 	bl	23ff648 <_Z22__fetch_global_Serial1v>
}
 23fdedc:	b003      	add	sp, #12
 23fdede:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fdee0:	2000      	movs	r0, #0
 23fdee2:	e7fb      	b.n	23fdedc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fdee4:	023ffc05 	.word	0x023ffc05
 23fdee8:	023ffc0c 	.word	0x023ffc0c

023fdeec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdeec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fdeee:	2614      	movs	r6, #20
 23fdef0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdef4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fdef6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdefa:	42ae      	cmp	r6, r5
 23fdefc:	d005      	beq.n	23fdf0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fdefe:	f105 0008 	add.w	r0, r5, #8
 23fdf02:	f7ff fff3 	bl	23fdeec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdf06:	3514      	adds	r5, #20
 23fdf08:	e7f7      	b.n	23fdefa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fdf0a:	6820      	ldr	r0, [r4, #0]
 23fdf0c:	f7ff fb80 	bl	23fd610 <free>
}
 23fdf10:	4620      	mov	r0, r4
 23fdf12:	bd70      	pop	{r4, r5, r6, pc}

023fdf14 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fdf14:	b510      	push	{r4, lr}
 23fdf16:	4604      	mov	r4, r0
 23fdf18:	300c      	adds	r0, #12
 23fdf1a:	f7ff ffe7 	bl	23fdeec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fdf1e:	4620      	mov	r0, r4
 23fdf20:	f7ff fce6 	bl	23fd8f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdf24:	4620      	mov	r0, r4
 23fdf26:	bd10      	pop	{r4, pc}

023fdf28 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fdf28:	b510      	push	{r4, lr}
 23fdf2a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fdf2c:	4b03      	ldr	r3, [pc, #12]	; (23fdf3c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fdf2e:	f840 3b04 	str.w	r3, [r0], #4
 23fdf32:	f7ff ffef 	bl	23fdf14 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fdf36:	4620      	mov	r0, r4
 23fdf38:	bd10      	pop	{r4, pc}
 23fdf3a:	bf00      	nop
 23fdf3c:	023ffb7c 	.word	0x023ffb7c

023fdf40 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fdf40:	b510      	push	{r4, lr}
 23fdf42:	4604      	mov	r4, r0
 23fdf44:	f7ff fff0 	bl	23fdf28 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdf48:	4620      	mov	r0, r4
 23fdf4a:	2124      	movs	r1, #36	; 0x24
 23fdf4c:	f7fe fca5 	bl	23fc89a <_ZdlPvj>
 23fdf50:	4620      	mov	r0, r4
 23fdf52:	bd10      	pop	{r4, pc}

023fdf54 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fdf54:	b510      	push	{r4, lr}
 23fdf56:	4604      	mov	r4, r0
 23fdf58:	4b02      	ldr	r3, [pc, #8]	; (23fdf64 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fdf5a:	6003      	str	r3, [r0, #0]
 23fdf5c:	f7ff ffe4 	bl	23fdf28 <_ZN5spark16StreamLogHandlerD1Ev>
 23fdf60:	4620      	mov	r0, r4
 23fdf62:	bd10      	pop	{r4, pc}
 23fdf64:	023ffc98 	.word	0x023ffc98

023fdf68 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fdf68:	b510      	push	{r4, lr}
 23fdf6a:	4604      	mov	r4, r0
 23fdf6c:	f7ff fff2 	bl	23fdf54 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fdf70:	4620      	mov	r0, r4
 23fdf72:	2124      	movs	r1, #36	; 0x24
 23fdf74:	f7fe fc91 	bl	23fc89a <_ZdlPvj>
 23fdf78:	4620      	mov	r0, r4
 23fdf7a:	bd10      	pop	{r4, pc}

023fdf7c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fdf7c:	680a      	ldr	r2, [r1, #0]
 23fdf7e:	b510      	push	{r4, lr}
 23fdf80:	6002      	str	r2, [r0, #0]
 23fdf82:	684a      	ldr	r2, [r1, #4]
 23fdf84:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fdf86:	2200      	movs	r2, #0
 23fdf88:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fdf8c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdf8e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf90:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdf92:	6084      	str	r4, [r0, #8]
 23fdf94:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf96:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fdf98:	60c4      	str	r4, [r0, #12]
 23fdf9a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf9c:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdf9e:	6104      	str	r4, [r0, #16]
 23fdfa0:	bd10      	pop	{r4, pc}

023fdfa2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fdfa2:	2200      	movs	r2, #0
 23fdfa4:	e9c0 2200 	strd	r2, r2, [r0]
 23fdfa8:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fdfaa:	b510      	push	{r4, lr}
 23fdfac:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdfae:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdfb0:	6004      	str	r4, [r0, #0]
 23fdfb2:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdfb4:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdfb6:	6044      	str	r4, [r0, #4]
 23fdfb8:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdfba:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdfbc:	6084      	str	r4, [r0, #8]
}
 23fdfbe:	bd10      	pop	{r4, pc}

023fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fdfc0:	b510      	push	{r4, lr}
 23fdfc2:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fdfc4:	6803      	ldr	r3, [r0, #0]
 23fdfc6:	6818      	ldr	r0, [r3, #0]
 23fdfc8:	f7ff f812 	bl	23fcff0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fdfcc:	4620      	mov	r0, r4
 23fdfce:	bd10      	pop	{r4, pc}

023fdfd0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fdfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdfd4:	b087      	sub	sp, #28
 23fdfd6:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fdfd8:	4b1c      	ldr	r3, [pc, #112]	; (23fe04c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fdfda:	4680      	mov	r8, r0
 23fdfdc:	685b      	ldr	r3, [r3, #4]
 23fdfde:	4689      	mov	r9, r1
 23fdfe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdfe4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fdfe6:	b96b      	cbnz	r3, 23fe004 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fdfe8:	f7ff febe 	bl	23fdd68 <_ZN5spark10LogManager8instanceEv>
 23fdfec:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdfee:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fdff2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdff4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fdff6:	f7ff fd81 	bl	23fdafc <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fdffa:	7b23      	ldrb	r3, [r4, #12]
 23fdffc:	b12b      	cbz	r3, 23fe00a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fdffe:	a805      	add	r0, sp, #20
 23fe000:	f7ff ffde 	bl	23fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fe004:	b007      	add	sp, #28
 23fe006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fe00a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fe00c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fe010:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fe012:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe016:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe01a:	45aa      	cmp	sl, r5
 23fe01c:	d012      	beq.n	23fe044 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fe01e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fe022:	4631      	mov	r1, r6
 23fe024:	1d38      	adds	r0, r7, #4
 23fe026:	f7ff fdf7 	bl	23fdc18 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe02a:	4581      	cmp	r9, r0
 23fe02c:	d3f5      	bcc.n	23fe01a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fe02e:	9a03      	ldr	r2, [sp, #12]
 23fe030:	683b      	ldr	r3, [r7, #0]
 23fe032:	9200      	str	r2, [sp, #0]
 23fe034:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fe038:	464a      	mov	r2, r9
 23fe03a:	4633      	mov	r3, r6
 23fe03c:	4641      	mov	r1, r8
 23fe03e:	4638      	mov	r0, r7
 23fe040:	47d8      	blx	fp
 23fe042:	e7ea      	b.n	23fe01a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fe044:	2300      	movs	r3, #0
 23fe046:	7323      	strb	r3, [r4, #12]
 23fe048:	e7d9      	b.n	23fdffe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fe04a:	bf00      	nop
 23fe04c:	e000ed00 	.word	0xe000ed00

023fe050 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fe050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe054:	469b      	mov	fp, r3
 23fe056:	4b1a      	ldr	r3, [pc, #104]	; (23fe0c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fe058:	4680      	mov	r8, r0
 23fe05a:	685b      	ldr	r3, [r3, #4]
 23fe05c:	4689      	mov	r9, r1
 23fe05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe062:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fe064:	b96b      	cbnz	r3, 23fe082 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fe066:	f7ff fe7f 	bl	23fdd68 <_ZN5spark10LogManager8instanceEv>
 23fe06a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe06c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe070:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe072:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe074:	f7ff fd42 	bl	23fdafc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fe078:	7b23      	ldrb	r3, [r4, #12]
 23fe07a:	b12b      	cbz	r3, 23fe088 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fe07c:	a801      	add	r0, sp, #4
 23fe07e:	f7ff ff9f 	bl	23fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe082:	b003      	add	sp, #12
 23fe084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fe088:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fe08a:	b2f6      	uxtb	r6, r6
 23fe08c:	7323      	strb	r3, [r4, #12]
 23fe08e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe092:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe096:	4555      	cmp	r5, sl
 23fe098:	d00e      	beq.n	23fe0b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fe09a:	f855 7b04 	ldr.w	r7, [r5], #4
 23fe09e:	4659      	mov	r1, fp
 23fe0a0:	1d38      	adds	r0, r7, #4
 23fe0a2:	f7ff fdb9 	bl	23fdc18 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe0a6:	4286      	cmp	r6, r0
 23fe0a8:	d3f5      	bcc.n	23fe096 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fe0aa:	683b      	ldr	r3, [r7, #0]
 23fe0ac:	464a      	mov	r2, r9
 23fe0ae:	4641      	mov	r1, r8
 23fe0b0:	4638      	mov	r0, r7
 23fe0b2:	68db      	ldr	r3, [r3, #12]
 23fe0b4:	4798      	blx	r3
 23fe0b6:	e7ee      	b.n	23fe096 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fe0b8:	2300      	movs	r3, #0
 23fe0ba:	7323      	strb	r3, [r4, #12]
 23fe0bc:	e7de      	b.n	23fe07c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fe0be:	bf00      	nop
 23fe0c0:	e000ed00 	.word	0xe000ed00

023fe0c4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fe0c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fe0c8:	4b16      	ldr	r3, [pc, #88]	; (23fe124 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fe0ca:	4605      	mov	r5, r0
 23fe0cc:	685b      	ldr	r3, [r3, #4]
 23fe0ce:	460f      	mov	r7, r1
 23fe0d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fe0d4:	bb1b      	cbnz	r3, 23fe11e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fe0d6:	f7ff fe47 	bl	23fdd68 <_ZN5spark10LogManager8instanceEv>
 23fe0da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe0dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe0e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe0e2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe0e4:	f7ff fd0a 	bl	23fdafc <_ZN14RecursiveMutex4lockEv.isra.0>
 23fe0e8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fe0ec:	2446      	movs	r4, #70	; 0x46
 23fe0ee:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe0f2:	45b0      	cmp	r8, r6
 23fe0f4:	d109      	bne.n	23fe10a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fe0f6:	a801      	add	r0, sp, #4
 23fe0f8:	f7ff ff62 	bl	23fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fe0fc:	42a5      	cmp	r5, r4
 23fe0fe:	bfb4      	ite	lt
 23fe100:	2000      	movlt	r0, #0
 23fe102:	2001      	movge	r0, #1
}
 23fe104:	b002      	add	sp, #8
 23fe106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fe10a:	f856 0b04 	ldr.w	r0, [r6], #4
 23fe10e:	4639      	mov	r1, r7
 23fe110:	3004      	adds	r0, #4
 23fe112:	f7ff fd81 	bl	23fdc18 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fe116:	4284      	cmp	r4, r0
 23fe118:	bfa8      	it	ge
 23fe11a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fe11c:	e7e9      	b.n	23fe0f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fe11e:	2000      	movs	r0, #0
 23fe120:	e7f0      	b.n	23fe104 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fe122:	bf00      	nop
 23fe124:	e000ed00 	.word	0xe000ed00

023fe128 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe12a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fe12e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe130:	4604      	mov	r4, r0
 23fe132:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe134:	db0d      	blt.n	23fe152 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fe136:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fe138:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe13a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe13c:	dd04      	ble.n	23fe148 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fe13e:	00b9      	lsls	r1, r7, #2
 23fe140:	f7ff fa74 	bl	23fd62c <realloc>
            if (!d) {
 23fe144:	b918      	cbnz	r0, 23fe14e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fe146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fe148:	f7ff fa62 	bl	23fd610 <free>
        T* d = nullptr;
 23fe14c:	2000      	movs	r0, #0
        data_ = d;
 23fe14e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe150:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe152:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe154:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe156:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fe15a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe15c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fe160:	1d08      	adds	r0, r1, #4
 23fe162:	f001 fb60 	bl	23ff826 <memmove>
    new(p) T(std::move(value));
 23fe166:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fe16a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe16c:	2001      	movs	r0, #1
    ++size_;
 23fe16e:	3301      	adds	r3, #1
 23fe170:	6063      	str	r3, [r4, #4]
    return true;
 23fe172:	e7e8      	b.n	23fe146 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fe174 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe176:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe178:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe17c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe17e:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe180:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fe182:	f7ff fcbb 	bl	23fdafc <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fe186:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fe18a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fe18e:	4293      	cmp	r3, r2
 23fe190:	4619      	mov	r1, r3
 23fe192:	d00a      	beq.n	23fe1aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fe194:	6809      	ldr	r1, [r1, #0]
 23fe196:	3304      	adds	r3, #4
 23fe198:	42a9      	cmp	r1, r5
 23fe19a:	d1f8      	bne.n	23fe18e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fe19c:	a801      	add	r0, sp, #4
 23fe19e:	f7ff ff0f 	bl	23fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe1a2:	2500      	movs	r5, #0
}
 23fe1a4:	4628      	mov	r0, r5
 23fe1a6:	b003      	add	sp, #12
 23fe1a8:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fe1aa:	4629      	mov	r1, r5
 23fe1ac:	4620      	mov	r0, r4
 23fe1ae:	f7ff ffbb 	bl	23fe128 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fe1b2:	4605      	mov	r5, r0
 23fe1b4:	2800      	cmp	r0, #0
 23fe1b6:	d0f1      	beq.n	23fe19c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fe1b8:	6863      	ldr	r3, [r4, #4]
 23fe1ba:	2b01      	cmp	r3, #1
 23fe1bc:	d101      	bne.n	23fe1c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fe1be:	f7ff fdef 	bl	23fdda0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe1c2:	a801      	add	r0, sp, #4
 23fe1c4:	f7ff fefc 	bl	23fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe1c8:	e7ec      	b.n	23fe1a4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fe1ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe1ca:	460b      	mov	r3, r1
 23fe1cc:	b570      	push	{r4, r5, r6, lr}
 23fe1ce:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fe1d0:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fe1d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fe1d8:	4282      	cmp	r2, r0
 23fe1da:	d00f      	beq.n	23fe1fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fe1dc:	4601      	mov	r1, r0
            if (*p == value) {
 23fe1de:	681d      	ldr	r5, [r3, #0]
 23fe1e0:	f851 6b04 	ldr.w	r6, [r1], #4
 23fe1e4:	42ae      	cmp	r6, r5
 23fe1e6:	d107      	bne.n	23fe1f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe1e8:	1a52      	subs	r2, r2, r1
 23fe1ea:	f001 fb1c 	bl	23ff826 <memmove>
    return true;
 23fe1ee:	2001      	movs	r0, #1
    --size_;
 23fe1f0:	6863      	ldr	r3, [r4, #4]
 23fe1f2:	3b01      	subs	r3, #1
 23fe1f4:	6063      	str	r3, [r4, #4]
}
 23fe1f6:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fe1f8:	4608      	mov	r0, r1
 23fe1fa:	e7ed      	b.n	23fe1d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fe1fc:	2000      	movs	r0, #0
 23fe1fe:	e7fa      	b.n	23fe1f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fe200 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe202:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe204:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe208:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe20a:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe20c:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fe20e:	f7ff fc75 	bl	23fdafc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fe212:	4620      	mov	r0, r4
 23fe214:	a901      	add	r1, sp, #4
 23fe216:	f7ff ffd8 	bl	23fe1ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fe21a:	b118      	cbz	r0, 23fe224 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fe21c:	6863      	ldr	r3, [r4, #4]
 23fe21e:	b90b      	cbnz	r3, 23fe224 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fe220:	f7ff fdca 	bl	23fddb8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe224:	a803      	add	r0, sp, #12
 23fe226:	f7ff fecb 	bl	23fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe22a:	b004      	add	sp, #16
 23fe22c:	bd10      	pop	{r4, pc}

023fe22e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fe22e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fe230:	b570      	push	{r4, r5, r6, lr}
 23fe232:	4604      	mov	r4, r0
 23fe234:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fe238:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe23c:	42ae      	cmp	r6, r5
 23fe23e:	d015      	beq.n	23fe26c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fe240:	4620      	mov	r0, r4
 23fe242:	f105 0110 	add.w	r1, r5, #16
 23fe246:	f7ff ffc0 	bl	23fe1ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fe24a:	6863      	ldr	r3, [r4, #4]
 23fe24c:	b90b      	cbnz	r3, 23fe252 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fe24e:	f7ff fdb3 	bl	23fddb8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fe252:	69e0      	ldr	r0, [r4, #28]
 23fe254:	6929      	ldr	r1, [r5, #16]
 23fe256:	6803      	ldr	r3, [r0, #0]
 23fe258:	68db      	ldr	r3, [r3, #12]
 23fe25a:	4798      	blx	r3
        if (h.stream) {
 23fe25c:	6969      	ldr	r1, [r5, #20]
 23fe25e:	b119      	cbz	r1, 23fe268 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fe260:	6a20      	ldr	r0, [r4, #32]
 23fe262:	6803      	ldr	r3, [r0, #0]
 23fe264:	68db      	ldr	r3, [r3, #12]
 23fe266:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe268:	3518      	adds	r5, #24
 23fe26a:	e7e7      	b.n	23fe23c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fe26c:	2618      	movs	r6, #24
 23fe26e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe272:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe276:	42ae      	cmp	r6, r5
 23fe278:	d004      	beq.n	23fe284 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fe27a:	4628      	mov	r0, r5
 23fe27c:	f7ff fa96 	bl	23fd7ac <_ZN6StringD1Ev>
 23fe280:	3518      	adds	r5, #24
 23fe282:	e7f8      	b.n	23fe276 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fe284:	2300      	movs	r3, #0
 23fe286:	6163      	str	r3, [r4, #20]
}
 23fe288:	bd70      	pop	{r4, r5, r6, pc}

023fe28a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fe28a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe28c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fe28e:	f7ff fd93 	bl	23fddb8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe292:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fe296:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe298:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe29a:	f7ff fc2f 	bl	23fdafc <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fe29e:	4620      	mov	r0, r4
 23fe2a0:	f7ff ffc5 	bl	23fe22e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fe2a4:	a801      	add	r0, sp, #4
 23fe2a6:	f7ff fe8b 	bl	23fdfc0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fe2aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe2ac:	b108      	cbz	r0, 23fe2b2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fe2ae:	f7fe fe83 	bl	23fcfb8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fe2b2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe2b6:	2618      	movs	r6, #24
 23fe2b8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe2bc:	42ae      	cmp	r6, r5
 23fe2be:	d004      	beq.n	23fe2ca <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fe2c0:	4628      	mov	r0, r5
 23fe2c2:	f7ff fa73 	bl	23fd7ac <_ZN6StringD1Ev>
 23fe2c6:	3518      	adds	r5, #24
 23fe2c8:	e7f8      	b.n	23fe2bc <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fe2ca:	6920      	ldr	r0, [r4, #16]
 23fe2cc:	f7ff f9a0 	bl	23fd610 <free>
 23fe2d0:	6820      	ldr	r0, [r4, #0]
 23fe2d2:	f7ff f99d 	bl	23fd610 <free>
}
 23fe2d6:	4620      	mov	r0, r4
 23fe2d8:	b002      	add	sp, #8
 23fe2da:	bd70      	pop	{r4, r5, r6, pc}

023fe2dc <__tcf_2>:
    static LogManager mgr;
 23fe2dc:	4801      	ldr	r0, [pc, #4]	; (23fe2e4 <__tcf_2+0x8>)
 23fe2de:	f7ff bfd4 	b.w	23fe28a <_ZN5spark10LogManagerD1Ev>
 23fe2e2:	bf00      	nop
 23fe2e4:	1007ae78 	.word	0x1007ae78

023fe2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe2e8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe2ec:	4604      	mov	r4, r0
 23fe2ee:	460d      	mov	r5, r1
 23fe2f0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe2f2:	d915      	bls.n	23fe320 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe2f4:	4290      	cmp	r0, r2
 23fe2f6:	d214      	bcs.n	23fe322 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe2f8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe2fc:	1a75      	subs	r5, r6, r1
 23fe2fe:	f1a1 0714 	sub.w	r7, r1, #20
 23fe302:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe304:	42b7      	cmp	r7, r6
 23fe306:	d01a      	beq.n	23fe33e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe308:	b11c      	cbz	r4, 23fe312 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe30a:	4631      	mov	r1, r6
 23fe30c:	4620      	mov	r0, r4
 23fe30e:	f7ff fe35 	bl	23fdf7c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe312:	f106 0008 	add.w	r0, r6, #8
 23fe316:	f7ff fde9 	bl	23fdeec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe31a:	3e14      	subs	r6, #20
 23fe31c:	3c14      	subs	r4, #20
 23fe31e:	e7f1      	b.n	23fe304 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe320:	d00d      	beq.n	23fe33e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe322:	42b5      	cmp	r5, r6
 23fe324:	d00b      	beq.n	23fe33e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe326:	b11c      	cbz	r4, 23fe330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe328:	4629      	mov	r1, r5
 23fe32a:	4620      	mov	r0, r4
 23fe32c:	f7ff fe26 	bl	23fdf7c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe330:	f105 0008 	add.w	r0, r5, #8
 23fe334:	f7ff fdda 	bl	23fdeec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe338:	3514      	adds	r5, #20
 23fe33a:	3414      	adds	r4, #20
 23fe33c:	e7f1      	b.n	23fe322 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe340:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe344:	4604      	mov	r4, r0
 23fe346:	460d      	mov	r5, r1
 23fe348:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe34a:	d914      	bls.n	23fe376 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe34c:	4290      	cmp	r0, r2
 23fe34e:	d213      	bcs.n	23fe378 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe350:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe354:	1a75      	subs	r5, r6, r1
 23fe356:	f1a1 0710 	sub.w	r7, r1, #16
 23fe35a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe35c:	42b7      	cmp	r7, r6
 23fe35e:	d018      	beq.n	23fe392 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe360:	b11c      	cbz	r4, 23fe36a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe362:	4631      	mov	r1, r6
 23fe364:	4620      	mov	r0, r4
 23fe366:	f7ff fa8a 	bl	23fd87e <_ZN6StringC1EOS_>
                end->~T();
 23fe36a:	4630      	mov	r0, r6
 23fe36c:	f7ff fa1e 	bl	23fd7ac <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe370:	3e10      	subs	r6, #16
 23fe372:	3c10      	subs	r4, #16
 23fe374:	e7f2      	b.n	23fe35c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe376:	d00c      	beq.n	23fe392 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe378:	42b5      	cmp	r5, r6
 23fe37a:	d00a      	beq.n	23fe392 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe37c:	b11c      	cbz	r4, 23fe386 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe37e:	4629      	mov	r1, r5
 23fe380:	4620      	mov	r0, r4
 23fe382:	f7ff fa7c 	bl	23fd87e <_ZN6StringC1EOS_>
                p->~T();
 23fe386:	4628      	mov	r0, r5
 23fe388:	f7ff fa10 	bl	23fd7ac <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe38c:	3510      	adds	r5, #16
 23fe38e:	3410      	adds	r4, #16
 23fe390:	e7f2      	b.n	23fe378 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe394:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe396:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe398:	4605      	mov	r5, r0
        if (n > 0) {
 23fe39a:	dd11      	ble.n	23fe3c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe39c:	0130      	lsls	r0, r6, #4
 23fe39e:	f7ff f929 	bl	23fd5f4 <malloc>
            if (!d) {
 23fe3a2:	4604      	mov	r4, r0
 23fe3a4:	b158      	cbz	r0, 23fe3be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe3a6:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe3aa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe3ae:	f7ff ffc7 	bl	23fe340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe3b2:	6828      	ldr	r0, [r5, #0]
 23fe3b4:	f7ff f92c 	bl	23fd610 <free>
        return true;
 23fe3b8:	2001      	movs	r0, #1
        data_ = d;
 23fe3ba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe3bc:	60ae      	str	r6, [r5, #8]
    }
 23fe3be:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe3c0:	2400      	movs	r4, #0
 23fe3c2:	e7f6      	b.n	23fe3b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe3c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe3c8:	4690      	mov	r8, r2
        capacity_(0) {
 23fe3ca:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe3cc:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe3ce:	b095      	sub	sp, #84	; 0x54
 23fe3d0:	9103      	str	r1, [sp, #12]
    return size_;
 23fe3d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe3d6:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe3d8:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe3da:	e9c0 3300 	strd	r3, r3, [r0]
 23fe3de:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe3e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe3ea:	7602      	strb	r2, [r0, #24]
 23fe3ec:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe3ee:	dc23      	bgt.n	23fe438 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe3f0:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe3f4:	2314      	movs	r3, #20
 23fe3f6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe3fa:	42af      	cmp	r7, r5
 23fe3fc:	d03b      	beq.n	23fe476 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe3fe:	4629      	mov	r1, r5
 23fe400:	a80b      	add	r0, sp, #44	; 0x2c
 23fe402:	f7ff fa3c 	bl	23fd87e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe406:	a90b      	add	r1, sp, #44	; 0x2c
 23fe408:	a80f      	add	r0, sp, #60	; 0x3c
 23fe40a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe40c:	f7ff fa37 	bl	23fd87e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe410:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe414:	4299      	cmp	r1, r3
 23fe416:	da1b      	bge.n	23fe450 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe418:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe41a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe41c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe420:	4631      	mov	r1, r6
 23fe422:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe426:	f106 0010 	add.w	r0, r6, #16
 23fe42a:	f7ff ff89 	bl	23fe340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe42e:	b9ee      	cbnz	r6, 23fe46c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe432:	3301      	adds	r3, #1
 23fe434:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe436:	e011      	b.n	23fe45c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe438:	a808      	add	r0, sp, #32
 23fe43a:	f7ff ffab 	bl	23fe394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe43e:	2800      	cmp	r0, #0
 23fe440:	d1d6      	bne.n	23fe3f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe442:	a808      	add	r0, sp, #32
 23fe444:	f7ff fa54 	bl	23fd8f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe448:	4620      	mov	r0, r4
 23fe44a:	b015      	add	sp, #84	; 0x54
 23fe44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe450:	3101      	adds	r1, #1
 23fe452:	a808      	add	r0, sp, #32
 23fe454:	f7ff ff9e 	bl	23fe394 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe458:	2800      	cmp	r0, #0
 23fe45a:	d1dd      	bne.n	23fe418 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe45c:	a80f      	add	r0, sp, #60	; 0x3c
 23fe45e:	f7ff f9a5 	bl	23fd7ac <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe462:	a80b      	add	r0, sp, #44	; 0x2c
 23fe464:	f7ff f9a2 	bl	23fd7ac <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe468:	3514      	adds	r5, #20
 23fe46a:	e7c6      	b.n	23fe3fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe46c:	4630      	mov	r0, r6
 23fe46e:	a90f      	add	r1, sp, #60	; 0x3c
 23fe470:	f7ff fa05 	bl	23fd87e <_ZN6StringC1EOS_>
 23fe474:	e7dc      	b.n	23fe430 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe476:	2600      	movs	r6, #0
 23fe478:	f04f 0914 	mov.w	r9, #20
 23fe47c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe480:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe482:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe486:	429e      	cmp	r6, r3
 23fe488:	da7c      	bge.n	23fe584 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fe48a:	0133      	lsls	r3, r6, #4
 23fe48c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe48e:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe490:	b90b      	cbnz	r3, 23fe496 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe492:	3601      	adds	r6, #1
 23fe494:	e7f5      	b.n	23fe482 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe496:	2300      	movs	r3, #0
 23fe498:	9307      	str	r3, [sp, #28]
 23fe49a:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe49e:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe4a0:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe4a2:	a907      	add	r1, sp, #28
 23fe4a4:	a806      	add	r0, sp, #24
 23fe4a6:	f7ff fb09 	bl	23fdabc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe4aa:	4682      	mov	sl, r0
 23fe4ac:	2800      	cmp	r0, #0
 23fe4ae:	d0f0      	beq.n	23fe492 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe4b0:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe4b4:	4601      	mov	r1, r0
            bool found = false;
 23fe4b6:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe4ba:	4628      	mov	r0, r5
 23fe4bc:	9a07      	ldr	r2, [sp, #28]
 23fe4be:	f10d 0317 	add.w	r3, sp, #23
 23fe4c2:	f7ff fb6d 	bl	23fdba0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe4c6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe4ca:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe4cc:	2f00      	cmp	r7, #0
 23fe4ce:	d14a      	bne.n	23fe566 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe4d0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe4d4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe4d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe4dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe4e0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe4e4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe4e8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe4ea:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe4ee:	4293      	cmp	r3, r2
 23fe4f0:	db17      	blt.n	23fe522 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe4f2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe4f6:	f1ba 0f00 	cmp.w	sl, #0
 23fe4fa:	dd30      	ble.n	23fe55e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe4fc:	fb09 f00a 	mul.w	r0, r9, sl
 23fe500:	f7ff f878 	bl	23fd5f4 <malloc>
            if (!d) {
 23fe504:	4683      	mov	fp, r0
 23fe506:	b360      	cbz	r0, 23fe562 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe508:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe50c:	fb09 1202 	mla	r2, r9, r2, r1
 23fe510:	f7ff feea 	bl	23fe2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe514:	6828      	ldr	r0, [r5, #0]
 23fe516:	f7ff f87b 	bl	23fd610 <free>
        data_ = d;
 23fe51a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe51e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe522:	682b      	ldr	r3, [r5, #0]
 23fe524:	9a01      	ldr	r2, [sp, #4]
 23fe526:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe52a:	686a      	ldr	r2, [r5, #4]
 23fe52c:	4651      	mov	r1, sl
 23fe52e:	fb09 3202 	mla	r2, r9, r2, r3
 23fe532:	f10a 0014 	add.w	r0, sl, #20
 23fe536:	f7ff fed7 	bl	23fe2e8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe53a:	f1ba 0f00 	cmp.w	sl, #0
 23fe53e:	d003      	beq.n	23fe548 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe540:	4650      	mov	r0, sl
 23fe542:	a90f      	add	r1, sp, #60	; 0x3c
 23fe544:	f7ff fd1a 	bl	23fdf7c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe548:	686b      	ldr	r3, [r5, #4]
 23fe54a:	3301      	adds	r3, #1
 23fe54c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe54e:	a811      	add	r0, sp, #68	; 0x44
 23fe550:	f7ff fccc 	bl	23fdeec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe554:	b13f      	cbz	r7, 23fe566 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe556:	a80b      	add	r0, sp, #44	; 0x2c
 23fe558:	f7ff fcc8 	bl	23fdeec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe55c:	e771      	b.n	23fe442 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe55e:	46bb      	mov	fp, r7
 23fe560:	e7d8      	b.n	23fe514 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe562:	2701      	movs	r7, #1
 23fe564:	e7f3      	b.n	23fe54e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe566:	9b01      	ldr	r3, [sp, #4]
 23fe568:	682d      	ldr	r5, [r5, #0]
 23fe56a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe56e:	9b06      	ldr	r3, [sp, #24]
 23fe570:	781b      	ldrb	r3, [r3, #0]
 23fe572:	b92b      	cbnz	r3, 23fe580 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe574:	f8d8 3000 	ldr.w	r3, [r8]
 23fe578:	9a02      	ldr	r2, [sp, #8]
 23fe57a:	4413      	add	r3, r2
 23fe57c:	7c1b      	ldrb	r3, [r3, #16]
 23fe57e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe580:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe582:	e78e      	b.n	23fe4a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe584:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe586:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe588:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe58a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe58c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe58e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe592:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe594:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe596:	60a2      	str	r2, [r4, #8]
 23fe598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe59a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe59c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe59e:	60e2      	str	r2, [r4, #12]
 23fe5a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe5a2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe5a4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe5a6:	6122      	str	r2, [r4, #16]
 23fe5a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe5aa:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe5ac:	9b03      	ldr	r3, [sp, #12]
 23fe5ae:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe5b0:	6162      	str	r2, [r4, #20]
 23fe5b2:	7623      	strb	r3, [r4, #24]
 23fe5b4:	e7cf      	b.n	23fe556 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe5b8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe5ba:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe5bc:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe5be:	4617      	mov	r7, r2
 23fe5c0:	b087      	sub	sp, #28
 23fe5c2:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe5c4:	4668      	mov	r0, sp
 23fe5c6:	4619      	mov	r1, r3
 23fe5c8:	f7fe faa1 	bl	23fcb0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe5cc:	4b0b      	ldr	r3, [pc, #44]	; (23fe5fc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe5ce:	4669      	mov	r1, sp
 23fe5d0:	f846 3b04 	str.w	r3, [r6], #4
 23fe5d4:	a803      	add	r0, sp, #12
 23fe5d6:	f7fe fa9a 	bl	23fcb0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe5da:	4639      	mov	r1, r7
 23fe5dc:	aa03      	add	r2, sp, #12
 23fe5de:	4630      	mov	r0, r6
 23fe5e0:	f7ff fef0 	bl	23fe3c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe5e4:	a803      	add	r0, sp, #12
 23fe5e6:	f7fe fa51 	bl	23fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe5ea:	4668      	mov	r0, sp
 23fe5ec:	f7fe fa4e 	bl	23fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe5f0:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe5f2:	4b03      	ldr	r3, [pc, #12]	; (23fe600 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe5f4:	6225      	str	r5, [r4, #32]
 23fe5f6:	6023      	str	r3, [r4, #0]
}
 23fe5f8:	b007      	add	sp, #28
 23fe5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe5fc:	023ffb7c 	.word	0x023ffb7c
 23fe600:	023ffc80 	.word	0x023ffc80

023fe604 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe604:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe606:	460f      	mov	r7, r1
 23fe608:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe60a:	4638      	mov	r0, r7
 23fe60c:	491c      	ldr	r1, [pc, #112]	; (23fe680 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe60e:	4616      	mov	r6, r2
 23fe610:	461d      	mov	r5, r3
 23fe612:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe614:	f7fe f90e 	bl	23fc834 <strcmp>
 23fe618:	b9c0      	cbnz	r0, 23fe64c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe61a:	b1a4      	cbz	r4, 23fe646 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe61c:	4629      	mov	r1, r5
 23fe61e:	a801      	add	r0, sp, #4
 23fe620:	f7ff fcbf 	bl	23fdfa2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe624:	2024      	movs	r0, #36	; 0x24
 23fe626:	4917      	ldr	r1, [pc, #92]	; (23fe684 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe628:	f001 f8de 	bl	23ff7e8 <_ZnwjRKSt9nothrow_t>
 23fe62c:	4605      	mov	r5, r0
 23fe62e:	b130      	cbz	r0, 23fe63e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe630:	ab01      	add	r3, sp, #4
 23fe632:	4632      	mov	r2, r6
 23fe634:	4621      	mov	r1, r4
 23fe636:	f7ff ffbf 	bl	23fe5b8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe63a:	4b13      	ldr	r3, [pc, #76]	; (23fe688 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe63c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe63e:	a801      	add	r0, sp, #4
 23fe640:	f7fe fa24 	bl	23fca8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe644:	462c      	mov	r4, r5
}
 23fe646:	4620      	mov	r0, r4
 23fe648:	b005      	add	sp, #20
 23fe64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe64c:	4638      	mov	r0, r7
 23fe64e:	490f      	ldr	r1, [pc, #60]	; (23fe68c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe650:	f7fe f8f0 	bl	23fc834 <strcmp>
 23fe654:	b990      	cbnz	r0, 23fe67c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe656:	2c00      	cmp	r4, #0
 23fe658:	d0f5      	beq.n	23fe646 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe65a:	4629      	mov	r1, r5
 23fe65c:	a801      	add	r0, sp, #4
 23fe65e:	f7ff fca0 	bl	23fdfa2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe662:	2024      	movs	r0, #36	; 0x24
 23fe664:	4907      	ldr	r1, [pc, #28]	; (23fe684 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe666:	f001 f8bf 	bl	23ff7e8 <_ZnwjRKSt9nothrow_t>
 23fe66a:	4605      	mov	r5, r0
 23fe66c:	2800      	cmp	r0, #0
 23fe66e:	d0e6      	beq.n	23fe63e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe670:	4632      	mov	r2, r6
 23fe672:	4621      	mov	r1, r4
 23fe674:	ab01      	add	r3, sp, #4
 23fe676:	f7ff ff9f 	bl	23fe5b8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe67a:	e7e0      	b.n	23fe63e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe67c:	2400      	movs	r4, #0
 23fe67e:	e7e2      	b.n	23fe646 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe680:	023ffc14 	.word	0x023ffc14
 23fe684:	023ffe39 	.word	0x023ffe39
 23fe688:	023ffc98 	.word	0x023ffc98
 23fe68c:	023ffc18 	.word	0x023ffc18

023fe690 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe690:	4b01      	ldr	r3, [pc, #4]	; (23fe698 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe692:	4a02      	ldr	r2, [pc, #8]	; (23fe69c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe694:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe696:	4770      	bx	lr
 23fe698:	1007ae74 	.word	0x1007ae74
 23fe69c:	023ffc29 	.word	0x023ffc29

023fe6a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe6a4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe6a6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe6aa:	4604      	mov	r4, r0
 23fe6ac:	460e      	mov	r6, r1
 23fe6ae:	4617      	mov	r7, r2
 23fe6b0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe6b2:	f000 fb31 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fe6b6:	4581      	cmp	r9, r0
 23fe6b8:	d04d      	beq.n	23fe756 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe6ba:	792b      	ldrb	r3, [r5, #4]
 23fe6bc:	0719      	lsls	r1, r3, #28
 23fe6be:	d504      	bpl.n	23fe6ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe6c0:	4620      	mov	r0, r4
 23fe6c2:	696a      	ldr	r2, [r5, #20]
 23fe6c4:	4954      	ldr	r1, [pc, #336]	; (23fe818 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe6c6:	f7ff fad0 	bl	23fdc6a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe6ca:	f1b8 0f00 	cmp.w	r8, #0
 23fe6ce:	d00d      	beq.n	23fe6ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe6d0:	215b      	movs	r1, #91	; 0x5b
 23fe6d2:	4620      	mov	r0, r4
 23fe6d4:	f7ff fa57 	bl	23fdb86 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe6d8:	4641      	mov	r1, r8
 23fe6da:	4620      	mov	r0, r4
 23fe6dc:	f7ff fa44 	bl	23fdb68 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe6e0:	6823      	ldr	r3, [r4, #0]
 23fe6e2:	2202      	movs	r2, #2
 23fe6e4:	4620      	mov	r0, r4
 23fe6e6:	68db      	ldr	r3, [r3, #12]
 23fe6e8:	494c      	ldr	r1, [pc, #304]	; (23fe81c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe6ea:	4798      	blx	r3
    if (attr.has_file) {
 23fe6ec:	792b      	ldrb	r3, [r5, #4]
 23fe6ee:	07da      	lsls	r2, r3, #31
 23fe6f0:	d524      	bpl.n	23fe73c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe6f2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe6f6:	212f      	movs	r1, #47	; 0x2f
 23fe6f8:	4640      	mov	r0, r8
 23fe6fa:	f001 f918 	bl	23ff92e <strrchr>
    if (s1) {
 23fe6fe:	b108      	cbz	r0, 23fe704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe700:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe704:	4641      	mov	r1, r8
 23fe706:	4620      	mov	r0, r4
 23fe708:	f7ff fa2e 	bl	23fdb68 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe70c:	792b      	ldrb	r3, [r5, #4]
 23fe70e:	079b      	lsls	r3, r3, #30
 23fe710:	d508      	bpl.n	23fe724 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe712:	213a      	movs	r1, #58	; 0x3a
 23fe714:	4620      	mov	r0, r4
 23fe716:	f7ff fa36 	bl	23fdb86 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe71a:	4620      	mov	r0, r4
 23fe71c:	68ea      	ldr	r2, [r5, #12]
 23fe71e:	4940      	ldr	r1, [pc, #256]	; (23fe820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe720:	f7ff faa3 	bl	23fdc6a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe724:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe726:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe728:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe72c:	4620      	mov	r0, r4
            write(", ", 2);
 23fe72e:	f04f 0202 	mov.w	r2, #2
 23fe732:	68db      	ldr	r3, [r3, #12]
 23fe734:	bf14      	ite	ne
 23fe736:	493b      	ldrne	r1, [pc, #236]	; (23fe824 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe738:	493b      	ldreq	r1, [pc, #236]	; (23fe828 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe73a:	4798      	blx	r3
    if (attr.has_function) {
 23fe73c:	792b      	ldrb	r3, [r5, #4]
 23fe73e:	0758      	lsls	r0, r3, #29
 23fe740:	d51d      	bpl.n	23fe77e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe742:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe744:	460b      	mov	r3, r1
 23fe746:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe748:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe74c:	b160      	cbz	r0, 23fe768 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe74e:	2820      	cmp	r0, #32
 23fe750:	d108      	bne.n	23fe764 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe752:	4619      	mov	r1, r3
 23fe754:	e7f7      	b.n	23fe746 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe756:	4835      	ldr	r0, [pc, #212]	; (23fe82c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe758:	f000 fc71 	bl	23ff03e <_ZN5spark12NetworkClass9listeningEv>
 23fe75c:	2800      	cmp	r0, #0
 23fe75e:	d0ac      	beq.n	23fe6ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe764:	2828      	cmp	r0, #40	; 0x28
 23fe766:	d1ee      	bne.n	23fe746 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe768:	6823      	ldr	r3, [r4, #0]
 23fe76a:	1a52      	subs	r2, r2, r1
 23fe76c:	4620      	mov	r0, r4
 23fe76e:	68db      	ldr	r3, [r3, #12]
 23fe770:	4798      	blx	r3
        write("(): ", 4);
 23fe772:	6823      	ldr	r3, [r4, #0]
 23fe774:	2204      	movs	r2, #4
 23fe776:	4620      	mov	r0, r4
 23fe778:	68db      	ldr	r3, [r3, #12]
 23fe77a:	492d      	ldr	r1, [pc, #180]	; (23fe830 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe77c:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe77e:	2100      	movs	r1, #0
 23fe780:	4638      	mov	r0, r7
 23fe782:	f7fe fe11 	bl	23fd3a8 <log_level_name>
 23fe786:	4601      	mov	r1, r0
    write(s);
 23fe788:	4620      	mov	r0, r4
 23fe78a:	f7ff f9ed 	bl	23fdb68 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe78e:	6823      	ldr	r3, [r4, #0]
 23fe790:	2202      	movs	r2, #2
 23fe792:	4620      	mov	r0, r4
 23fe794:	68db      	ldr	r3, [r3, #12]
 23fe796:	4924      	ldr	r1, [pc, #144]	; (23fe828 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe798:	4798      	blx	r3
    if (msg) {
 23fe79a:	b11e      	cbz	r6, 23fe7a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe79c:	4631      	mov	r1, r6
 23fe79e:	4620      	mov	r0, r4
 23fe7a0:	f7ff f9e2 	bl	23fdb68 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe7a4:	792b      	ldrb	r3, [r5, #4]
 23fe7a6:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe7aa:	d02c      	beq.n	23fe806 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe7ac:	6823      	ldr	r3, [r4, #0]
 23fe7ae:	4921      	ldr	r1, [pc, #132]	; (23fe834 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe7b0:	68db      	ldr	r3, [r3, #12]
 23fe7b2:	2202      	movs	r2, #2
 23fe7b4:	4620      	mov	r0, r4
 23fe7b6:	4798      	blx	r3
        if (attr.has_code) {
 23fe7b8:	792b      	ldrb	r3, [r5, #4]
 23fe7ba:	06d9      	lsls	r1, r3, #27
 23fe7bc:	d50a      	bpl.n	23fe7d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe7be:	6823      	ldr	r3, [r4, #0]
 23fe7c0:	2207      	movs	r2, #7
 23fe7c2:	4620      	mov	r0, r4
 23fe7c4:	491c      	ldr	r1, [pc, #112]	; (23fe838 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe7c6:	68db      	ldr	r3, [r3, #12]
 23fe7c8:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe7ca:	4620      	mov	r0, r4
 23fe7cc:	69aa      	ldr	r2, [r5, #24]
 23fe7ce:	491b      	ldr	r1, [pc, #108]	; (23fe83c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe7d0:	f7ff fa4b 	bl	23fdc6a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe7d4:	792b      	ldrb	r3, [r5, #4]
 23fe7d6:	069a      	lsls	r2, r3, #26
 23fe7d8:	d511      	bpl.n	23fe7fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe7da:	06db      	lsls	r3, r3, #27
 23fe7dc:	d505      	bpl.n	23fe7ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe7de:	6823      	ldr	r3, [r4, #0]
 23fe7e0:	2202      	movs	r2, #2
 23fe7e2:	4620      	mov	r0, r4
 23fe7e4:	68db      	ldr	r3, [r3, #12]
 23fe7e6:	490f      	ldr	r1, [pc, #60]	; (23fe824 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe7e8:	4798      	blx	r3
            write("details = ", 10);
 23fe7ea:	6823      	ldr	r3, [r4, #0]
 23fe7ec:	4620      	mov	r0, r4
 23fe7ee:	4914      	ldr	r1, [pc, #80]	; (23fe840 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe7f0:	220a      	movs	r2, #10
 23fe7f2:	68db      	ldr	r3, [r3, #12]
 23fe7f4:	4798      	blx	r3
            write(attr.details);
 23fe7f6:	4620      	mov	r0, r4
 23fe7f8:	69e9      	ldr	r1, [r5, #28]
 23fe7fa:	f7ff f9b5 	bl	23fdb68 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe7fe:	215d      	movs	r1, #93	; 0x5d
 23fe800:	4620      	mov	r0, r4
 23fe802:	f7ff f9c0 	bl	23fdb86 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe806:	6823      	ldr	r3, [r4, #0]
 23fe808:	4620      	mov	r0, r4
}
 23fe80a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe80e:	2202      	movs	r2, #2
 23fe810:	68db      	ldr	r3, [r3, #12]
 23fe812:	490c      	ldr	r1, [pc, #48]	; (23fe844 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe814:	4718      	bx	r3
 23fe816:	bf00      	nop
 23fe818:	023ffc2d 	.word	0x023ffc2d
 23fe81c:	023ffc34 	.word	0x023ffc34
 23fe820:	023ffc37 	.word	0x023ffc37
 23fe824:	023ffc3a 	.word	0x023ffc3a
 23fe828:	023ffc3f 	.word	0x023ffc3f
 23fe82c:	1007aef0 	.word	0x1007aef0
 23fe830:	023ffc3d 	.word	0x023ffc3d
 23fe834:	023ffc42 	.word	0x023ffc42
 23fe838:	023ffc45 	.word	0x023ffc45
 23fe83c:	023ffc4d 	.word	0x023ffc4d
 23fe840:	023ffc50 	.word	0x023ffc50
 23fe844:	023ffc5b 	.word	0x023ffc5b

023fe848 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe84c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe84e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe850:	460d      	mov	r5, r1
 23fe852:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe854:	f000 fa60 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fe858:	4287      	cmp	r7, r0
 23fe85a:	d007      	beq.n	23fe86c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe85c:	6a20      	ldr	r0, [r4, #32]
 23fe85e:	4632      	mov	r2, r6
 23fe860:	6803      	ldr	r3, [r0, #0]
 23fe862:	4629      	mov	r1, r5
}
 23fe864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe868:	68db      	ldr	r3, [r3, #12]
 23fe86a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe86c:	4803      	ldr	r0, [pc, #12]	; (23fe87c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe86e:	f000 fbe6 	bl	23ff03e <_ZN5spark12NetworkClass9listeningEv>
 23fe872:	2800      	cmp	r0, #0
 23fe874:	d0f2      	beq.n	23fe85c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe87a:	bf00      	nop
 23fe87c:	1007aef0 	.word	0x1007aef0

023fe880 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe884:	b085      	sub	sp, #20
    return stream_;
 23fe886:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe88a:	4605      	mov	r5, r0
 23fe88c:	460f      	mov	r7, r1
 23fe88e:	4690      	mov	r8, r2
 23fe890:	461e      	mov	r6, r3
 23fe892:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe894:	f000 fa40 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fe898:	4581      	cmp	r9, r0
 23fe89a:	d105      	bne.n	23fe8a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe89c:	4849      	ldr	r0, [pc, #292]	; (23fe9c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe89e:	f000 fbce 	bl	23ff03e <_ZN5spark12NetworkClass9listeningEv>
 23fe8a2:	2800      	cmp	r0, #0
 23fe8a4:	f040 808a 	bne.w	23fe9bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe8a8:	f04f 0900 	mov.w	r9, #0
 23fe8ac:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fe8ae:	4a46      	ldr	r2, [pc, #280]	; (23fe9c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe8b0:	4668      	mov	r0, sp
 23fe8b2:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fe8b6:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fe8b8:	f88d 9004 	strb.w	r9, [sp, #4]
 23fe8bc:	f000 fd7d 	bl	23ff3ba <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe8c0:	4649      	mov	r1, r9
 23fe8c2:	4640      	mov	r0, r8
 23fe8c4:	f7fe fd70 	bl	23fd3a8 <log_level_name>
 23fe8c8:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe8ca:	4940      	ldr	r1, [pc, #256]	; (23fe9cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe8cc:	2201      	movs	r2, #1
 23fe8ce:	4668      	mov	r0, sp
 23fe8d0:	f000 fe02 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe8d4:	4641      	mov	r1, r8
 23fe8d6:	f7ff f939 	bl	23fdb4c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe8da:	b13f      	cbz	r7, 23fe8ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fe8dc:	493c      	ldr	r1, [pc, #240]	; (23fe9d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe8de:	2201      	movs	r2, #1
 23fe8e0:	4668      	mov	r0, sp
 23fe8e2:	f000 fdf9 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe8e6:	4639      	mov	r1, r7
 23fe8e8:	f7ff f930 	bl	23fdb4c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe8ec:	b13e      	cbz	r6, 23fe8fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fe8ee:	4939      	ldr	r1, [pc, #228]	; (23fe9d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe8f0:	2201      	movs	r2, #1
 23fe8f2:	4668      	mov	r0, sp
 23fe8f4:	f000 fdf0 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe8f8:	4631      	mov	r1, r6
 23fe8fa:	f7ff f927 	bl	23fdb4c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe8fe:	7923      	ldrb	r3, [r4, #4]
 23fe900:	07df      	lsls	r7, r3, #31
 23fe902:	d50e      	bpl.n	23fe922 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fe904:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe906:	212f      	movs	r1, #47	; 0x2f
 23fe908:	4630      	mov	r0, r6
 23fe90a:	f001 f810 	bl	23ff92e <strrchr>
    if (s1) {
 23fe90e:	b100      	cbz	r0, 23fe912 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fe910:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe912:	4931      	ldr	r1, [pc, #196]	; (23fe9d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe914:	2201      	movs	r2, #1
 23fe916:	4668      	mov	r0, sp
 23fe918:	f000 fdde 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe91c:	4631      	mov	r1, r6
 23fe91e:	f7ff f915 	bl	23fdb4c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe922:	7923      	ldrb	r3, [r4, #4]
 23fe924:	079e      	lsls	r6, r3, #30
 23fe926:	d507      	bpl.n	23fe938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fe928:	492c      	ldr	r1, [pc, #176]	; (23fe9dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe92a:	2202      	movs	r2, #2
 23fe92c:	4668      	mov	r0, sp
 23fe92e:	f000 fdd3 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe932:	68e1      	ldr	r1, [r4, #12]
 23fe934:	f000 fd4e 	bl	23ff3d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe938:	7923      	ldrb	r3, [r4, #4]
 23fe93a:	0758      	lsls	r0, r3, #29
 23fe93c:	d514      	bpl.n	23fe968 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe93e:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe940:	4633      	mov	r3, r6
 23fe942:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe944:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe948:	b12a      	cbz	r2, 23fe956 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fe94a:	2a20      	cmp	r2, #32
 23fe94c:	d101      	bne.n	23fe952 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fe94e:	461e      	mov	r6, r3
 23fe950:	e7f7      	b.n	23fe942 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fe952:	2a28      	cmp	r2, #40	; 0x28
 23fe954:	d1f5      	bne.n	23fe942 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fe956:	2202      	movs	r2, #2
 23fe958:	4921      	ldr	r1, [pc, #132]	; (23fe9e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe95a:	4668      	mov	r0, sp
 23fe95c:	f000 fdbc 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe960:	4631      	mov	r1, r6
 23fe962:	1bba      	subs	r2, r7, r6
 23fe964:	f000 fdc8 	bl	23ff4f8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe968:	7923      	ldrb	r3, [r4, #4]
 23fe96a:	0719      	lsls	r1, r3, #28
 23fe96c:	d507      	bpl.n	23fe97e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23fe96e:	491d      	ldr	r1, [pc, #116]	; (23fe9e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe970:	2201      	movs	r2, #1
 23fe972:	4668      	mov	r0, sp
 23fe974:	f000 fdb0 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe978:	6961      	ldr	r1, [r4, #20]
 23fe97a:	f000 fd3d 	bl	23ff3f8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe97e:	7923      	ldrb	r3, [r4, #4]
 23fe980:	06da      	lsls	r2, r3, #27
 23fe982:	d507      	bpl.n	23fe994 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe984:	4918      	ldr	r1, [pc, #96]	; (23fe9e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe986:	2204      	movs	r2, #4
 23fe988:	4668      	mov	r0, sp
 23fe98a:	f000 fda5 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe98e:	69a1      	ldr	r1, [r4, #24]
 23fe990:	f000 fd20 	bl	23ff3d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe994:	7923      	ldrb	r3, [r4, #4]
 23fe996:	069b      	lsls	r3, r3, #26
 23fe998:	d507      	bpl.n	23fe9aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe99a:	4914      	ldr	r1, [pc, #80]	; (23fe9ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe99c:	2206      	movs	r2, #6
 23fe99e:	4668      	mov	r0, sp
 23fe9a0:	f000 fd9a 	bl	23ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe9a4:	69e1      	ldr	r1, [r4, #28]
 23fe9a6:	f7ff f8d1 	bl	23fdb4c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe9aa:	4668      	mov	r0, sp
 23fe9ac:	f000 fcef 	bl	23ff38e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe9b0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe9b2:	2202      	movs	r2, #2
 23fe9b4:	6803      	ldr	r3, [r0, #0]
 23fe9b6:	490e      	ldr	r1, [pc, #56]	; (23fe9f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe9b8:	68db      	ldr	r3, [r3, #12]
 23fe9ba:	4798      	blx	r3
}
 23fe9bc:	b005      	add	sp, #20
 23fe9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe9c2:	bf00      	nop
 23fe9c4:	1007aef0 	.word	0x1007aef0
 23fe9c8:	023ffbf0 	.word	0x023ffbf0
 23fe9cc:	023ffc0a 	.word	0x023ffc0a
 23fe9d0:	023ffc5e 	.word	0x023ffc5e
 23fe9d4:	023ffecc 	.word	0x023ffecc
 23fe9d8:	023ffc60 	.word	0x023ffc60
 23fe9dc:	023ffc62 	.word	0x023ffc62
 23fe9e0:	023ffc65 	.word	0x023ffc65
 23fe9e4:	023ffc68 	.word	0x023ffc68
 23fe9e8:	023ffc6a 	.word	0x023ffc6a
 23fe9ec:	023ffc6f 	.word	0x023ffc6f
 23fe9f0:	023ffc5b 	.word	0x023ffc5b

023fe9f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe9f4:	4b02      	ldr	r3, [pc, #8]	; (23fea00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe9f6:	681a      	ldr	r2, [r3, #0]
 23fe9f8:	4b02      	ldr	r3, [pc, #8]	; (23fea04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe9fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe9fc:	4770      	bx	lr
 23fe9fe:	bf00      	nop
 23fea00:	1007ad70 	.word	0x1007ad70
 23fea04:	1007aea0 	.word	0x1007aea0

023fea08 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fea08:	2200      	movs	r2, #0
 23fea0a:	4b01      	ldr	r3, [pc, #4]	; (23fea10 <_GLOBAL__sub_I_RGB+0x8>)
 23fea0c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fea0e:	4770      	bx	lr
 23fea10:	1007aea4 	.word	0x1007aea4

023fea14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fea14:	4b01      	ldr	r3, [pc, #4]	; (23fea1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fea16:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fea18:	4770      	bx	lr
 23fea1a:	bf00      	nop
 23fea1c:	1007ad74 	.word	0x1007ad74

023fea20 <serialEventRun>:
{
 23fea20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fea22:	4b0f      	ldr	r3, [pc, #60]	; (23fea60 <serialEventRun+0x40>)
 23fea24:	b143      	cbz	r3, 23fea38 <serialEventRun+0x18>
 23fea26:	f000 f977 	bl	23fed18 <_Z16_fetch_usbserialv>
 23fea2a:	6803      	ldr	r3, [r0, #0]
 23fea2c:	691b      	ldr	r3, [r3, #16]
 23fea2e:	4798      	blx	r3
 23fea30:	2800      	cmp	r0, #0
 23fea32:	dd01      	ble.n	23fea38 <serialEventRun+0x18>
        serialEvent();
 23fea34:	e000      	b.n	23fea38 <serialEventRun+0x18>
 23fea36:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fea38:	4b0a      	ldr	r3, [pc, #40]	; (23fea64 <serialEventRun+0x44>)
 23fea3a:	b143      	cbz	r3, 23fea4e <serialEventRun+0x2e>
 23fea3c:	f000 fe04 	bl	23ff648 <_Z22__fetch_global_Serial1v>
 23fea40:	6803      	ldr	r3, [r0, #0]
 23fea42:	691b      	ldr	r3, [r3, #16]
 23fea44:	4798      	blx	r3
 23fea46:	2800      	cmp	r0, #0
 23fea48:	dd01      	ble.n	23fea4e <serialEventRun+0x2e>
        serialEvent1();
 23fea4a:	e000      	b.n	23fea4e <serialEventRun+0x2e>
 23fea4c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fea4e:	4b06      	ldr	r3, [pc, #24]	; (23fea68 <serialEventRun+0x48>)
 23fea50:	b10b      	cbz	r3, 23fea56 <serialEventRun+0x36>
 23fea52:	f000 fe3f 	bl	23ff6d4 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fea56:	4b05      	ldr	r3, [pc, #20]	; (23fea6c <serialEventRun+0x4c>)
 23fea58:	b10b      	cbz	r3, 23fea5e <serialEventRun+0x3e>
 23fea5a:	f000 fe71 	bl	23ff740 <_Z15serialEventRun3v>
}
 23fea5e:	bd08      	pop	{r3, pc}
	...

023fea70 <_post_loop>:
{
 23fea70:	b508      	push	{r3, lr}
	serialEventRun();
 23fea72:	f7ff ffd5 	bl	23fea20 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fea76:	f7fe fa83 	bl	23fcf80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fea7a:	4b01      	ldr	r3, [pc, #4]	; (23fea80 <_post_loop+0x10>)
 23fea7c:	6018      	str	r0, [r3, #0]
}
 23fea7e:	bd08      	pop	{r3, pc}
 23fea80:	1007af4c 	.word	0x1007af4c

023fea84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fea84:	4805      	ldr	r0, [pc, #20]	; (23fea9c <_Z33system_initialize_user_backup_ramv+0x18>)
 23fea86:	4a06      	ldr	r2, [pc, #24]	; (23feaa0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fea88:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fea8a:	1a12      	subs	r2, r2, r0
 23fea8c:	4905      	ldr	r1, [pc, #20]	; (23feaa4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fea8e:	f000 febd 	bl	23ff80c <memcpy>
    __backup_sram_signature = signature;
 23fea92:	4b05      	ldr	r3, [pc, #20]	; (23feaa8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fea94:	4a05      	ldr	r2, [pc, #20]	; (23feaac <_Z33system_initialize_user_backup_ramv+0x28>)
 23fea96:	601a      	str	r2, [r3, #0]
}
 23fea98:	bd08      	pop	{r3, pc}
 23fea9a:	bf00      	nop
 23fea9c:	1007b400 	.word	0x1007b400
 23feaa0:	1007b404 	.word	0x1007b404
 23feaa4:	085ff128 	.word	0x085ff128
 23feaa8:	1007b400 	.word	0x1007b400
 23feaac:	9a271c1e 	.word	0x9a271c1e

023feab0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feab0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23feab2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feab4:	461a      	mov	r2, r3
 23feab6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23feaba:	9300      	str	r3, [sp, #0]
 23feabc:	f7fe fcba 	bl	23fd434 <system_ctrl_set_result>
}
 23feac0:	b003      	add	sp, #12
 23feac2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023feac8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23feac8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23feaca:	8843      	ldrh	r3, [r0, #2]
 23feacc:	2b0a      	cmp	r3, #10
 23feace:	d008      	beq.n	23feae2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fead0:	2b50      	cmp	r3, #80	; 0x50
 23fead2:	d10b      	bne.n	23feaec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fead4:	4b09      	ldr	r3, [pc, #36]	; (23feafc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fead6:	681b      	ldr	r3, [r3, #0]
 23fead8:	b14b      	cbz	r3, 23feaee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23feada:	b003      	add	sp, #12
 23feadc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23feae0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23feae2:	f7ff ffe5 	bl	23feab0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23feae6:	b003      	add	sp, #12
 23feae8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feaec:	2300      	movs	r3, #0
 23feaee:	461a      	mov	r2, r3
 23feaf0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23feaf4:	9300      	str	r3, [sp, #0]
 23feaf6:	f7fe fc9d 	bl	23fd434 <system_ctrl_set_result>
}
 23feafa:	e7f4      	b.n	23feae6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23feafc:	1007aeb8 	.word	0x1007aeb8

023feb00 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23feb00:	2100      	movs	r1, #0
{
 23feb02:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23feb04:	4811      	ldr	r0, [pc, #68]	; (23feb4c <module_user_init_hook+0x4c>)
 23feb06:	f7fe fdc9 	bl	23fd69c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23feb0a:	4b11      	ldr	r3, [pc, #68]	; (23feb50 <module_user_init_hook+0x50>)
 23feb0c:	681a      	ldr	r2, [r3, #0]
 23feb0e:	4b11      	ldr	r3, [pc, #68]	; (23feb54 <module_user_init_hook+0x54>)
 23feb10:	429a      	cmp	r2, r3
 23feb12:	bf0c      	ite	eq
 23feb14:	2201      	moveq	r2, #1
 23feb16:	2200      	movne	r2, #0
 23feb18:	4b0f      	ldr	r3, [pc, #60]	; (23feb58 <module_user_init_hook+0x58>)
 23feb1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23feb1c:	d001      	beq.n	23feb22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23feb1e:	f7ff ffb1 	bl	23fea84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23feb22:	f7fe fa03 	bl	23fcf2c <HAL_RNG_GetRandomNumber>
 23feb26:	4604      	mov	r4, r0
    srand(seed);
 23feb28:	f000 fea0 	bl	23ff86c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23feb2c:	4b0b      	ldr	r3, [pc, #44]	; (23feb5c <module_user_init_hook+0x5c>)
 23feb2e:	b113      	cbz	r3, 23feb36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23feb30:	4620      	mov	r0, r4
 23feb32:	e000      	b.n	23feb36 <module_user_init_hook+0x36>
 23feb34:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23feb36:	2100      	movs	r1, #0
 23feb38:	4808      	ldr	r0, [pc, #32]	; (23feb5c <module_user_init_hook+0x5c>)
 23feb3a:	f7fe fd4d 	bl	23fd5d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23feb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23feb42:	2100      	movs	r1, #0
 23feb44:	4806      	ldr	r0, [pc, #24]	; (23feb60 <module_user_init_hook+0x60>)
 23feb46:	f7fe bc67 	b.w	23fd418 <system_ctrl_set_app_request_handler>
 23feb4a:	bf00      	nop
 23feb4c:	023fea15 	.word	0x023fea15
 23feb50:	1007b400 	.word	0x1007b400
 23feb54:	9a271c1e 	.word	0x9a271c1e
 23feb58:	1007aeb4 	.word	0x1007aeb4
 23feb5c:	00000000 	.word	0x00000000
 23feb60:	023feac9 	.word	0x023feac9

023feb64 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23feb64:	4770      	bx	lr

023feb66 <_ZN9IPAddressD0Ev>:
 23feb66:	b510      	push	{r4, lr}
 23feb68:	4604      	mov	r4, r0
 23feb6a:	2118      	movs	r1, #24
 23feb6c:	f7fd fe95 	bl	23fc89a <_ZdlPvj>
 23feb70:	4620      	mov	r0, r4
 23feb72:	bd10      	pop	{r4, pc}

023feb74 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23feb74:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23feb76:	7d03      	ldrb	r3, [r0, #20]
{
 23feb78:	460e      	mov	r6, r1
	if (address.v==6) {
 23feb7a:	2b06      	cmp	r3, #6
 23feb7c:	f04f 0400 	mov.w	r4, #0
{
 23feb80:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23feb82:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23feb86:	d012      	beq.n	23febae <_ZNK9IPAddress7printToER5Print+0x3a>
 23feb88:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23feb8c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23feb90:	220a      	movs	r2, #10
 23feb92:	4630      	mov	r0, r6
 23feb94:	f7fe ff0f 	bl	23fd9b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23feb98:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23feb9a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23feb9c:	d019      	beq.n	23febd2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23feb9e:	2c00      	cmp	r4, #0
 23feba0:	d0f4      	beq.n	23feb8c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23feba2:	212e      	movs	r1, #46	; 0x2e
 23feba4:	4630      	mov	r0, r6
 23feba6:	f7fe fef7 	bl	23fd998 <_ZN5Print5printEc>
 23febaa:	4404      	add	r4, r0
 23febac:	e7ee      	b.n	23feb8c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23febae:	232f      	movs	r3, #47	; 0x2f
 23febb0:	466a      	mov	r2, sp
 23febb2:	4639      	mov	r1, r7
 23febb4:	200a      	movs	r0, #10
		buf[0] = 0;
 23febb6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23febba:	f7fe fa27 	bl	23fd00c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23febbe:	4668      	mov	r0, sp
 23febc0:	f7fd fe42 	bl	23fc848 <strlen>
 23febc4:	6833      	ldr	r3, [r6, #0]
 23febc6:	4602      	mov	r2, r0
 23febc8:	4669      	mov	r1, sp
 23febca:	4630      	mov	r0, r6
 23febcc:	68db      	ldr	r3, [r3, #12]
 23febce:	4798      	blx	r3
 23febd0:	4604      	mov	r4, r0
    }
    return n;
}
 23febd2:	4620      	mov	r0, r4
 23febd4:	b00d      	add	sp, #52	; 0x34
 23febd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023febd8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23febd8:	b510      	push	{r4, lr}
 23febda:	4604      	mov	r4, r0
 23febdc:	4b04      	ldr	r3, [pc, #16]	; (23febf0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23febde:	2211      	movs	r2, #17
 23febe0:	2100      	movs	r1, #0
 23febe2:	f840 3b04 	str.w	r3, [r0], #4
 23febe6:	f000 fe38 	bl	23ff85a <memset>
}
 23febea:	4620      	mov	r0, r4
 23febec:	bd10      	pop	{r4, pc}
 23febee:	bf00      	nop
 23febf0:	023ffcfc 	.word	0x023ffcfc

023febf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23febf4:	4603      	mov	r3, r0
 23febf6:	4a07      	ldr	r2, [pc, #28]	; (23fec14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23febf8:	b510      	push	{r4, lr}
 23febfa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23febfe:	f101 0210 	add.w	r2, r1, #16
 23fec02:	f851 4b04 	ldr.w	r4, [r1], #4
 23fec06:	4291      	cmp	r1, r2
 23fec08:	f843 4b04 	str.w	r4, [r3], #4
 23fec0c:	d1f9      	bne.n	23fec02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fec0e:	780a      	ldrb	r2, [r1, #0]
 23fec10:	701a      	strb	r2, [r3, #0]
}
 23fec12:	bd10      	pop	{r4, pc}
 23fec14:	023ffcfc 	.word	0x023ffcfc

023fec18 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fec18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fec1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fec1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fec22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fec26:	2304      	movs	r3, #4
 23fec28:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fec2c:	6041      	str	r1, [r0, #4]
 23fec2e:	7503      	strb	r3, [r0, #20]
}
 23fec30:	bd10      	pop	{r4, pc}
	...

023fec34 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fec34:	b507      	push	{r0, r1, r2, lr}
 23fec36:	4b06      	ldr	r3, [pc, #24]	; (23fec50 <_ZN9IPAddressC1EPKh+0x1c>)
 23fec38:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fec3a:	78cb      	ldrb	r3, [r1, #3]
 23fec3c:	9300      	str	r3, [sp, #0]
 23fec3e:	788b      	ldrb	r3, [r1, #2]
 23fec40:	784a      	ldrb	r2, [r1, #1]
 23fec42:	7809      	ldrb	r1, [r1, #0]
 23fec44:	f7ff ffe8 	bl	23fec18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fec48:	b003      	add	sp, #12
 23fec4a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fec4e:	bf00      	nop
 23fec50:	023ffcfc 	.word	0x023ffcfc

023fec54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fec54:	7441      	strb	r1, [r0, #17]
}
 23fec56:	4770      	bx	lr

023fec58 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fec58:	4770      	bx	lr

023fec5a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fec5a:	4770      	bx	lr

023fec5c <_ZN9USBSerial4readEv>:
{
 23fec5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fec5e:	2100      	movs	r1, #0
 23fec60:	7c00      	ldrb	r0, [r0, #16]
 23fec62:	f7fe fb69 	bl	23fd338 <HAL_USB_USART_Receive_Data>
}
 23fec66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fec6a:	bd08      	pop	{r3, pc}

023fec6c <_ZN9USBSerial4peekEv>:
{
 23fec6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fec6e:	2101      	movs	r1, #1
 23fec70:	7c00      	ldrb	r0, [r0, #16]
 23fec72:	f7fe fb61 	bl	23fd338 <HAL_USB_USART_Receive_Data>
}
 23fec76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fec7a:	bd08      	pop	{r3, pc}

023fec7c <_ZN9USBSerial17availableForWriteEv>:
{
 23fec7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fec7e:	7c00      	ldrb	r0, [r0, #16]
 23fec80:	f7fe fb4c 	bl	23fd31c <HAL_USB_USART_Available_Data_For_Write>
}
 23fec84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fec88:	bd08      	pop	{r3, pc}

023fec8a <_ZN9USBSerial9availableEv>:
{
 23fec8a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fec8c:	7c00      	ldrb	r0, [r0, #16]
 23fec8e:	f7fe fb37 	bl	23fd300 <HAL_USB_USART_Available_Data>
}
 23fec92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fec96:	bd08      	pop	{r3, pc}

023fec98 <_ZN9USBSerial5writeEh>:
{
 23fec98:	b513      	push	{r0, r1, r4, lr}
 23fec9a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fec9c:	7c00      	ldrb	r0, [r0, #16]
{
 23fec9e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23feca0:	f7fe fb3c 	bl	23fd31c <HAL_USB_USART_Available_Data_For_Write>
 23feca4:	2800      	cmp	r0, #0
 23feca6:	9901      	ldr	r1, [sp, #4]
 23feca8:	dc01      	bgt.n	23fecae <_ZN9USBSerial5writeEh+0x16>
 23fecaa:	7c60      	ldrb	r0, [r4, #17]
 23fecac:	b120      	cbz	r0, 23fecb8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fecae:	7c20      	ldrb	r0, [r4, #16]
 23fecb0:	f7fe fb50 	bl	23fd354 <HAL_USB_USART_Send_Data>
 23fecb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fecb8:	b002      	add	sp, #8
 23fecba:	bd10      	pop	{r4, pc}

023fecbc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fecbc:	7c00      	ldrb	r0, [r0, #16]
 23fecbe:	f7fe bb57 	b.w	23fd370 <HAL_USB_USART_Flush_Data>

023fecc2 <_ZN9USBSerialD0Ev>:
 23fecc2:	b510      	push	{r4, lr}
 23fecc4:	4604      	mov	r4, r0
 23fecc6:	2114      	movs	r1, #20
 23fecc8:	f7fd fde7 	bl	23fc89a <_ZdlPvj>
 23feccc:	4620      	mov	r0, r4
 23fecce:	bd10      	pop	{r4, pc}

023fecd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fecd0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fecd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fecd6:	4604      	mov	r4, r0
 23fecd8:	4608      	mov	r0, r1
 23fecda:	2100      	movs	r1, #0
 23fecdc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fece0:	4b04      	ldr	r3, [pc, #16]	; (23fecf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fece2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fece4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fece6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fece8:	4611      	mov	r1, r2
  _blocking = true;
 23fecea:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fecec:	f7fe fade 	bl	23fd2ac <HAL_USB_USART_Init>
}
 23fecf0:	4620      	mov	r0, r4
 23fecf2:	bd10      	pop	{r4, pc}
 23fecf4:	023ffd10 	.word	0x023ffd10

023fecf8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fecf8:	2200      	movs	r2, #0
 23fecfa:	7c00      	ldrb	r0, [r0, #16]
 23fecfc:	f7fe bae4 	b.w	23fd2c8 <HAL_USB_USART_Begin>

023fed00 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fed00:	7c00      	ldrb	r0, [r0, #16]
 23fed02:	f7fe baef 	b.w	23fd2e4 <HAL_USB_USART_End>

023fed06 <_Z19acquireSerialBufferv>:
{
 23fed06:	b510      	push	{r4, lr}
 23fed08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fed0a:	2214      	movs	r2, #20
 23fed0c:	2100      	movs	r1, #0
 23fed0e:	f000 fda4 	bl	23ff85a <memset>
}
 23fed12:	4620      	mov	r0, r4
 23fed14:	bd10      	pop	{r4, pc}
	...

023fed18 <_Z16_fetch_usbserialv>:
{
 23fed18:	b510      	push	{r4, lr}
 23fed1a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fed1c:	a803      	add	r0, sp, #12
 23fed1e:	f7ff fff2 	bl	23fed06 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fed22:	4c0c      	ldr	r4, [pc, #48]	; (23fed54 <_Z16_fetch_usbserialv+0x3c>)
 23fed24:	e8d4 1f8f 	ldab	r1, [r4]
 23fed28:	f011 0101 	ands.w	r1, r1, #1
 23fed2c:	d10f      	bne.n	23fed4e <_Z16_fetch_usbserialv+0x36>
 23fed2e:	4620      	mov	r0, r4
 23fed30:	9101      	str	r1, [sp, #4]
 23fed32:	f7fd fdc1 	bl	23fc8b8 <__cxa_guard_acquire>
 23fed36:	9901      	ldr	r1, [sp, #4]
 23fed38:	b148      	cbz	r0, 23fed4e <_Z16_fetch_usbserialv+0x36>
 23fed3a:	aa03      	add	r2, sp, #12
 23fed3c:	4806      	ldr	r0, [pc, #24]	; (23fed58 <_Z16_fetch_usbserialv+0x40>)
 23fed3e:	f7ff ffc7 	bl	23fecd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fed42:	4620      	mov	r0, r4
 23fed44:	f7fd fdbd 	bl	23fc8c2 <__cxa_guard_release>
 23fed48:	4804      	ldr	r0, [pc, #16]	; (23fed5c <_Z16_fetch_usbserialv+0x44>)
 23fed4a:	f000 fd51 	bl	23ff7f0 <atexit>
	return _usbserial;
}
 23fed4e:	4802      	ldr	r0, [pc, #8]	; (23fed58 <_Z16_fetch_usbserialv+0x40>)
 23fed50:	b008      	add	sp, #32
 23fed52:	bd10      	pop	{r4, pc}
 23fed54:	1007aebc 	.word	0x1007aebc
 23fed58:	1007aec0 	.word	0x1007aec0
 23fed5c:	023fec59 	.word	0x023fec59

023fed60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fed60:	4770      	bx	lr

023fed62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fed62:	7441      	strb	r1, [r0, #17]
}
 23fed64:	4770      	bx	lr

023fed66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fed66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fed68:	7c00      	ldrb	r0, [r0, #16]
 23fed6a:	f7fe f9bf 	bl	23fd0ec <hal_usart_available_data_for_write>
}
 23fed6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed72:	bd08      	pop	{r3, pc}

023fed74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fed74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fed76:	7c00      	ldrb	r0, [r0, #16]
 23fed78:	f7fe f972 	bl	23fd060 <hal_usart_available>
}
 23fed7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed80:	bd08      	pop	{r3, pc}

023fed82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fed82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fed84:	7c00      	ldrb	r0, [r0, #16]
 23fed86:	f7fe f987 	bl	23fd098 <hal_usart_peek>
}
 23fed8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed8e:	bd08      	pop	{r3, pc}

023fed90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fed90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fed92:	7c00      	ldrb	r0, [r0, #16]
 23fed94:	f7fe f972 	bl	23fd07c <hal_usart_read>
}
 23fed98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed9c:	bd08      	pop	{r3, pc}

023fed9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fed9e:	7c00      	ldrb	r0, [r0, #16]
 23feda0:	f7fe b988 	b.w	23fd0b4 <hal_usart_flush>

023feda4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23feda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feda6:	7c45      	ldrb	r5, [r0, #17]
{
 23feda8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fedaa:	b12d      	cbz	r5, 23fedb8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fedac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fedae:	b003      	add	sp, #12
 23fedb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fedb4:	f7fe b946 	b.w	23fd044 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fedb8:	7c00      	ldrb	r0, [r0, #16]
 23fedba:	9101      	str	r1, [sp, #4]
 23fedbc:	f7fe f996 	bl	23fd0ec <hal_usart_available_data_for_write>
 23fedc0:	2800      	cmp	r0, #0
 23fedc2:	9901      	ldr	r1, [sp, #4]
 23fedc4:	dcf2      	bgt.n	23fedac <_ZN11USARTSerial5writeEh+0x8>
}
 23fedc6:	4628      	mov	r0, r5
 23fedc8:	b003      	add	sp, #12
 23fedca:	bd30      	pop	{r4, r5, pc}

023fedcc <_ZN11USARTSerialD0Ev>:
 23fedcc:	b510      	push	{r4, lr}
 23fedce:	4604      	mov	r4, r0
 23fedd0:	2114      	movs	r1, #20
 23fedd2:	f7fd fd62 	bl	23fc89a <_ZdlPvj>
 23fedd6:	4620      	mov	r0, r4
 23fedd8:	bd10      	pop	{r4, pc}
	...

023feddc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feddc:	b510      	push	{r4, lr}
 23fedde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fede2:	4604      	mov	r4, r0
 23fede4:	4608      	mov	r0, r1
 23fede6:	4611      	mov	r1, r2
 23fede8:	2200      	movs	r2, #0
 23fedea:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fedee:	4b04      	ldr	r3, [pc, #16]	; (23fee00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fedf0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fedf2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fedf4:	2301      	movs	r3, #1
 23fedf6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fedf8:	f7fe f994 	bl	23fd124 <hal_usart_init_ex>
}
 23fedfc:	4620      	mov	r0, r4
 23fedfe:	bd10      	pop	{r4, pc}
 23fee00:	023ffd44 	.word	0x023ffd44

023fee04 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fee04:	2300      	movs	r3, #0
 23fee06:	7c00      	ldrb	r0, [r0, #16]
 23fee08:	f7fe b97e 	b.w	23fd108 <hal_usart_begin_config>

023fee0c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fee0c:	2200      	movs	r2, #0
 23fee0e:	f7ff bff9 	b.w	23fee04 <_ZN11USARTSerial5beginEmm>

023fee12 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fee12:	7c00      	ldrb	r0, [r0, #16]
 23fee14:	f7fe b908 	b.w	23fd028 <hal_usart_end>

023fee18 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fee18:	7c00      	ldrb	r0, [r0, #16]
 23fee1a:	f7fe b959 	b.w	23fd0d0 <hal_usart_is_enabled>

023fee1e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fee1e:	4770      	bx	lr

023fee20 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fee22:	4606      	mov	r6, r0
 23fee24:	4615      	mov	r5, r2
 23fee26:	460c      	mov	r4, r1
 23fee28:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fee2a:	42bc      	cmp	r4, r7
 23fee2c:	d006      	beq.n	23fee3c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fee2e:	6833      	ldr	r3, [r6, #0]
 23fee30:	4630      	mov	r0, r6
 23fee32:	689b      	ldr	r3, [r3, #8]
 23fee34:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fee38:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fee3a:	e7f6      	b.n	23fee2a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fee3c:	4628      	mov	r0, r5
 23fee3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fee40 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fee40:	2200      	movs	r2, #0
 23fee42:	7c00      	ldrb	r0, [r0, #16]
 23fee44:	f7fe b9a6 	b.w	23fd194 <hal_i2c_write>

023fee48 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fee48:	2100      	movs	r1, #0
 23fee4a:	7c00      	ldrb	r0, [r0, #16]
 23fee4c:	f7fe b9b0 	b.w	23fd1b0 <hal_i2c_available>

023fee50 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fee50:	2100      	movs	r1, #0
 23fee52:	7c00      	ldrb	r0, [r0, #16]
 23fee54:	f7fe b9ba 	b.w	23fd1cc <hal_i2c_read>

023fee58 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fee58:	2100      	movs	r1, #0
 23fee5a:	7c00      	ldrb	r0, [r0, #16]
 23fee5c:	f7fe b9c4 	b.w	23fd1e8 <hal_i2c_peek>

023fee60 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fee60:	2100      	movs	r1, #0
 23fee62:	7c00      	ldrb	r0, [r0, #16]
 23fee64:	f7fe b9ce 	b.w	23fd204 <hal_i2c_flush>

023fee68 <_ZN7TwoWireD0Ev>:
 23fee68:	b510      	push	{r4, lr}
 23fee6a:	4604      	mov	r4, r0
 23fee6c:	2114      	movs	r1, #20
 23fee6e:	f7fd fd14 	bl	23fc89a <_ZdlPvj>
 23fee72:	4620      	mov	r0, r4
 23fee74:	bd10      	pop	{r4, pc}

023fee76 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23fee76:	2200      	movs	r2, #0
 23fee78:	e9c0 2200 	strd	r2, r2, [r0]
 23fee7c:	2218      	movs	r2, #24
 23fee7e:	8002      	strh	r2, [r0, #0]
    };
 23fee80:	780a      	ldrb	r2, [r1, #0]
 23fee82:	7102      	strb	r2, [r0, #4]
 23fee84:	684a      	ldr	r2, [r1, #4]
 23fee86:	6082      	str	r2, [r0, #8]
 23fee88:	68ca      	ldr	r2, [r1, #12]
 23fee8a:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23fee8c:	7a0a      	ldrb	r2, [r1, #8]
 23fee8e:	6102      	str	r2, [r0, #16]
    };
 23fee90:	690a      	ldr	r2, [r1, #16]
 23fee92:	6142      	str	r2, [r0, #20]
  }
 23fee94:	4770      	bx	lr
	...

023fee98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fee98:	b538      	push	{r3, r4, r5, lr}
 23fee9a:	4604      	mov	r4, r0
 23fee9c:	4615      	mov	r5, r2
 23fee9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feea2:	2200      	movs	r2, #0
 23feea4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23feea8:	4b09      	ldr	r3, [pc, #36]	; (23feed0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23feeaa:	4608      	mov	r0, r1
  _i2c = i2c;
 23feeac:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23feeae:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23feeb0:	4629      	mov	r1, r5
 23feeb2:	f7fe f9c3 	bl	23fd23c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23feeb6:	30bf      	adds	r0, #191	; 0xbf
 23feeb8:	d108      	bne.n	23feecc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23feeba:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23feebc:	07db      	lsls	r3, r3, #31
 23feebe:	d505      	bpl.n	23feecc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23feec0:	6868      	ldr	r0, [r5, #4]
 23feec2:	f7fe fba5 	bl	23fd610 <free>
    free(conf.tx_buffer);
 23feec6:	68e8      	ldr	r0, [r5, #12]
 23feec8:	f7fe fba2 	bl	23fd610 <free>
}
 23feecc:	4620      	mov	r0, r4
 23feece:	bd38      	pop	{r3, r4, r5, pc}
 23feed0:	023ffd78 	.word	0x023ffd78

023feed4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23feed4:	2300      	movs	r3, #0
 23feed6:	7c00      	ldrb	r0, [r0, #16]
 23feed8:	461a      	mov	r2, r3
 23feeda:	4619      	mov	r1, r3
 23feedc:	f7fe b930 	b.w	23fd140 <hal_i2c_begin>

023feee0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23feee0:	b510      	push	{r4, lr}
 23feee2:	4604      	mov	r4, r0
 23feee4:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23feee6:	4668      	mov	r0, sp
 23feee8:	f7ff ffc5 	bl	23fee76 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23feeec:	2200      	movs	r2, #0
 23feeee:	4669      	mov	r1, sp
 23feef0:	7c20      	ldrb	r0, [r4, #16]
 23feef2:	f7fe f9b1 	bl	23fd258 <hal_i2c_request_ex>
}
 23feef6:	b006      	add	sp, #24
 23feef8:	bd10      	pop	{r4, pc}

023feefa <_ZN7TwoWire11requestFromEhjh>:
{
 23feefa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23feefc:	f88d 1004 	strb.w	r1, [sp, #4]
 23fef00:	2100      	movs	r1, #0
 23fef02:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fef06:	1a5b      	subs	r3, r3, r1
 23fef08:	bf18      	it	ne
 23fef0a:	2301      	movne	r3, #1
 23fef0c:	e9cd c104 	strd	ip, r1, [sp, #16]
 23fef10:	a901      	add	r1, sp, #4
    size_ = size;
 23fef12:	9202      	str	r2, [sp, #8]
 23fef14:	f88d 300c 	strb.w	r3, [sp, #12]
 23fef18:	f7ff ffe2 	bl	23feee0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fef1c:	b007      	add	sp, #28
 23fef1e:	f85d fb04 	ldr.w	pc, [sp], #4

023fef22 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fef22:	2200      	movs	r2, #0
 23fef24:	7c00      	ldrb	r0, [r0, #16]
 23fef26:	f7fe b919 	b.w	23fd15c <hal_i2c_begin_transmission>

023fef2a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fef2a:	b2c9      	uxtb	r1, r1
 23fef2c:	f7ff bff9 	b.w	23fef22 <_ZN7TwoWire17beginTransmissionEh>

023fef30 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fef30:	2200      	movs	r2, #0
 23fef32:	7c00      	ldrb	r0, [r0, #16]
 23fef34:	f7fe b920 	b.w	23fd178 <hal_i2c_end_transmission>

023fef38 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fef38:	21ff      	movs	r1, #255	; 0xff
 23fef3a:	2200      	movs	r2, #0
      : address_{address},
 23fef3c:	4b04      	ldr	r3, [pc, #16]	; (23fef50 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fef3e:	2001      	movs	r0, #1
 23fef40:	e9c3 1200 	strd	r1, r2, [r3]
 23fef44:	2164      	movs	r1, #100	; 0x64
 23fef46:	611a      	str	r2, [r3, #16]
 23fef48:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fef4c:	4770      	bx	lr
 23fef4e:	bf00      	nop
 23fef50:	1007aed4 	.word	0x1007aed4

023fef54 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fef54:	2200      	movs	r2, #0
 23fef56:	6840      	ldr	r0, [r0, #4]
 23fef58:	4611      	mov	r1, r2
 23fef5a:	f7fe baa3 	b.w	23fd4a4 <network_ready>

023fef5e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fef5e:	2200      	movs	r2, #0
 23fef60:	6840      	ldr	r0, [r0, #4]
 23fef62:	4611      	mov	r1, r2
 23fef64:	f7fe bad6 	b.w	23fd514 <network_listening>

023fef68 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fef68:	2200      	movs	r2, #0
 23fef6a:	6840      	ldr	r0, [r0, #4]
 23fef6c:	4611      	mov	r1, r2
 23fef6e:	f7fe baed 	b.w	23fd54c <network_get_listen_timeout>

023fef72 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fef72:	2200      	movs	r2, #0
 23fef74:	6840      	ldr	r0, [r0, #4]
 23fef76:	f7fe badb 	b.w	23fd530 <network_set_listen_timeout>

023fef7a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fef7a:	2200      	movs	r2, #0
 23fef7c:	6840      	ldr	r0, [r0, #4]
 23fef7e:	f081 0101 	eor.w	r1, r1, #1
 23fef82:	f7fe bab9 	b.w	23fd4f8 <network_listen>

023fef86 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fef86:	2300      	movs	r3, #0
 23fef88:	6840      	ldr	r0, [r0, #4]
 23fef8a:	461a      	mov	r2, r3
 23fef8c:	4619      	mov	r1, r3
 23fef8e:	f7fe baa5 	b.w	23fd4dc <network_off>

023fef92 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fef92:	2300      	movs	r3, #0
 23fef94:	6840      	ldr	r0, [r0, #4]
 23fef96:	461a      	mov	r2, r3
 23fef98:	4619      	mov	r1, r3
 23fef9a:	f7fe ba91 	b.w	23fd4c0 <network_on>

023fef9e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fef9e:	2200      	movs	r2, #0
 23fefa0:	6840      	ldr	r0, [r0, #4]
 23fefa2:	4611      	mov	r1, r2
 23fefa4:	f7fe ba62 	b.w	23fd46c <network_connecting>

023fefa8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fefa8:	2200      	movs	r2, #0
 23fefaa:	2102      	movs	r1, #2
 23fefac:	6840      	ldr	r0, [r0, #4]
 23fefae:	f7fe ba6b 	b.w	23fd488 <network_disconnect>

023fefb2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fefb2:	2300      	movs	r3, #0
 23fefb4:	6840      	ldr	r0, [r0, #4]
 23fefb6:	461a      	mov	r2, r3
 23fefb8:	f7fe ba4a 	b.w	23fd450 <network_connect>

023fefbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fefbc:	2204      	movs	r2, #4
 23fefbe:	4b02      	ldr	r3, [pc, #8]	; (23fefc8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fefc0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fefc2:	4a02      	ldr	r2, [pc, #8]	; (23fefcc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fefc4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fefc6:	4770      	bx	lr
 23fefc8:	1007aee8 	.word	0x1007aee8
 23fefcc:	023ffda4 	.word	0x023ffda4

023fefd0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fefd0:	2300      	movs	r3, #0
 23fefd2:	6840      	ldr	r0, [r0, #4]
 23fefd4:	461a      	mov	r2, r3
 23fefd6:	f7fe ba3b 	b.w	23fd450 <network_connect>

023fefda <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fefda:	2200      	movs	r2, #0
 23fefdc:	2102      	movs	r1, #2
 23fefde:	6840      	ldr	r0, [r0, #4]
 23fefe0:	f7fe ba52 	b.w	23fd488 <network_disconnect>

023fefe4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fefe4:	2200      	movs	r2, #0
 23fefe6:	6840      	ldr	r0, [r0, #4]
 23fefe8:	4611      	mov	r1, r2
 23fefea:	f7fe ba3f 	b.w	23fd46c <network_connecting>

023fefee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fefee:	2200      	movs	r2, #0
 23feff0:	6840      	ldr	r0, [r0, #4]
 23feff2:	4611      	mov	r1, r2
 23feff4:	f7fe ba56 	b.w	23fd4a4 <network_ready>

023feff8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23feff8:	2300      	movs	r3, #0
 23feffa:	6840      	ldr	r0, [r0, #4]
 23feffc:	461a      	mov	r2, r3
 23feffe:	4619      	mov	r1, r3
 23ff000:	f7fe ba5e 	b.w	23fd4c0 <network_on>

023ff004 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff004:	2300      	movs	r3, #0
 23ff006:	6840      	ldr	r0, [r0, #4]
 23ff008:	461a      	mov	r2, r3
 23ff00a:	4619      	mov	r1, r3
 23ff00c:	f7fe ba66 	b.w	23fd4dc <network_off>

023ff010 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff010:	2100      	movs	r1, #0
 23ff012:	6840      	ldr	r0, [r0, #4]
 23ff014:	f7fe baa8 	b.w	23fd568 <network_is_on>

023ff018 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff018:	2100      	movs	r1, #0
 23ff01a:	6840      	ldr	r0, [r0, #4]
 23ff01c:	f7fe bab2 	b.w	23fd584 <network_is_off>

023ff020 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff020:	2200      	movs	r2, #0
 23ff022:	6840      	ldr	r0, [r0, #4]
 23ff024:	f081 0101 	eor.w	r1, r1, #1
 23ff028:	f7fe ba66 	b.w	23fd4f8 <network_listen>

023ff02c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff02c:	2200      	movs	r2, #0
 23ff02e:	6840      	ldr	r0, [r0, #4]
 23ff030:	f7fe ba7e 	b.w	23fd530 <network_set_listen_timeout>

023ff034 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff034:	2200      	movs	r2, #0
 23ff036:	6840      	ldr	r0, [r0, #4]
 23ff038:	4611      	mov	r1, r2
 23ff03a:	f7fe ba87 	b.w	23fd54c <network_get_listen_timeout>

023ff03e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff03e:	2200      	movs	r2, #0
 23ff040:	6840      	ldr	r0, [r0, #4]
 23ff042:	4611      	mov	r1, r2
 23ff044:	f7fe ba66 	b.w	23fd514 <network_listening>

023ff048 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23ff048:	2100      	movs	r1, #0
 23ff04a:	6840      	ldr	r0, [r0, #4]
 23ff04c:	f7fe bab6 	b.w	23fd5bc <network_is_preferred>

023ff050 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff054:	b095      	sub	sp, #84	; 0x54
 23ff056:	4614      	mov	r4, r2
 23ff058:	460d      	mov	r5, r1
 23ff05a:	4607      	mov	r7, r0
    IPAddress addr;
 23ff05c:	f7ff fdbc 	bl	23febd8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff060:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff062:	221c      	movs	r2, #28
 23ff064:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff066:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff068:	f000 fbf7 	bl	23ff85a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff06c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff06e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff070:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff072:	2100      	movs	r1, #0
 23ff074:	466b      	mov	r3, sp
 23ff076:	aa0c      	add	r2, sp, #48	; 0x30
 23ff078:	f7fd ff20 	bl	23fcebc <netdb_getaddrinfo>
    if (!r) {
 23ff07c:	4604      	mov	r4, r0
 23ff07e:	2800      	cmp	r0, #0
 23ff080:	d14b      	bne.n	23ff11a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff082:	4602      	mov	r2, r0
 23ff084:	2101      	movs	r1, #1
 23ff086:	6868      	ldr	r0, [r5, #4]
 23ff088:	f7fe fa0c 	bl	23fd4a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff08c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff08e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff090:	4622      	mov	r2, r4
 23ff092:	6868      	ldr	r0, [r5, #4]
 23ff094:	f7fe fa06 	bl	23fd4a4 <network_ready>
        bool ok = false;
 23ff098:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff09a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff09c:	9e00      	ldr	r6, [sp, #0]
 23ff09e:	2e00      	cmp	r6, #0
 23ff0a0:	d03b      	beq.n	23ff11a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff0a2:	2900      	cmp	r1, #0
 23ff0a4:	d139      	bne.n	23ff11a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff0a6:	6873      	ldr	r3, [r6, #4]
 23ff0a8:	2b02      	cmp	r3, #2
 23ff0aa:	d003      	beq.n	23ff0b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff0ac:	2b0a      	cmp	r3, #10
 23ff0ae:	d011      	beq.n	23ff0d4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff0b0:	69f6      	ldr	r6, [r6, #28]
 23ff0b2:	e7f4      	b.n	23ff09e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff0b4:	f1b8 0f00 	cmp.w	r8, #0
 23ff0b8:	d0fa      	beq.n	23ff0b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff0ba:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff0bc:	a806      	add	r0, sp, #24
 23ff0be:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff0c0:	1d3c      	adds	r4, r7, #4
 23ff0c2:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff0c4:	f7ff fdb6 	bl	23fec34 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff0c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff0cc:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff0ce:	4641      	mov	r1, r8
 23ff0d0:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff0d2:	e7ed      	b.n	23ff0b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff0d4:	f1b9 0f00 	cmp.w	r9, #0
 23ff0d8:	d0ea      	beq.n	23ff0b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff0da:	2210      	movs	r2, #16
 23ff0dc:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff0de:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff0e0:	f000 fbbb 	bl	23ff85a <memset>
                    a.v = 6;
 23ff0e4:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff0e6:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff0e8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff0ec:	f104 0308 	add.w	r3, r4, #8
 23ff0f0:	3418      	adds	r4, #24
 23ff0f2:	462a      	mov	r2, r5
 23ff0f4:	6818      	ldr	r0, [r3, #0]
 23ff0f6:	6859      	ldr	r1, [r3, #4]
 23ff0f8:	3308      	adds	r3, #8
 23ff0fa:	c203      	stmia	r2!, {r0, r1}
 23ff0fc:	42a3      	cmp	r3, r4
 23ff0fe:	4615      	mov	r5, r2
 23ff100:	d1f7      	bne.n	23ff0f2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff102:	a901      	add	r1, sp, #4
 23ff104:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff106:	1d3c      	adds	r4, r7, #4
 23ff108:	ad07      	add	r5, sp, #28
 23ff10a:	f7ff fd73 	bl	23febf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff10e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff112:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff114:	4649      	mov	r1, r9
 23ff116:	7023      	strb	r3, [r4, #0]
                    break;
 23ff118:	e7ca      	b.n	23ff0b0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff11a:	9800      	ldr	r0, [sp, #0]
 23ff11c:	f7fd fec0 	bl	23fcea0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff120:	4638      	mov	r0, r7
 23ff122:	b015      	add	sp, #84	; 0x54
 23ff124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff128 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23ff128:	3803      	subs	r0, #3
 23ff12a:	2802      	cmp	r0, #2
 23ff12c:	bf9a      	itte	ls
 23ff12e:	4b02      	ldrls	r3, [pc, #8]	; (23ff138 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23ff130:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23ff134:	4801      	ldrhi	r0, [pc, #4]	; (23ff13c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23ff136:	4770      	bx	lr
 23ff138:	023ffde0 	.word	0x023ffde0
 23ff13c:	1007aef0 	.word	0x1007aef0

023ff140 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23ff140:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23ff142:	2200      	movs	r2, #0
 23ff144:	6840      	ldr	r0, [r0, #4]
 23ff146:	f7fe fa2b 	bl	23fd5a0 <network_prefer>
}
 23ff14a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23ff14e:	f7ff bfeb 	b.w	23ff128 <_ZN5spark12NetworkClass4fromEm>
	...

023ff154 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff154:	4b02      	ldr	r3, [pc, #8]	; (23ff160 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff156:	4a03      	ldr	r2, [pc, #12]	; (23ff164 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff158:	601a      	str	r2, [r3, #0]
 23ff15a:	2200      	movs	r2, #0
 23ff15c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff15e:	4770      	bx	lr
 23ff160:	1007aef0 	.word	0x1007aef0
 23ff164:	023ffdf4 	.word	0x023ffdf4

023ff168 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23ff168:	2201      	movs	r2, #1
 23ff16a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23ff16e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23ff172:	4618      	mov	r0, r3
 23ff174:	2901      	cmp	r1, #1
 23ff176:	d108      	bne.n	23ff18a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23ff178:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23ff17c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23ff180:	3a01      	subs	r2, #1
 23ff182:	f103 0310 	add.w	r3, r3, #16
 23ff186:	d1f2      	bne.n	23ff16e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23ff188:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23ff18a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23ff18c:	bf04      	itt	eq
 23ff18e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23ff192:	1852      	addeq	r2, r2, r1
 23ff194:	e7f4      	b.n	23ff180 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023ff196 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23ff196:	b40e      	push	{r1, r2, r3}
 23ff198:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff19a:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff19c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23ff19e:	af00      	add	r7, sp, #0
 23ff1a0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23ff1a4:	f855 2b04 	ldr.w	r2, [r5], #4
 23ff1a8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff1aa:	462b      	mov	r3, r5
 23ff1ac:	1878      	adds	r0, r7, r1
 23ff1ae:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23ff1b0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff1b2:	f7fe fa49 	bl	23fd648 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23ff1b6:	280f      	cmp	r0, #15
 23ff1b8:	687a      	ldr	r2, [r7, #4]
 23ff1ba:	d91a      	bls.n	23ff1f2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23ff1bc:	f100 0308 	add.w	r3, r0, #8
 23ff1c0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23ff1c4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23ff1c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff1ca:	1c41      	adds	r1, r0, #1
 23ff1cc:	462b      	mov	r3, r5
 23ff1ce:	4668      	mov	r0, sp
        va_start(args, fmt);
 23ff1d0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff1d2:	f7fe fa39 	bl	23fd648 <vsnprintf>
        if (n > 0) {
 23ff1d6:	1e02      	subs	r2, r0, #0
 23ff1d8:	dd04      	ble.n	23ff1e4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23ff1da:	6823      	ldr	r3, [r4, #0]
 23ff1dc:	4669      	mov	r1, sp
 23ff1de:	4620      	mov	r0, r4
 23ff1e0:	689b      	ldr	r3, [r3, #8]
 23ff1e2:	4798      	blx	r3
 23ff1e4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23ff1e6:	3720      	adds	r7, #32
 23ff1e8:	46bd      	mov	sp, r7
 23ff1ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff1ee:	b003      	add	sp, #12
 23ff1f0:	4770      	bx	lr
    } else if (n > 0) {
 23ff1f2:	2800      	cmp	r0, #0
 23ff1f4:	d0f7      	beq.n	23ff1e6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23ff1f6:	6823      	ldr	r3, [r4, #0]
 23ff1f8:	4602      	mov	r2, r0
 23ff1fa:	689b      	ldr	r3, [r3, #8]
 23ff1fc:	4620      	mov	r0, r4
 23ff1fe:	f107 0110 	add.w	r1, r7, #16
 23ff202:	4798      	blx	r3
}
 23ff204:	e7ef      	b.n	23ff1e6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023ff206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23ff206:	b538      	push	{r3, r4, r5, lr}
 23ff208:	680b      	ldr	r3, [r1, #0]
 23ff20a:	4604      	mov	r4, r0
 23ff20c:	6003      	str	r3, [r0, #0]
 23ff20e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23ff210:	6843      	ldr	r3, [r0, #4]
 23ff212:	429d      	cmp	r5, r3
 23ff214:	d008      	beq.n	23ff228 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23ff216:	b115      	cbz	r5, 23ff21e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23ff218:	686b      	ldr	r3, [r5, #4]
 23ff21a:	3301      	adds	r3, #1
 23ff21c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23ff21e:	6860      	ldr	r0, [r4, #4]
 23ff220:	b108      	cbz	r0, 23ff226 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23ff222:	f7fe fb51 	bl	23fd8c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23ff226:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23ff228:	bd38      	pop	{r3, r4, r5, pc}

023ff22a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23ff22a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23ff22c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23ff22e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23ff232:	2201      	movs	r2, #1
 23ff234:	689b      	ldr	r3, [r3, #8]
 23ff236:	f10d 0107 	add.w	r1, sp, #7
 23ff23a:	4798      	blx	r3
}
 23ff23c:	b003      	add	sp, #12
 23ff23e:	f85d fb04 	ldr.w	pc, [sp], #4

023ff242 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff242:	460b      	mov	r3, r1
 23ff244:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23ff246:	2200      	movs	r2, #0
 23ff248:	b510      	push	{r4, lr}
 23ff24a:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff24c:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23ff250:	6083      	str	r3, [r0, #8]
    if (t) {
 23ff252:	b90b      	cbnz	r3, 23ff258 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23ff254:	4620      	mov	r0, r4
 23ff256:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23ff258:	f7ff ffd5 	bl	23ff206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23ff25c:	e7fa      	b.n	23ff254 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023ff25e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23ff25e:	6883      	ldr	r3, [r0, #8]
 23ff260:	b1eb      	cbz	r3, 23ff29e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23ff262:	781a      	ldrb	r2, [r3, #0]
 23ff264:	2a03      	cmp	r2, #3
 23ff266:	d81a      	bhi.n	23ff29e <_ZNK5spark9JSONValue4typeEv+0x40>
 23ff268:	e8df f002 	tbb	[pc, r2]
 23ff26c:	1b021704 	.word	0x1b021704
 23ff270:	2005      	movs	r0, #5
 23ff272:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23ff274:	6802      	ldr	r2, [r0, #0]
 23ff276:	685b      	ldr	r3, [r3, #4]
 23ff278:	6852      	ldr	r2, [r2, #4]
 23ff27a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23ff27c:	282d      	cmp	r0, #45	; 0x2d
 23ff27e:	d012      	beq.n	23ff2a6 <_ZNK5spark9JSONValue4typeEv+0x48>
 23ff280:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23ff284:	2b09      	cmp	r3, #9
 23ff286:	d90e      	bls.n	23ff2a6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23ff288:	2874      	cmp	r0, #116	; 0x74
 23ff28a:	d00e      	beq.n	23ff2aa <_ZNK5spark9JSONValue4typeEv+0x4c>
 23ff28c:	2866      	cmp	r0, #102	; 0x66
 23ff28e:	d00c      	beq.n	23ff2aa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23ff290:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23ff294:	4258      	negs	r0, r3
 23ff296:	4158      	adcs	r0, r3
 23ff298:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23ff29a:	2006      	movs	r0, #6
 23ff29c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23ff29e:	2000      	movs	r0, #0
 23ff2a0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23ff2a2:	2004      	movs	r0, #4
 23ff2a4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23ff2a6:	2003      	movs	r0, #3
 23ff2a8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23ff2aa:	2002      	movs	r0, #2
}
 23ff2ac:	4770      	bx	lr

023ff2ae <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23ff2ae:	b510      	push	{r4, lr}
 23ff2b0:	4604      	mov	r4, r0
    switch (type()) {
 23ff2b2:	f7ff ffd4 	bl	23ff25e <_ZNK5spark9JSONValue4typeEv>
 23ff2b6:	2802      	cmp	r0, #2
 23ff2b8:	d00e      	beq.n	23ff2d8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23ff2ba:	1ec3      	subs	r3, r0, #3
 23ff2bc:	b2db      	uxtb	r3, r3
 23ff2be:	2b01      	cmp	r3, #1
 23ff2c0:	d814      	bhi.n	23ff2ec <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23ff2c2:	6822      	ldr	r2, [r4, #0]
 23ff2c4:	68a3      	ldr	r3, [r4, #8]
 23ff2c6:	6850      	ldr	r0, [r2, #4]
 23ff2c8:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23ff2ca:	220a      	movs	r2, #10
}
 23ff2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23ff2d0:	2100      	movs	r1, #0
 23ff2d2:	4418      	add	r0, r3
 23ff2d4:	f000 bbc2 	b.w	23ffa5c <strtol>
        const char* const s = d_->json + t_->start;
 23ff2d8:	6822      	ldr	r2, [r4, #0]
 23ff2da:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23ff2dc:	6852      	ldr	r2, [r2, #4]
 23ff2de:	685b      	ldr	r3, [r3, #4]
 23ff2e0:	5cd0      	ldrb	r0, [r2, r3]
 23ff2e2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23ff2e6:	4258      	negs	r0, r3
 23ff2e8:	4158      	adcs	r0, r3
}
 23ff2ea:	bd10      	pop	{r4, pc}
    switch (type()) {
 23ff2ec:	2000      	movs	r0, #0
 23ff2ee:	e7fc      	b.n	23ff2ea <_ZNK5spark9JSONValue5toIntEv+0x3c>

023ff2f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff2f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23ff2f2:	2300      	movs	r3, #0
 23ff2f4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff2f6:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23ff2fa:	480e      	ldr	r0, [pc, #56]	; (23ff334 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23ff2fc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23ff300:	b1a9      	cbz	r1, 23ff32e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23ff302:	780b      	ldrb	r3, [r1, #0]
 23ff304:	2b03      	cmp	r3, #3
 23ff306:	d006      	beq.n	23ff316 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23ff308:	b98b      	cbnz	r3, 23ff32e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23ff30a:	6813      	ldr	r3, [r2, #0]
 23ff30c:	6858      	ldr	r0, [r3, #4]
 23ff30e:	684b      	ldr	r3, [r1, #4]
 23ff310:	5cc3      	ldrb	r3, [r0, r3]
 23ff312:	2b6e      	cmp	r3, #110	; 0x6e
 23ff314:	d007      	beq.n	23ff326 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23ff316:	6813      	ldr	r3, [r2, #0]
 23ff318:	684d      	ldr	r5, [r1, #4]
 23ff31a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23ff31c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23ff31e:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23ff320:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23ff322:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23ff324:	60e3      	str	r3, [r4, #12]
 23ff326:	4611      	mov	r1, r2
 23ff328:	4620      	mov	r0, r4
 23ff32a:	f7ff ff6c 	bl	23ff206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23ff32e:	4620      	mov	r0, r4
 23ff330:	bd38      	pop	{r3, r4, r5, pc}
 23ff332:	bf00      	nop
 23ff334:	023ffc5d 	.word	0x023ffc5d

023ff338 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff338:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23ff33a:	2500      	movs	r5, #0
 23ff33c:	460b      	mov	r3, r1
 23ff33e:	4604      	mov	r4, r0
 23ff340:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff342:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23ff346:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23ff34a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23ff34e:	b14b      	cbz	r3, 23ff364 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23ff350:	781a      	ldrb	r2, [r3, #0]
 23ff352:	2a01      	cmp	r2, #1
 23ff354:	d106      	bne.n	23ff364 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23ff356:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23ff35a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23ff35c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23ff35e:	6143      	str	r3, [r0, #20]
 23ff360:	f7ff ff51 	bl	23ff206 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23ff364:	4620      	mov	r0, r4
 23ff366:	bd38      	pop	{r3, r4, r5, pc}

023ff368 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23ff368:	b510      	push	{r4, lr}
    if (!n_) {
 23ff36a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23ff36c:	4604      	mov	r4, r0
    if (!n_) {
 23ff36e:	b163      	cbz	r3, 23ff38a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23ff370:	6880      	ldr	r0, [r0, #8]
    --n_;
 23ff372:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23ff374:	60e0      	str	r0, [r4, #12]
    ++t_;
 23ff376:	3010      	adds	r0, #16
 23ff378:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23ff37a:	6120      	str	r0, [r4, #16]
    --n_;
 23ff37c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23ff37e:	b113      	cbz	r3, 23ff386 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23ff380:	f7ff fef2 	bl	23ff168 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23ff384:	60a0      	str	r0, [r4, #8]
    return true;
 23ff386:	2001      	movs	r0, #1
 23ff388:	e000      	b.n	23ff38c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23ff38a:	4618      	mov	r0, r3
}
 23ff38c:	bd10      	pop	{r4, pc}

023ff38e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23ff38e:	b510      	push	{r4, lr}
    write('}');
 23ff390:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23ff392:	4604      	mov	r4, r0
    write('}');
 23ff394:	f7ff ff49 	bl	23ff22a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23ff398:	2301      	movs	r3, #1
}
 23ff39a:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff39c:	7123      	strb	r3, [r4, #4]
}
 23ff39e:	bd10      	pop	{r4, pc}

023ff3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23ff3a0:	b508      	push	{r3, lr}
    switch (state_) {
 23ff3a2:	7903      	ldrb	r3, [r0, #4]
 23ff3a4:	2b01      	cmp	r3, #1
 23ff3a6:	d002      	beq.n	23ff3ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23ff3a8:	2b02      	cmp	r3, #2
 23ff3aa:	d004      	beq.n	23ff3b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23ff3ac:	bd08      	pop	{r3, pc}
        write(',');
 23ff3ae:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23ff3b0:	f7ff ff3b 	bl	23ff22a <_ZN5spark10JSONWriter5writeEc>
}
 23ff3b4:	e7fa      	b.n	23ff3ac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23ff3b6:	213a      	movs	r1, #58	; 0x3a
 23ff3b8:	e7fa      	b.n	23ff3b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023ff3ba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23ff3ba:	b510      	push	{r4, lr}
 23ff3bc:	4604      	mov	r4, r0
    writeSeparator();
 23ff3be:	f7ff ffef 	bl	23ff3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23ff3c2:	4620      	mov	r0, r4
 23ff3c4:	217b      	movs	r1, #123	; 0x7b
 23ff3c6:	f7ff ff30 	bl	23ff22a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23ff3ca:	2300      	movs	r3, #0
}
 23ff3cc:	4620      	mov	r0, r4
    state_ = BEGIN;
 23ff3ce:	7123      	strb	r3, [r4, #4]
}
 23ff3d0:	bd10      	pop	{r4, pc}
	...

023ff3d4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23ff3d4:	b513      	push	{r0, r1, r4, lr}
 23ff3d6:	4604      	mov	r4, r0
 23ff3d8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23ff3da:	f7ff ffe1 	bl	23ff3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23ff3de:	6823      	ldr	r3, [r4, #0]
 23ff3e0:	4620      	mov	r0, r4
 23ff3e2:	68db      	ldr	r3, [r3, #12]
 23ff3e4:	9a01      	ldr	r2, [sp, #4]
 23ff3e6:	4903      	ldr	r1, [pc, #12]	; (23ff3f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23ff3e8:	4798      	blx	r3
    state_ = NEXT;
 23ff3ea:	2301      	movs	r3, #1
}
 23ff3ec:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff3ee:	7123      	strb	r3, [r4, #4]
}
 23ff3f0:	b002      	add	sp, #8
 23ff3f2:	bd10      	pop	{r4, pc}
 23ff3f4:	023ffc37 	.word	0x023ffc37

023ff3f8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23ff3f8:	b513      	push	{r0, r1, r4, lr}
 23ff3fa:	4604      	mov	r4, r0
 23ff3fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23ff3fe:	f7ff ffcf 	bl	23ff3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23ff402:	6823      	ldr	r3, [r4, #0]
 23ff404:	4620      	mov	r0, r4
 23ff406:	68db      	ldr	r3, [r3, #12]
 23ff408:	9a01      	ldr	r2, [sp, #4]
 23ff40a:	4903      	ldr	r1, [pc, #12]	; (23ff418 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23ff40c:	4798      	blx	r3
    state_ = NEXT;
 23ff40e:	2301      	movs	r3, #1
}
 23ff410:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff412:	7123      	strb	r3, [r4, #4]
}
 23ff414:	b002      	add	sp, #8
 23ff416:	bd10      	pop	{r4, pc}
 23ff418:	023ffe30 	.word	0x023ffe30

023ff41c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23ff41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff420:	460d      	mov	r5, r1
 23ff422:	4690      	mov	r8, r2
    write('"');
 23ff424:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23ff426:	4604      	mov	r4, r0
 23ff428:	462f      	mov	r7, r5
    write('"');
 23ff42a:	f7ff fefe 	bl	23ff22a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23ff42e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23ff4d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23ff432:	44a8      	add	r8, r5
    while (s != end) {
 23ff434:	4547      	cmp	r7, r8
 23ff436:	46ba      	mov	sl, r7
 23ff438:	d03d      	beq.n	23ff4b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23ff43a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23ff43e:	2e22      	cmp	r6, #34	; 0x22
 23ff440:	d006      	beq.n	23ff450 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23ff442:	2e5c      	cmp	r6, #92	; 0x5c
 23ff444:	d004      	beq.n	23ff450 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23ff446:	4630      	mov	r0, r6
 23ff448:	f000 f9d8 	bl	23ff7fc <isprint>
 23ff44c:	2800      	cmp	r0, #0
 23ff44e:	d1f1      	bne.n	23ff434 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23ff450:	6823      	ldr	r3, [r4, #0]
 23ff452:	4629      	mov	r1, r5
 23ff454:	4620      	mov	r0, r4
 23ff456:	689b      	ldr	r3, [r3, #8]
 23ff458:	ebaa 0205 	sub.w	r2, sl, r5
 23ff45c:	4798      	blx	r3
            write('\\');
 23ff45e:	215c      	movs	r1, #92	; 0x5c
 23ff460:	4620      	mov	r0, r4
 23ff462:	f7ff fee2 	bl	23ff22a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23ff466:	2e0d      	cmp	r6, #13
 23ff468:	d80a      	bhi.n	23ff480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23ff46a:	2e07      	cmp	r6, #7
 23ff46c:	d91c      	bls.n	23ff4a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23ff46e:	f1a6 0308 	sub.w	r3, r6, #8
 23ff472:	2b05      	cmp	r3, #5
 23ff474:	d818      	bhi.n	23ff4a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23ff476:	e8df f003 	tbb	[pc, r3]
 23ff47a:	0f0d      	.short	0x0f0d
 23ff47c:	15131711 	.word	0x15131711
 23ff480:	2e22      	cmp	r6, #34	; 0x22
 23ff482:	d001      	beq.n	23ff488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23ff484:	2e5c      	cmp	r6, #92	; 0x5c
 23ff486:	d10f      	bne.n	23ff4a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23ff488:	4631      	mov	r1, r6
                write('b');
 23ff48a:	4620      	mov	r0, r4
 23ff48c:	f7ff fecd 	bl	23ff22a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23ff490:	463d      	mov	r5, r7
    while (s != end) {
 23ff492:	e7cf      	b.n	23ff434 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23ff494:	2162      	movs	r1, #98	; 0x62
 23ff496:	e7f8      	b.n	23ff48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23ff498:	2174      	movs	r1, #116	; 0x74
 23ff49a:	e7f6      	b.n	23ff48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23ff49c:	216e      	movs	r1, #110	; 0x6e
 23ff49e:	e7f4      	b.n	23ff48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23ff4a0:	2166      	movs	r1, #102	; 0x66
 23ff4a2:	e7f2      	b.n	23ff48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23ff4a4:	2172      	movs	r1, #114	; 0x72
 23ff4a6:	e7f0      	b.n	23ff48a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23ff4a8:	6823      	ldr	r3, [r4, #0]
 23ff4aa:	4632      	mov	r2, r6
 23ff4ac:	4649      	mov	r1, r9
 23ff4ae:	4620      	mov	r0, r4
 23ff4b0:	68db      	ldr	r3, [r3, #12]
 23ff4b2:	4798      	blx	r3
                break;
 23ff4b4:	e7ec      	b.n	23ff490 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23ff4b6:	42bd      	cmp	r5, r7
 23ff4b8:	d005      	beq.n	23ff4c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23ff4ba:	6823      	ldr	r3, [r4, #0]
 23ff4bc:	4629      	mov	r1, r5
 23ff4be:	4620      	mov	r0, r4
 23ff4c0:	689b      	ldr	r3, [r3, #8]
 23ff4c2:	1b7a      	subs	r2, r7, r5
 23ff4c4:	4798      	blx	r3
    }
    write('"');
 23ff4c6:	2122      	movs	r1, #34	; 0x22
 23ff4c8:	4620      	mov	r0, r4
 23ff4ca:	f7ff feae 	bl	23ff22a <_ZN5spark10JSONWriter5writeEc>
}
 23ff4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff4d2:	bf00      	nop
 23ff4d4:	023ffe33 	.word	0x023ffe33

023ff4d8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23ff4d8:	b513      	push	{r0, r1, r4, lr}
 23ff4da:	4604      	mov	r4, r0
 23ff4dc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23ff4e0:	f7ff ff5e 	bl	23ff3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23ff4e4:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff4e8:	4620      	mov	r0, r4
 23ff4ea:	f7ff ff97 	bl	23ff41c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23ff4ee:	2302      	movs	r3, #2
}
 23ff4f0:	4620      	mov	r0, r4
    state_ = VALUE;
 23ff4f2:	7123      	strb	r3, [r4, #4]
}
 23ff4f4:	b002      	add	sp, #8
 23ff4f6:	bd10      	pop	{r4, pc}

023ff4f8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23ff4f8:	b513      	push	{r0, r1, r4, lr}
 23ff4fa:	4604      	mov	r4, r0
 23ff4fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23ff500:	f7ff ff4e 	bl	23ff3a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23ff504:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff508:	4620      	mov	r0, r4
 23ff50a:	f7ff ff87 	bl	23ff41c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23ff50e:	2301      	movs	r3, #1
}
 23ff510:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff512:	7123      	strb	r3, [r4, #4]
}
 23ff514:	b002      	add	sp, #8
 23ff516:	bd10      	pop	{r4, pc}

023ff518 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff518:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff51a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff51c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff51e:	d902      	bls.n	23ff526 <pinAvailable+0xe>
    return false;
 23ff520:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff522:	b003      	add	sp, #12
 23ff524:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff526:	f1a0 030f 	sub.w	r3, r0, #15
 23ff52a:	2b02      	cmp	r3, #2
 23ff52c:	d90b      	bls.n	23ff546 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff52e:	2801      	cmp	r0, #1
 23ff530:	d821      	bhi.n	23ff576 <pinAvailable+0x5e>
 23ff532:	f000 f935 	bl	23ff7a0 <_Z19__fetch_global_Wirev>
 23ff536:	2100      	movs	r1, #0
 23ff538:	7c00      	ldrb	r0, [r0, #16]
 23ff53a:	f7fd fe71 	bl	23fd220 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff53e:	f080 0001 	eor.w	r0, r0, #1
 23ff542:	b2c0      	uxtb	r0, r0
 23ff544:	e7ed      	b.n	23ff522 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff546:	4d11      	ldr	r5, [pc, #68]	; (23ff58c <pinAvailable+0x74>)
 23ff548:	e8d5 1f8f 	ldab	r1, [r5]
 23ff54c:	f011 0101 	ands.w	r1, r1, #1
 23ff550:	d10b      	bne.n	23ff56a <pinAvailable+0x52>
 23ff552:	4628      	mov	r0, r5
 23ff554:	9101      	str	r1, [sp, #4]
 23ff556:	f7fd f9af 	bl	23fc8b8 <__cxa_guard_acquire>
 23ff55a:	9901      	ldr	r1, [sp, #4]
 23ff55c:	b128      	cbz	r0, 23ff56a <pinAvailable+0x52>
 23ff55e:	480c      	ldr	r0, [pc, #48]	; (23ff590 <pinAvailable+0x78>)
 23ff560:	f7fe f907 	bl	23fd772 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff564:	4628      	mov	r0, r5
 23ff566:	f7fd f9ac 	bl	23fc8c2 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff56a:	4b09      	ldr	r3, [pc, #36]	; (23ff590 <pinAvailable+0x78>)
 23ff56c:	7818      	ldrb	r0, [r3, #0]
 23ff56e:	f7fd fe8f 	bl	23fd290 <hal_spi_is_enabled>
 23ff572:	2800      	cmp	r0, #0
 23ff574:	d1d4      	bne.n	23ff520 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff576:	3c08      	subs	r4, #8
 23ff578:	2c01      	cmp	r4, #1
 23ff57a:	d805      	bhi.n	23ff588 <pinAvailable+0x70>
 23ff57c:	f000 f864 	bl	23ff648 <_Z22__fetch_global_Serial1v>
 23ff580:	7c00      	ldrb	r0, [r0, #16]
 23ff582:	f7fd fda5 	bl	23fd0d0 <hal_usart_is_enabled>
 23ff586:	e7da      	b.n	23ff53e <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff588:	2001      	movs	r0, #1
 23ff58a:	e7ca      	b.n	23ff522 <pinAvailable+0xa>
 23ff58c:	1007aef8 	.word	0x1007aef8
 23ff590:	1007aefc 	.word	0x1007aefc

023ff594 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff594:	281b      	cmp	r0, #27
{
 23ff596:	b538      	push	{r3, r4, r5, lr}
 23ff598:	4604      	mov	r4, r0
 23ff59a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff59c:	d80a      	bhi.n	23ff5b4 <pinMode+0x20>
 23ff59e:	29ff      	cmp	r1, #255	; 0xff
 23ff5a0:	d008      	beq.n	23ff5b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff5a2:	f7ff ffb9 	bl	23ff518 <pinAvailable>
 23ff5a6:	b128      	cbz	r0, 23ff5b4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff5a8:	4629      	mov	r1, r5
 23ff5aa:	4620      	mov	r0, r4
}
 23ff5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff5b0:	f7fd bc92 	b.w	23fced8 <hal_gpio_mode>
}
 23ff5b4:	bd38      	pop	{r3, r4, r5, pc}

023ff5b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff5b6:	b538      	push	{r3, r4, r5, lr}
 23ff5b8:	4604      	mov	r4, r0
 23ff5ba:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff5bc:	f7fd fc9a 	bl	23fcef4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff5c0:	28ff      	cmp	r0, #255	; 0xff
 23ff5c2:	d010      	beq.n	23ff5e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff5c4:	2806      	cmp	r0, #6
 23ff5c6:	d804      	bhi.n	23ff5d2 <digitalWrite+0x1c>
 23ff5c8:	234d      	movs	r3, #77	; 0x4d
 23ff5ca:	fa23 f000 	lsr.w	r0, r3, r0
 23ff5ce:	07c3      	lsls	r3, r0, #31
 23ff5d0:	d409      	bmi.n	23ff5e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff5d2:	4620      	mov	r0, r4
 23ff5d4:	f7ff ffa0 	bl	23ff518 <pinAvailable>
 23ff5d8:	b128      	cbz	r0, 23ff5e6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff5da:	4629      	mov	r1, r5
 23ff5dc:	4620      	mov	r0, r4
}
 23ff5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff5e2:	f7fd bc95 	b.w	23fcf10 <hal_gpio_write>
}
 23ff5e6:	bd38      	pop	{r3, r4, r5, pc}

023ff5e8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff5e8:	4770      	bx	lr
	...

023ff5ec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff5ec:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff5ee:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff5f0:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff5f2:	462a      	mov	r2, r5
 23ff5f4:	2100      	movs	r1, #0
 23ff5f6:	f000 f930 	bl	23ff85a <memset>
 23ff5fa:	8025      	strh	r5, [r4, #0]
 23ff5fc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff5fe:	4907      	ldr	r1, [pc, #28]	; (23ff61c <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff600:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff602:	8125      	strh	r5, [r4, #8]
 23ff604:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff606:	f000 f8f1 	bl	23ff7ec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff60a:	4904      	ldr	r1, [pc, #16]	; (23ff61c <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff60c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff60e:	4628      	mov	r0, r5
 23ff610:	f000 f8ec 	bl	23ff7ec <_ZnajRKSt9nothrow_t>
    };
 23ff614:	60e0      	str	r0, [r4, #12]
}
 23ff616:	4620      	mov	r0, r4
 23ff618:	bd38      	pop	{r3, r4, r5, pc}
 23ff61a:	bf00      	nop
 23ff61c:	023ffe39 	.word	0x023ffe39

023ff620 <__tcf_2>:
 23ff620:	4770      	bx	lr

023ff622 <__tcf_1>:
 23ff622:	4770      	bx	lr

023ff624 <_Z20acquireSerial1Bufferv>:
{
 23ff624:	b510      	push	{r4, lr}
 23ff626:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff628:	f7ff ffe0 	bl	23ff5ec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff62c:	4620      	mov	r0, r4
 23ff62e:	bd10      	pop	{r4, pc}

023ff630 <_Z20acquireSerial2Bufferv>:
 23ff630:	b510      	push	{r4, lr}
 23ff632:	4604      	mov	r4, r0
 23ff634:	f7ff ffda 	bl	23ff5ec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff638:	4620      	mov	r0, r4
 23ff63a:	bd10      	pop	{r4, pc}

023ff63c <_Z20acquireSerial3Bufferv>:
 23ff63c:	b510      	push	{r4, lr}
 23ff63e:	4604      	mov	r4, r0
 23ff640:	f7ff ffd4 	bl	23ff5ec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff644:	4620      	mov	r0, r4
 23ff646:	bd10      	pop	{r4, pc}

023ff648 <_Z22__fetch_global_Serial1v>:
{
 23ff648:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff64a:	4d0e      	ldr	r5, [pc, #56]	; (23ff684 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff64c:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff64e:	e8d5 1f8f 	ldab	r1, [r5]
 23ff652:	f011 0401 	ands.w	r4, r1, #1
 23ff656:	d111      	bne.n	23ff67c <_Z22__fetch_global_Serial1v+0x34>
 23ff658:	4628      	mov	r0, r5
 23ff65a:	f7fd f92d 	bl	23fc8b8 <__cxa_guard_acquire>
 23ff65e:	b168      	cbz	r0, 23ff67c <_Z22__fetch_global_Serial1v+0x34>
 23ff660:	a801      	add	r0, sp, #4
 23ff662:	f7ff ffdf 	bl	23ff624 <_Z20acquireSerial1Bufferv>
 23ff666:	4621      	mov	r1, r4
 23ff668:	aa01      	add	r2, sp, #4
 23ff66a:	4807      	ldr	r0, [pc, #28]	; (23ff688 <_Z22__fetch_global_Serial1v+0x40>)
 23ff66c:	f7ff fbb6 	bl	23feddc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff670:	4628      	mov	r0, r5
 23ff672:	f7fd f926 	bl	23fc8c2 <__cxa_guard_release>
 23ff676:	4805      	ldr	r0, [pc, #20]	; (23ff68c <_Z22__fetch_global_Serial1v+0x44>)
 23ff678:	f000 f8ba 	bl	23ff7f0 <atexit>
    return serial1;
}
 23ff67c:	4802      	ldr	r0, [pc, #8]	; (23ff688 <_Z22__fetch_global_Serial1v+0x40>)
 23ff67e:	b007      	add	sp, #28
 23ff680:	bd30      	pop	{r4, r5, pc}
 23ff682:	bf00      	nop
 23ff684:	1007af04 	.word	0x1007af04
 23ff688:	1007af10 	.word	0x1007af10
 23ff68c:	023ff5e9 	.word	0x023ff5e9

023ff690 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff690:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff692:	4c0d      	ldr	r4, [pc, #52]	; (23ff6c8 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff694:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff696:	e8d4 3f8f 	ldab	r3, [r4]
 23ff69a:	07db      	lsls	r3, r3, #31
 23ff69c:	d411      	bmi.n	23ff6c2 <_Z22__fetch_global_Serial2v+0x32>
 23ff69e:	4620      	mov	r0, r4
 23ff6a0:	f7fd f90a 	bl	23fc8b8 <__cxa_guard_acquire>
 23ff6a4:	b168      	cbz	r0, 23ff6c2 <_Z22__fetch_global_Serial2v+0x32>
 23ff6a6:	a801      	add	r0, sp, #4
 23ff6a8:	f7ff ffc2 	bl	23ff630 <_Z20acquireSerial2Bufferv>
 23ff6ac:	2101      	movs	r1, #1
 23ff6ae:	aa01      	add	r2, sp, #4
 23ff6b0:	4806      	ldr	r0, [pc, #24]	; (23ff6cc <_Z22__fetch_global_Serial2v+0x3c>)
 23ff6b2:	f7ff fb93 	bl	23feddc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff6b6:	4620      	mov	r0, r4
 23ff6b8:	f7fd f903 	bl	23fc8c2 <__cxa_guard_release>
 23ff6bc:	4804      	ldr	r0, [pc, #16]	; (23ff6d0 <_Z22__fetch_global_Serial2v+0x40>)
 23ff6be:	f000 f897 	bl	23ff7f0 <atexit>
	return serial2;
}
 23ff6c2:	4802      	ldr	r0, [pc, #8]	; (23ff6cc <_Z22__fetch_global_Serial2v+0x3c>)
 23ff6c4:	b006      	add	sp, #24
 23ff6c6:	bd10      	pop	{r4, pc}
 23ff6c8:	1007af08 	.word	0x1007af08
 23ff6cc:	1007af24 	.word	0x1007af24
 23ff6d0:	023ff623 	.word	0x023ff623

023ff6d4 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff6d4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff6d6:	f7ff ffdb 	bl	23ff690 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff6da:	4b07      	ldr	r3, [pc, #28]	; (23ff6f8 <_Z15serialEventRun2v+0x24>)
 23ff6dc:	4604      	mov	r4, r0
 23ff6de:	b153      	cbz	r3, 23ff6f6 <_Z15serialEventRun2v+0x22>
 23ff6e0:	f7ff fb9a 	bl	23fee18 <_ZN11USARTSerial9isEnabledEv>
 23ff6e4:	b138      	cbz	r0, 23ff6f6 <_Z15serialEventRun2v+0x22>
 23ff6e6:	6823      	ldr	r3, [r4, #0]
 23ff6e8:	4620      	mov	r0, r4
 23ff6ea:	691b      	ldr	r3, [r3, #16]
 23ff6ec:	4798      	blx	r3
 23ff6ee:	2800      	cmp	r0, #0
 23ff6f0:	dd01      	ble.n	23ff6f6 <_Z15serialEventRun2v+0x22>
        handler();
 23ff6f2:	e000      	b.n	23ff6f6 <_Z15serialEventRun2v+0x22>
 23ff6f4:	bf00      	nop
}
 23ff6f6:	bd10      	pop	{r4, pc}
 23ff6f8:	00000000 	.word	0x00000000

023ff6fc <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff6fc:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff6fe:	4c0d      	ldr	r4, [pc, #52]	; (23ff734 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff700:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff702:	e8d4 3f8f 	ldab	r3, [r4]
 23ff706:	07db      	lsls	r3, r3, #31
 23ff708:	d411      	bmi.n	23ff72e <_Z22__fetch_global_Serial3v+0x32>
 23ff70a:	4620      	mov	r0, r4
 23ff70c:	f7fd f8d4 	bl	23fc8b8 <__cxa_guard_acquire>
 23ff710:	b168      	cbz	r0, 23ff72e <_Z22__fetch_global_Serial3v+0x32>
 23ff712:	a801      	add	r0, sp, #4
 23ff714:	f7ff ff92 	bl	23ff63c <_Z20acquireSerial3Bufferv>
 23ff718:	2102      	movs	r1, #2
 23ff71a:	aa01      	add	r2, sp, #4
 23ff71c:	4806      	ldr	r0, [pc, #24]	; (23ff738 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff71e:	f7ff fb5d 	bl	23feddc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff722:	4620      	mov	r0, r4
 23ff724:	f7fd f8cd 	bl	23fc8c2 <__cxa_guard_release>
 23ff728:	4804      	ldr	r0, [pc, #16]	; (23ff73c <_Z22__fetch_global_Serial3v+0x40>)
 23ff72a:	f000 f861 	bl	23ff7f0 <atexit>
	return serial3;
}
 23ff72e:	4802      	ldr	r0, [pc, #8]	; (23ff738 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff730:	b006      	add	sp, #24
 23ff732:	bd10      	pop	{r4, pc}
 23ff734:	1007af0c 	.word	0x1007af0c
 23ff738:	1007af38 	.word	0x1007af38
 23ff73c:	023ff621 	.word	0x023ff621

023ff740 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff740:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff742:	f7ff ffdb 	bl	23ff6fc <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff746:	4b07      	ldr	r3, [pc, #28]	; (23ff764 <_Z15serialEventRun3v+0x24>)
 23ff748:	4604      	mov	r4, r0
 23ff74a:	b153      	cbz	r3, 23ff762 <_Z15serialEventRun3v+0x22>
 23ff74c:	f7ff fb64 	bl	23fee18 <_ZN11USARTSerial9isEnabledEv>
 23ff750:	b138      	cbz	r0, 23ff762 <_Z15serialEventRun3v+0x22>
 23ff752:	6823      	ldr	r3, [r4, #0]
 23ff754:	4620      	mov	r0, r4
 23ff756:	691b      	ldr	r3, [r3, #16]
 23ff758:	4798      	blx	r3
 23ff75a:	2800      	cmp	r0, #0
 23ff75c:	dd01      	ble.n	23ff762 <_Z15serialEventRun3v+0x22>
        handler();
 23ff75e:	e000      	b.n	23ff762 <_Z15serialEventRun3v+0x22>
 23ff760:	bf00      	nop
}
 23ff762:	bd10      	pop	{r4, pc}
 23ff764:	00000000 	.word	0x00000000

023ff768 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff768:	4770      	bx	lr
	...

023ff76c <_Z17acquireWireBufferv>:
{
 23ff76c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff76e:	4b0a      	ldr	r3, [pc, #40]	; (23ff798 <_Z17acquireWireBufferv+0x2c>)
{
 23ff770:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff772:	6003      	str	r3, [r0, #0]
 23ff774:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff776:	4909      	ldr	r1, [pc, #36]	; (23ff79c <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff778:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff77a:	2020      	movs	r0, #32
 23ff77c:	f000 f836 	bl	23ff7ec <_ZnajRKSt9nothrow_t>
	};
 23ff780:	2520      	movs	r5, #32
 23ff782:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff784:	4905      	ldr	r1, [pc, #20]	; (23ff79c <_Z17acquireWireBufferv+0x30>)
 23ff786:	4628      	mov	r0, r5
	};
 23ff788:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff78a:	f000 f82f 	bl	23ff7ec <_ZnajRKSt9nothrow_t>
	};
 23ff78e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff792:	4620      	mov	r0, r4
 23ff794:	bd38      	pop	{r3, r4, r5, pc}
 23ff796:	bf00      	nop
 23ff798:	00010018 	.word	0x00010018
 23ff79c:	023ffe39 	.word	0x023ffe39

023ff7a0 <_Z19__fetch_global_Wirev>:
{
 23ff7a0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff7a2:	4d0e      	ldr	r5, [pc, #56]	; (23ff7dc <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff7a4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff7a6:	e8d5 1f8f 	ldab	r1, [r5]
 23ff7aa:	f011 0401 	ands.w	r4, r1, #1
 23ff7ae:	d111      	bne.n	23ff7d4 <_Z19__fetch_global_Wirev+0x34>
 23ff7b0:	4628      	mov	r0, r5
 23ff7b2:	f7fd f881 	bl	23fc8b8 <__cxa_guard_acquire>
 23ff7b6:	b168      	cbz	r0, 23ff7d4 <_Z19__fetch_global_Wirev+0x34>
 23ff7b8:	4668      	mov	r0, sp
 23ff7ba:	f7ff ffd7 	bl	23ff76c <_Z17acquireWireBufferv>
 23ff7be:	466a      	mov	r2, sp
 23ff7c0:	4621      	mov	r1, r4
 23ff7c2:	4807      	ldr	r0, [pc, #28]	; (23ff7e0 <_Z19__fetch_global_Wirev+0x40>)
 23ff7c4:	f7ff fb68 	bl	23fee98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff7c8:	4628      	mov	r0, r5
 23ff7ca:	f7fd f87a 	bl	23fc8c2 <__cxa_guard_release>
 23ff7ce:	4805      	ldr	r0, [pc, #20]	; (23ff7e4 <_Z19__fetch_global_Wirev+0x44>)
 23ff7d0:	f000 f80e 	bl	23ff7f0 <atexit>
	return wire;
}
 23ff7d4:	4802      	ldr	r0, [pc, #8]	; (23ff7e0 <_Z19__fetch_global_Wirev+0x40>)
 23ff7d6:	b007      	add	sp, #28
 23ff7d8:	bd30      	pop	{r4, r5, pc}
 23ff7da:	bf00      	nop
 23ff7dc:	1007af50 	.word	0x1007af50
 23ff7e0:	1007af54 	.word	0x1007af54
 23ff7e4:	023ff769 	.word	0x023ff769

023ff7e8 <_ZnwjRKSt9nothrow_t>:
 23ff7e8:	f7fd b853 	b.w	23fc892 <_Znwj>

023ff7ec <_ZnajRKSt9nothrow_t>:
 23ff7ec:	f7fd b853 	b.w	23fc896 <_Znaj>

023ff7f0 <atexit>:
 23ff7f0:	2300      	movs	r3, #0
 23ff7f2:	4601      	mov	r1, r0
 23ff7f4:	461a      	mov	r2, r3
 23ff7f6:	4618      	mov	r0, r3
 23ff7f8:	f000 b93a 	b.w	23ffa70 <__register_exitproc>

023ff7fc <isprint>:
 23ff7fc:	4b02      	ldr	r3, [pc, #8]	; (23ff808 <isprint+0xc>)
 23ff7fe:	4418      	add	r0, r3
 23ff800:	7840      	ldrb	r0, [r0, #1]
 23ff802:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff806:	4770      	bx	lr
 23ff808:	023ffece 	.word	0x023ffece

023ff80c <memcpy>:
 23ff80c:	440a      	add	r2, r1
 23ff80e:	1e43      	subs	r3, r0, #1
 23ff810:	4291      	cmp	r1, r2
 23ff812:	d100      	bne.n	23ff816 <memcpy+0xa>
 23ff814:	4770      	bx	lr
 23ff816:	b510      	push	{r4, lr}
 23ff818:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff81c:	4291      	cmp	r1, r2
 23ff81e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff822:	d1f9      	bne.n	23ff818 <memcpy+0xc>
 23ff824:	bd10      	pop	{r4, pc}

023ff826 <memmove>:
 23ff826:	4288      	cmp	r0, r1
 23ff828:	b510      	push	{r4, lr}
 23ff82a:	eb01 0402 	add.w	r4, r1, r2
 23ff82e:	d902      	bls.n	23ff836 <memmove+0x10>
 23ff830:	4284      	cmp	r4, r0
 23ff832:	4623      	mov	r3, r4
 23ff834:	d807      	bhi.n	23ff846 <memmove+0x20>
 23ff836:	1e43      	subs	r3, r0, #1
 23ff838:	42a1      	cmp	r1, r4
 23ff83a:	d008      	beq.n	23ff84e <memmove+0x28>
 23ff83c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff840:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff844:	e7f8      	b.n	23ff838 <memmove+0x12>
 23ff846:	4402      	add	r2, r0
 23ff848:	4601      	mov	r1, r0
 23ff84a:	428a      	cmp	r2, r1
 23ff84c:	d100      	bne.n	23ff850 <memmove+0x2a>
 23ff84e:	bd10      	pop	{r4, pc}
 23ff850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff854:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff858:	e7f7      	b.n	23ff84a <memmove+0x24>

023ff85a <memset>:
 23ff85a:	4402      	add	r2, r0
 23ff85c:	4603      	mov	r3, r0
 23ff85e:	4293      	cmp	r3, r2
 23ff860:	d100      	bne.n	23ff864 <memset+0xa>
 23ff862:	4770      	bx	lr
 23ff864:	f803 1b01 	strb.w	r1, [r3], #1
 23ff868:	e7f9      	b.n	23ff85e <memset+0x4>
	...

023ff86c <srand>:
 23ff86c:	b538      	push	{r3, r4, r5, lr}
 23ff86e:	4b10      	ldr	r3, [pc, #64]	; (23ff8b0 <srand+0x44>)
 23ff870:	4604      	mov	r4, r0
 23ff872:	681d      	ldr	r5, [r3, #0]
 23ff874:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff876:	b9b3      	cbnz	r3, 23ff8a6 <srand+0x3a>
 23ff878:	2018      	movs	r0, #24
 23ff87a:	f7fd febb 	bl	23fd5f4 <malloc>
 23ff87e:	4602      	mov	r2, r0
 23ff880:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff882:	b920      	cbnz	r0, 23ff88e <srand+0x22>
 23ff884:	4b0b      	ldr	r3, [pc, #44]	; (23ff8b4 <srand+0x48>)
 23ff886:	2142      	movs	r1, #66	; 0x42
 23ff888:	480b      	ldr	r0, [pc, #44]	; (23ff8b8 <srand+0x4c>)
 23ff88a:	f7fd fef9 	bl	23fd680 <__assert_func>
 23ff88e:	490b      	ldr	r1, [pc, #44]	; (23ff8bc <srand+0x50>)
 23ff890:	4b0b      	ldr	r3, [pc, #44]	; (23ff8c0 <srand+0x54>)
 23ff892:	e9c0 1300 	strd	r1, r3, [r0]
 23ff896:	4b0b      	ldr	r3, [pc, #44]	; (23ff8c4 <srand+0x58>)
 23ff898:	2100      	movs	r1, #0
 23ff89a:	6083      	str	r3, [r0, #8]
 23ff89c:	230b      	movs	r3, #11
 23ff89e:	8183      	strh	r3, [r0, #12]
 23ff8a0:	2001      	movs	r0, #1
 23ff8a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff8a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff8a8:	2200      	movs	r2, #0
 23ff8aa:	611c      	str	r4, [r3, #16]
 23ff8ac:	615a      	str	r2, [r3, #20]
 23ff8ae:	bd38      	pop	{r3, r4, r5, pc}
 23ff8b0:	1007ad74 	.word	0x1007ad74
 23ff8b4:	023ffe3a 	.word	0x023ffe3a
 23ff8b8:	023ffe51 	.word	0x023ffe51
 23ff8bc:	abcd330e 	.word	0xabcd330e
 23ff8c0:	e66d1234 	.word	0xe66d1234
 23ff8c4:	0005deec 	.word	0x0005deec

023ff8c8 <strchr>:
 23ff8c8:	b2c9      	uxtb	r1, r1
 23ff8ca:	4603      	mov	r3, r0
 23ff8cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff8d0:	b11a      	cbz	r2, 23ff8da <strchr+0x12>
 23ff8d2:	428a      	cmp	r2, r1
 23ff8d4:	d1f9      	bne.n	23ff8ca <strchr+0x2>
 23ff8d6:	4618      	mov	r0, r3
 23ff8d8:	4770      	bx	lr
 23ff8da:	2900      	cmp	r1, #0
 23ff8dc:	bf18      	it	ne
 23ff8de:	2300      	movne	r3, #0
 23ff8e0:	e7f9      	b.n	23ff8d6 <strchr+0xe>

023ff8e2 <strchrnul>:
 23ff8e2:	b510      	push	{r4, lr}
 23ff8e4:	4604      	mov	r4, r0
 23ff8e6:	f7ff ffef 	bl	23ff8c8 <strchr>
 23ff8ea:	b918      	cbnz	r0, 23ff8f4 <strchrnul+0x12>
 23ff8ec:	4620      	mov	r0, r4
 23ff8ee:	f7fc ffab 	bl	23fc848 <strlen>
 23ff8f2:	4420      	add	r0, r4
 23ff8f4:	bd10      	pop	{r4, pc}

023ff8f6 <strcpy>:
 23ff8f6:	4603      	mov	r3, r0
 23ff8f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff8fc:	f803 2b01 	strb.w	r2, [r3], #1
 23ff900:	2a00      	cmp	r2, #0
 23ff902:	d1f9      	bne.n	23ff8f8 <strcpy+0x2>
 23ff904:	4770      	bx	lr

023ff906 <strncmp>:
 23ff906:	b510      	push	{r4, lr}
 23ff908:	b17a      	cbz	r2, 23ff92a <strncmp+0x24>
 23ff90a:	4603      	mov	r3, r0
 23ff90c:	3901      	subs	r1, #1
 23ff90e:	1884      	adds	r4, r0, r2
 23ff910:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff914:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff918:	4290      	cmp	r0, r2
 23ff91a:	d101      	bne.n	23ff920 <strncmp+0x1a>
 23ff91c:	42a3      	cmp	r3, r4
 23ff91e:	d101      	bne.n	23ff924 <strncmp+0x1e>
 23ff920:	1a80      	subs	r0, r0, r2
 23ff922:	bd10      	pop	{r4, pc}
 23ff924:	2800      	cmp	r0, #0
 23ff926:	d1f3      	bne.n	23ff910 <strncmp+0xa>
 23ff928:	e7fa      	b.n	23ff920 <strncmp+0x1a>
 23ff92a:	4610      	mov	r0, r2
 23ff92c:	e7f9      	b.n	23ff922 <strncmp+0x1c>

023ff92e <strrchr>:
 23ff92e:	b538      	push	{r3, r4, r5, lr}
 23ff930:	4603      	mov	r3, r0
 23ff932:	460c      	mov	r4, r1
 23ff934:	b969      	cbnz	r1, 23ff952 <strrchr+0x24>
 23ff936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff93a:	f7ff bfc5 	b.w	23ff8c8 <strchr>
 23ff93e:	1c43      	adds	r3, r0, #1
 23ff940:	4605      	mov	r5, r0
 23ff942:	4621      	mov	r1, r4
 23ff944:	4618      	mov	r0, r3
 23ff946:	f7ff ffbf 	bl	23ff8c8 <strchr>
 23ff94a:	2800      	cmp	r0, #0
 23ff94c:	d1f7      	bne.n	23ff93e <strrchr+0x10>
 23ff94e:	4628      	mov	r0, r5
 23ff950:	bd38      	pop	{r3, r4, r5, pc}
 23ff952:	2500      	movs	r5, #0
 23ff954:	e7f5      	b.n	23ff942 <strrchr+0x14>
	...

023ff958 <_strtol_l.constprop.0>:
 23ff958:	2b01      	cmp	r3, #1
 23ff95a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff95e:	d001      	beq.n	23ff964 <_strtol_l.constprop.0+0xc>
 23ff960:	2b24      	cmp	r3, #36	; 0x24
 23ff962:	d906      	bls.n	23ff972 <_strtol_l.constprop.0+0x1a>
 23ff964:	f7fd fe7e 	bl	23fd664 <__errno>
 23ff968:	2316      	movs	r3, #22
 23ff96a:	6003      	str	r3, [r0, #0]
 23ff96c:	2000      	movs	r0, #0
 23ff96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff972:	460d      	mov	r5, r1
 23ff974:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ffa58 <_strtol_l.constprop.0+0x100>
 23ff978:	462e      	mov	r6, r5
 23ff97a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff97e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff982:	f017 0708 	ands.w	r7, r7, #8
 23ff986:	d1f7      	bne.n	23ff978 <_strtol_l.constprop.0+0x20>
 23ff988:	2c2d      	cmp	r4, #45	; 0x2d
 23ff98a:	d132      	bne.n	23ff9f2 <_strtol_l.constprop.0+0x9a>
 23ff98c:	782c      	ldrb	r4, [r5, #0]
 23ff98e:	2701      	movs	r7, #1
 23ff990:	1cb5      	adds	r5, r6, #2
 23ff992:	2b00      	cmp	r3, #0
 23ff994:	d05b      	beq.n	23ffa4e <_strtol_l.constprop.0+0xf6>
 23ff996:	2b10      	cmp	r3, #16
 23ff998:	d109      	bne.n	23ff9ae <_strtol_l.constprop.0+0x56>
 23ff99a:	2c30      	cmp	r4, #48	; 0x30
 23ff99c:	d107      	bne.n	23ff9ae <_strtol_l.constprop.0+0x56>
 23ff99e:	782c      	ldrb	r4, [r5, #0]
 23ff9a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff9a4:	2c58      	cmp	r4, #88	; 0x58
 23ff9a6:	d14d      	bne.n	23ffa44 <_strtol_l.constprop.0+0xec>
 23ff9a8:	786c      	ldrb	r4, [r5, #1]
 23ff9aa:	2310      	movs	r3, #16
 23ff9ac:	3502      	adds	r5, #2
 23ff9ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff9b2:	f04f 0c00 	mov.w	ip, #0
 23ff9b6:	f108 38ff 	add.w	r8, r8, #4294967295
 23ff9ba:	4666      	mov	r6, ip
 23ff9bc:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff9c0:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff9c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff9c8:	f1be 0f09 	cmp.w	lr, #9
 23ff9cc:	d816      	bhi.n	23ff9fc <_strtol_l.constprop.0+0xa4>
 23ff9ce:	4674      	mov	r4, lr
 23ff9d0:	42a3      	cmp	r3, r4
 23ff9d2:	dd24      	ble.n	23ffa1e <_strtol_l.constprop.0+0xc6>
 23ff9d4:	f1bc 0f00 	cmp.w	ip, #0
 23ff9d8:	db1e      	blt.n	23ffa18 <_strtol_l.constprop.0+0xc0>
 23ff9da:	45b1      	cmp	r9, r6
 23ff9dc:	d31c      	bcc.n	23ffa18 <_strtol_l.constprop.0+0xc0>
 23ff9de:	d101      	bne.n	23ff9e4 <_strtol_l.constprop.0+0x8c>
 23ff9e0:	45a2      	cmp	sl, r4
 23ff9e2:	db19      	blt.n	23ffa18 <_strtol_l.constprop.0+0xc0>
 23ff9e4:	fb06 4603 	mla	r6, r6, r3, r4
 23ff9e8:	f04f 0c01 	mov.w	ip, #1
 23ff9ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff9f0:	e7e8      	b.n	23ff9c4 <_strtol_l.constprop.0+0x6c>
 23ff9f2:	2c2b      	cmp	r4, #43	; 0x2b
 23ff9f4:	bf04      	itt	eq
 23ff9f6:	782c      	ldrbeq	r4, [r5, #0]
 23ff9f8:	1cb5      	addeq	r5, r6, #2
 23ff9fa:	e7ca      	b.n	23ff992 <_strtol_l.constprop.0+0x3a>
 23ff9fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ffa00:	f1be 0f19 	cmp.w	lr, #25
 23ffa04:	d801      	bhi.n	23ffa0a <_strtol_l.constprop.0+0xb2>
 23ffa06:	3c37      	subs	r4, #55	; 0x37
 23ffa08:	e7e2      	b.n	23ff9d0 <_strtol_l.constprop.0+0x78>
 23ffa0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ffa0e:	f1be 0f19 	cmp.w	lr, #25
 23ffa12:	d804      	bhi.n	23ffa1e <_strtol_l.constprop.0+0xc6>
 23ffa14:	3c57      	subs	r4, #87	; 0x57
 23ffa16:	e7db      	b.n	23ff9d0 <_strtol_l.constprop.0+0x78>
 23ffa18:	f04f 3cff 	mov.w	ip, #4294967295
 23ffa1c:	e7e6      	b.n	23ff9ec <_strtol_l.constprop.0+0x94>
 23ffa1e:	f1bc 0f00 	cmp.w	ip, #0
 23ffa22:	da05      	bge.n	23ffa30 <_strtol_l.constprop.0+0xd8>
 23ffa24:	2322      	movs	r3, #34	; 0x22
 23ffa26:	4646      	mov	r6, r8
 23ffa28:	6003      	str	r3, [r0, #0]
 23ffa2a:	b942      	cbnz	r2, 23ffa3e <_strtol_l.constprop.0+0xe6>
 23ffa2c:	4630      	mov	r0, r6
 23ffa2e:	e79e      	b.n	23ff96e <_strtol_l.constprop.0+0x16>
 23ffa30:	b107      	cbz	r7, 23ffa34 <_strtol_l.constprop.0+0xdc>
 23ffa32:	4276      	negs	r6, r6
 23ffa34:	2a00      	cmp	r2, #0
 23ffa36:	d0f9      	beq.n	23ffa2c <_strtol_l.constprop.0+0xd4>
 23ffa38:	f1bc 0f00 	cmp.w	ip, #0
 23ffa3c:	d000      	beq.n	23ffa40 <_strtol_l.constprop.0+0xe8>
 23ffa3e:	1e69      	subs	r1, r5, #1
 23ffa40:	6011      	str	r1, [r2, #0]
 23ffa42:	e7f3      	b.n	23ffa2c <_strtol_l.constprop.0+0xd4>
 23ffa44:	2430      	movs	r4, #48	; 0x30
 23ffa46:	2b00      	cmp	r3, #0
 23ffa48:	d1b1      	bne.n	23ff9ae <_strtol_l.constprop.0+0x56>
 23ffa4a:	2308      	movs	r3, #8
 23ffa4c:	e7af      	b.n	23ff9ae <_strtol_l.constprop.0+0x56>
 23ffa4e:	2c30      	cmp	r4, #48	; 0x30
 23ffa50:	d0a5      	beq.n	23ff99e <_strtol_l.constprop.0+0x46>
 23ffa52:	230a      	movs	r3, #10
 23ffa54:	e7ab      	b.n	23ff9ae <_strtol_l.constprop.0+0x56>
 23ffa56:	bf00      	nop
 23ffa58:	023ffecf 	.word	0x023ffecf

023ffa5c <strtol>:
 23ffa5c:	4613      	mov	r3, r2
 23ffa5e:	460a      	mov	r2, r1
 23ffa60:	4601      	mov	r1, r0
 23ffa62:	4802      	ldr	r0, [pc, #8]	; (23ffa6c <strtol+0x10>)
 23ffa64:	6800      	ldr	r0, [r0, #0]
 23ffa66:	f7ff bf77 	b.w	23ff958 <_strtol_l.constprop.0>
 23ffa6a:	bf00      	nop
 23ffa6c:	1007ad74 	.word	0x1007ad74

023ffa70 <__register_exitproc>:
 23ffa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffa74:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffb34 <__register_exitproc+0xc4>
 23ffa78:	4606      	mov	r6, r0
 23ffa7a:	461f      	mov	r7, r3
 23ffa7c:	460d      	mov	r5, r1
 23ffa7e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa82:	4691      	mov	r9, r2
 23ffa84:	f000 f858 	bl	23ffb38 <__retarget_lock_acquire_recursive>
 23ffa88:	4b26      	ldr	r3, [pc, #152]	; (23ffb24 <__register_exitproc+0xb4>)
 23ffa8a:	681c      	ldr	r4, [r3, #0]
 23ffa8c:	b934      	cbnz	r4, 23ffa9c <__register_exitproc+0x2c>
 23ffa8e:	4c26      	ldr	r4, [pc, #152]	; (23ffb28 <__register_exitproc+0xb8>)
 23ffa90:	601c      	str	r4, [r3, #0]
 23ffa92:	4b26      	ldr	r3, [pc, #152]	; (23ffb2c <__register_exitproc+0xbc>)
 23ffa94:	b113      	cbz	r3, 23ffa9c <__register_exitproc+0x2c>
 23ffa96:	681b      	ldr	r3, [r3, #0]
 23ffa98:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffa9c:	6863      	ldr	r3, [r4, #4]
 23ffa9e:	2b1f      	cmp	r3, #31
 23ffaa0:	dd07      	ble.n	23ffab2 <__register_exitproc+0x42>
 23ffaa2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffaa6:	f000 f849 	bl	23ffb3c <__retarget_lock_release_recursive>
 23ffaaa:	f04f 30ff 	mov.w	r0, #4294967295
 23ffaae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffab2:	b35e      	cbz	r6, 23ffb0c <__register_exitproc+0x9c>
 23ffab4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffab8:	b988      	cbnz	r0, 23ffade <__register_exitproc+0x6e>
 23ffaba:	4b1d      	ldr	r3, [pc, #116]	; (23ffb30 <__register_exitproc+0xc0>)
 23ffabc:	b923      	cbnz	r3, 23ffac8 <__register_exitproc+0x58>
 23ffabe:	f8d8 0000 	ldr.w	r0, [r8]
 23ffac2:	f000 f83a 	bl	23ffb3a <__retarget_lock_release>
 23ffac6:	e7f0      	b.n	23ffaaa <__register_exitproc+0x3a>
 23ffac8:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffacc:	f7fd fd92 	bl	23fd5f4 <malloc>
 23ffad0:	2800      	cmp	r0, #0
 23ffad2:	d0f4      	beq.n	23ffabe <__register_exitproc+0x4e>
 23ffad4:	2300      	movs	r3, #0
 23ffad6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffada:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffade:	6863      	ldr	r3, [r4, #4]
 23ffae0:	2201      	movs	r2, #1
 23ffae2:	2e02      	cmp	r6, #2
 23ffae4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffae8:	fa02 f203 	lsl.w	r2, r2, r3
 23ffaec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffaf0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffaf4:	ea43 0302 	orr.w	r3, r3, r2
 23ffaf8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffafc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffb00:	bf02      	ittt	eq
 23ffb02:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffb06:	4313      	orreq	r3, r2
 23ffb08:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffb0c:	6863      	ldr	r3, [r4, #4]
 23ffb0e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffb12:	1c5a      	adds	r2, r3, #1
 23ffb14:	3302      	adds	r3, #2
 23ffb16:	6062      	str	r2, [r4, #4]
 23ffb18:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffb1c:	f000 f80e 	bl	23ffb3c <__retarget_lock_release_recursive>
 23ffb20:	2000      	movs	r0, #0
 23ffb22:	e7c4      	b.n	23ffaae <__register_exitproc+0x3e>
 23ffb24:	1007aff4 	.word	0x1007aff4
 23ffb28:	1007af68 	.word	0x1007af68
 23ffb2c:	00000000 	.word	0x00000000
 23ffb30:	023fd5f5 	.word	0x023fd5f5
 23ffb34:	1007add8 	.word	0x1007add8

023ffb38 <__retarget_lock_acquire_recursive>:
 23ffb38:	4770      	bx	lr

023ffb3a <__retarget_lock_release>:
 23ffb3a:	4770      	bx	lr

023ffb3c <__retarget_lock_release_recursive>:
 23ffb3c:	4770      	bx	lr
	...

023ffb40 <dynalib_user>:
 23ffb40:	c859 023f c881 023f c885 023f 0000 0000     Y.?...?...?.....
 23ffb50:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffb60:	7574 6c61 5a00 4720 7279 3a6f 2520 0a69     tual.Z Gyro: %i.
 23ffb70:	0000 0000                                   ....

023ffb74 <_ZTVN5spark10LogHandlerE>:
	...
 23ffb84:	c8a1 023f c8c9 023f                         ..?...?.

023ffb8c <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffb94:	c8d5 023f c909 023f e6a1 023f e849 023f     ..?...?...?.I.?.

023ffba4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffbac:	d717 023f d70d 023f d703 023f d6f9 023f     ..?...?...?...?.
 23ffbbc:	d6ed 023f d6e1 023f f011 023f f019 023f     ..?...?...?...?.
 23ffbcc:	d6d5 023f d6cd 023f d6c3 023f d6b9 023f     ..?...?...?...?.
 23ffbdc:	f141 023f f049 023f f051 023f               A.?.I.?.Q.?.

023ffbe8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffbf0:	d965 023f d967 023f d925 023f f197 023f     e.?.g.?.%.?...?.
 23ffc00:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
 23ffc10:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
 23ffc20:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
 23ffc30:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
 23ffc40:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
 23ffc50:	6564 6174 6c69 2073 203d 0d00 000a 006d     details = ....m.
 23ffc60:	0066 6e6c 6600 006e 0074 6f63 6564 6400     f.ln.fn.t.code.d
 23ffc70:	7465 6961 006c 0000                         etail...

023ffc78 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc80:	df29 023f df41 023f e6a1 023f e849 023f     ).?.A.?...?.I.?.

023ffc90 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc98:	df55 023f df69 023f e881 023f daa9 023f     U.?.i.?...?...?.

023ffca8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcb0:	dabb 023f dae1 023f e605 023f daab 023f     ..?...?...?...?.

023ffcc0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcc8:	dab9 023f daef 023f de91 023f db11 023f     ..?...?...?...?.
 23ffcd8:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 23ffce8:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

023ffcf4 <_ZTV9IPAddress>:
	...
 23ffcfc:	eb75 023f eb65 023f eb67 023f               u.?.e.?.g.?.

023ffd08 <_ZTV9USBSerial>:
	...
 23ffd10:	ec5b 023f ecc3 023f ec99 023f d939 023f     [.?...?...?.9.?.
 23ffd20:	ec8b 023f ec5d 023f ec6d 023f ecbd 023f     ..?.].?.m.?...?.
 23ffd30:	da7f 023f ec7d 023f ec55 023f               ..?.}.?.U.?.

023ffd3c <_ZTV11USARTSerial>:
	...
 23ffd44:	ed61 023f edcd 023f eda5 023f d939 023f     a.?...?...?.9.?.
 23ffd54:	ed75 023f ed91 023f ed83 023f ed9f 023f     u.?...?...?...?.
 23ffd64:	da7f 023f ed63 023f ed67 023f               ..?.c.?.g.?.

023ffd70 <_ZTV7TwoWire>:
	...
 23ffd78:	ee1f 023f ee69 023f ee41 023f ee21 023f     ..?.i.?.A.?.!.?.
 23ffd88:	ee49 023f ee51 023f ee59 023f ee61 023f     I.?.Q.?.Y.?.a.?.
 23ffd98:	da7f 023f                                   ..?.

023ffd9c <_ZTVN5spark9WiFiClassE>:
	...
 23ffda4:	efb3 023f efa9 023f ef9f 023f ef55 023f     ..?...?...?.U.?.
 23ffdb4:	ef93 023f ef87 023f f011 023f f019 023f     ..?...?...?...?.
 23ffdc4:	ef7b 023f ef73 023f ef69 023f ef5f 023f     {.?.s.?.i.?._.?.
 23ffdd4:	f141 023f f049 023f f051 023f               A.?.I.?.Q.?.

023ffde0 <CSWTCH.109>:
 23ffde0:	ae4c 1007 aee8 1007 aef0 1007               L...........

023ffdec <_ZTVN5spark12NetworkClassE>:
	...
 23ffdf4:	efd1 023f efdb 023f efe5 023f efef 023f     ..?...?...?...?.
 23ffe04:	eff9 023f f005 023f f011 023f f019 023f     ..?...?...?...?.
 23ffe14:	f021 023f f02d 023f f035 023f f03f 023f     !.?.-.?.5.?.?.?.
 23ffe24:	f141 023f f049 023f f051 023f 7525 7500     A.?.I.?.Q.?.%u.u
 23ffe34:	3025 7834                                    %04x.

023ffe39 <_ZSt7nothrow>:
 23ffe39:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe49:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 23ffe59:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 23ffe69:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 23ffe79:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 23ffe89:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 23ffe99:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 23ffea9:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 23ffeb9:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 23ffec9:	646e 632e                                    nd.c.

023ffece <_ctype_>:
 23ffece:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffede:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffeee:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffefe:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff0e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff1e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff2e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff3e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff4e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffcf <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fcb75 	.word	0x023fcb75
 23fffd4:	023fd721 	.word	0x023fd721
 23fffd8:	023fd789 	.word	0x023fd789
 23fffdc:	023fd915 	.word	0x023fd915
 23fffe0:	023fe691 	.word	0x023fe691
 23fffe4:	023fe9f5 	.word	0x023fe9f5
 23fffe8:	023fea09 	.word	0x023fea09
 23fffec:	023fef39 	.word	0x023fef39
 23ffff0:	023fefbd 	.word	0x023fefbd
 23ffff4:	023ff155 	.word	0x023ff155
