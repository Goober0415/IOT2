
h:/IOT2/IOT2/13_Motion/13_2_autoRotate/target/5.9.0/p2/13_2_autoRotate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fc8b0  085fc0a8  0000c8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00003744  023fc8b8  085fc0b0  0000c8b8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000480  1007a99c  085ff7f4  0001a99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  1007ae20  1007ae20  0002ae20  2**3
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffc74  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000340  085ffc78  085ffc78  0001fc78  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fc78  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00142070  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014bca  00000000  00000000  00162070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003f4e1  00000000  00000000  00176c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f88  00000000  00000000  001b611b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000b558  00000000  00000000  001b90a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a8fd  00000000  00000000  001c45fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000497aa  00000000  00000000  001eeef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e574a  00000000  00000000  002386a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008848  00000000  00000000  0031ddec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	4813      	ldr	r0, [pc, #76]	; (85fc068 <module_user_pre_init+0x50>)
 85fc01a:	4914      	ldr	r1, [pc, #80]	; (85fc06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a13      	ldr	r2, [pc, #76]	; (85fc070 <module_user_pre_init+0x58>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b12      	ldr	r3, [pc, #72]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	4812      	ldr	r0, [pc, #72]	; (85fc078 <module_user_pre_init+0x60>)
 85fc030:	4a12      	ldr	r2, [pc, #72]	; (85fc07c <module_user_pre_init+0x64>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b12      	ldr	r3, [pc, #72]	; (85fc080 <module_user_pre_init+0x68>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fc03a:	4812      	ldr	r0, [pc, #72]	; (85fc084 <module_user_pre_init+0x6c>)
 85fc03c:	4912      	ldr	r1, [pc, #72]	; (85fc088 <module_user_pre_init+0x70>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a12      	ldr	r2, [pc, #72]	; (85fc08c <module_user_pre_init+0x74>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fc048:	4b0a      	ldr	r3, [pc, #40]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc04e:	4810      	ldr	r0, [pc, #64]	; (85fc090 <module_user_pre_init+0x78>)
 85fc050:	4910      	ldr	r1, [pc, #64]	; (85fc094 <module_user_pre_init+0x7c>)
 85fc052:	4288      	cmp	r0, r1
 85fc054:	d005      	beq.n	85fc062 <module_user_pre_init+0x4a>
 85fc056:	4a10      	ldr	r2, [pc, #64]	; (85fc098 <module_user_pre_init+0x80>)
 85fc058:	4282      	cmp	r2, r0
 85fc05a:	d002      	beq.n	85fc062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc05c:	4b05      	ldr	r3, [pc, #20]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc05e:	1a12      	subs	r2, r2, r0
 85fc060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc062:	4801      	ldr	r0, [pc, #4]	; (85fc068 <module_user_pre_init+0x50>)
 85fc064:	bd08      	pop	{r3, pc}
 85fc066:	bf00      	nop
 85fc068:	1007a99c 	.word	0x1007a99c
 85fc06c:	085ff7f4 	.word	0x085ff7f4
 85fc070:	1007ae1c 	.word	0x1007ae1c
 85fc074:	10110d2d 	.word	0x10110d2d
 85fc078:	1007ae20 	.word	0x1007ae20
 85fc07c:	1007affc 	.word	0x1007affc
 85fc080:	10110ea1 	.word	0x10110ea1
 85fc084:	023fc8b0 	.word	0x023fc8b0
 85fc088:	085fc0a8 	.word	0x085fc0a8
 85fc08c:	023fc8b8 	.word	0x023fc8b8
 85fc090:	023fc8b8 	.word	0x023fc8b8
 85fc094:	085fc0b0 	.word	0x085fc0b0
 85fc098:	023ffffc 	.word	0x023ffffc

085fc09c <dynalib_preinit>:
 85fc09c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fc8b8 <__aeabi_drsub>:
 23fc8b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fc8bc:	e002      	b.n	23fc8c4 <__adddf3>
 23fc8be:	bf00      	nop

023fc8c0 <__aeabi_dsub>:
 23fc8c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fc8c4 <__adddf3>:
 23fc8c4:	b530      	push	{r4, r5, lr}
 23fc8c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fc8ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fc8ce:	ea94 0f05 	teq	r4, r5
 23fc8d2:	bf08      	it	eq
 23fc8d4:	ea90 0f02 	teqeq	r0, r2
 23fc8d8:	bf1f      	itttt	ne
 23fc8da:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fc8de:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fc8e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fc8e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fc8ea:	f000 80e2 	beq.w	23fcab2 <__adddf3+0x1ee>
 23fc8ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fc8f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fc8f6:	bfb8      	it	lt
 23fc8f8:	426d      	neglt	r5, r5
 23fc8fa:	dd0c      	ble.n	23fc916 <__adddf3+0x52>
 23fc8fc:	442c      	add	r4, r5
 23fc8fe:	ea80 0202 	eor.w	r2, r0, r2
 23fc902:	ea81 0303 	eor.w	r3, r1, r3
 23fc906:	ea82 0000 	eor.w	r0, r2, r0
 23fc90a:	ea83 0101 	eor.w	r1, r3, r1
 23fc90e:	ea80 0202 	eor.w	r2, r0, r2
 23fc912:	ea81 0303 	eor.w	r3, r1, r3
 23fc916:	2d36      	cmp	r5, #54	; 0x36
 23fc918:	bf88      	it	hi
 23fc91a:	bd30      	pophi	{r4, r5, pc}
 23fc91c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fc920:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fc924:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fc928:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fc92c:	d002      	beq.n	23fc934 <__adddf3+0x70>
 23fc92e:	4240      	negs	r0, r0
 23fc930:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fc934:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fc938:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fc93c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fc940:	d002      	beq.n	23fc948 <__adddf3+0x84>
 23fc942:	4252      	negs	r2, r2
 23fc944:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fc948:	ea94 0f05 	teq	r4, r5
 23fc94c:	f000 80a7 	beq.w	23fca9e <__adddf3+0x1da>
 23fc950:	f1a4 0401 	sub.w	r4, r4, #1
 23fc954:	f1d5 0e20 	rsbs	lr, r5, #32
 23fc958:	db0d      	blt.n	23fc976 <__adddf3+0xb2>
 23fc95a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fc95e:	fa22 f205 	lsr.w	r2, r2, r5
 23fc962:	1880      	adds	r0, r0, r2
 23fc964:	f141 0100 	adc.w	r1, r1, #0
 23fc968:	fa03 f20e 	lsl.w	r2, r3, lr
 23fc96c:	1880      	adds	r0, r0, r2
 23fc96e:	fa43 f305 	asr.w	r3, r3, r5
 23fc972:	4159      	adcs	r1, r3
 23fc974:	e00e      	b.n	23fc994 <__adddf3+0xd0>
 23fc976:	f1a5 0520 	sub.w	r5, r5, #32
 23fc97a:	f10e 0e20 	add.w	lr, lr, #32
 23fc97e:	2a01      	cmp	r2, #1
 23fc980:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fc984:	bf28      	it	cs
 23fc986:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fc98a:	fa43 f305 	asr.w	r3, r3, r5
 23fc98e:	18c0      	adds	r0, r0, r3
 23fc990:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fc994:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc998:	d507      	bpl.n	23fc9aa <__adddf3+0xe6>
 23fc99a:	f04f 0e00 	mov.w	lr, #0
 23fc99e:	f1dc 0c00 	rsbs	ip, ip, #0
 23fc9a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fc9a6:	eb6e 0101 	sbc.w	r1, lr, r1
 23fc9aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fc9ae:	d31b      	bcc.n	23fc9e8 <__adddf3+0x124>
 23fc9b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fc9b4:	d30c      	bcc.n	23fc9d0 <__adddf3+0x10c>
 23fc9b6:	0849      	lsrs	r1, r1, #1
 23fc9b8:	ea5f 0030 	movs.w	r0, r0, rrx
 23fc9bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fc9c0:	f104 0401 	add.w	r4, r4, #1
 23fc9c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fc9c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fc9cc:	f080 809a 	bcs.w	23fcb04 <__adddf3+0x240>
 23fc9d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fc9d4:	bf08      	it	eq
 23fc9d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fc9da:	f150 0000 	adcs.w	r0, r0, #0
 23fc9de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc9e2:	ea41 0105 	orr.w	r1, r1, r5
 23fc9e6:	bd30      	pop	{r4, r5, pc}
 23fc9e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fc9ec:	4140      	adcs	r0, r0
 23fc9ee:	eb41 0101 	adc.w	r1, r1, r1
 23fc9f2:	3c01      	subs	r4, #1
 23fc9f4:	bf28      	it	cs
 23fc9f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fc9fa:	d2e9      	bcs.n	23fc9d0 <__adddf3+0x10c>
 23fc9fc:	f091 0f00 	teq	r1, #0
 23fca00:	bf04      	itt	eq
 23fca02:	4601      	moveq	r1, r0
 23fca04:	2000      	moveq	r0, #0
 23fca06:	fab1 f381 	clz	r3, r1
 23fca0a:	bf08      	it	eq
 23fca0c:	3320      	addeq	r3, #32
 23fca0e:	f1a3 030b 	sub.w	r3, r3, #11
 23fca12:	f1b3 0220 	subs.w	r2, r3, #32
 23fca16:	da0c      	bge.n	23fca32 <__adddf3+0x16e>
 23fca18:	320c      	adds	r2, #12
 23fca1a:	dd08      	ble.n	23fca2e <__adddf3+0x16a>
 23fca1c:	f102 0c14 	add.w	ip, r2, #20
 23fca20:	f1c2 020c 	rsb	r2, r2, #12
 23fca24:	fa01 f00c 	lsl.w	r0, r1, ip
 23fca28:	fa21 f102 	lsr.w	r1, r1, r2
 23fca2c:	e00c      	b.n	23fca48 <__adddf3+0x184>
 23fca2e:	f102 0214 	add.w	r2, r2, #20
 23fca32:	bfd8      	it	le
 23fca34:	f1c2 0c20 	rsble	ip, r2, #32
 23fca38:	fa01 f102 	lsl.w	r1, r1, r2
 23fca3c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fca40:	bfdc      	itt	le
 23fca42:	ea41 010c 	orrle.w	r1, r1, ip
 23fca46:	4090      	lslle	r0, r2
 23fca48:	1ae4      	subs	r4, r4, r3
 23fca4a:	bfa2      	ittt	ge
 23fca4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fca50:	4329      	orrge	r1, r5
 23fca52:	bd30      	popge	{r4, r5, pc}
 23fca54:	ea6f 0404 	mvn.w	r4, r4
 23fca58:	3c1f      	subs	r4, #31
 23fca5a:	da1c      	bge.n	23fca96 <__adddf3+0x1d2>
 23fca5c:	340c      	adds	r4, #12
 23fca5e:	dc0e      	bgt.n	23fca7e <__adddf3+0x1ba>
 23fca60:	f104 0414 	add.w	r4, r4, #20
 23fca64:	f1c4 0220 	rsb	r2, r4, #32
 23fca68:	fa20 f004 	lsr.w	r0, r0, r4
 23fca6c:	fa01 f302 	lsl.w	r3, r1, r2
 23fca70:	ea40 0003 	orr.w	r0, r0, r3
 23fca74:	fa21 f304 	lsr.w	r3, r1, r4
 23fca78:	ea45 0103 	orr.w	r1, r5, r3
 23fca7c:	bd30      	pop	{r4, r5, pc}
 23fca7e:	f1c4 040c 	rsb	r4, r4, #12
 23fca82:	f1c4 0220 	rsb	r2, r4, #32
 23fca86:	fa20 f002 	lsr.w	r0, r0, r2
 23fca8a:	fa01 f304 	lsl.w	r3, r1, r4
 23fca8e:	ea40 0003 	orr.w	r0, r0, r3
 23fca92:	4629      	mov	r1, r5
 23fca94:	bd30      	pop	{r4, r5, pc}
 23fca96:	fa21 f004 	lsr.w	r0, r1, r4
 23fca9a:	4629      	mov	r1, r5
 23fca9c:	bd30      	pop	{r4, r5, pc}
 23fca9e:	f094 0f00 	teq	r4, #0
 23fcaa2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fcaa6:	bf06      	itte	eq
 23fcaa8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fcaac:	3401      	addeq	r4, #1
 23fcaae:	3d01      	subne	r5, #1
 23fcab0:	e74e      	b.n	23fc950 <__adddf3+0x8c>
 23fcab2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fcab6:	bf18      	it	ne
 23fcab8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fcabc:	d029      	beq.n	23fcb12 <__adddf3+0x24e>
 23fcabe:	ea94 0f05 	teq	r4, r5
 23fcac2:	bf08      	it	eq
 23fcac4:	ea90 0f02 	teqeq	r0, r2
 23fcac8:	d005      	beq.n	23fcad6 <__adddf3+0x212>
 23fcaca:	ea54 0c00 	orrs.w	ip, r4, r0
 23fcace:	bf04      	itt	eq
 23fcad0:	4619      	moveq	r1, r3
 23fcad2:	4610      	moveq	r0, r2
 23fcad4:	bd30      	pop	{r4, r5, pc}
 23fcad6:	ea91 0f03 	teq	r1, r3
 23fcada:	bf1e      	ittt	ne
 23fcadc:	2100      	movne	r1, #0
 23fcade:	2000      	movne	r0, #0
 23fcae0:	bd30      	popne	{r4, r5, pc}
 23fcae2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fcae6:	d105      	bne.n	23fcaf4 <__adddf3+0x230>
 23fcae8:	0040      	lsls	r0, r0, #1
 23fcaea:	4149      	adcs	r1, r1
 23fcaec:	bf28      	it	cs
 23fcaee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fcaf2:	bd30      	pop	{r4, r5, pc}
 23fcaf4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fcaf8:	bf3c      	itt	cc
 23fcafa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fcafe:	bd30      	popcc	{r4, r5, pc}
 23fcb00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fcb04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fcb08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fcb0c:	f04f 0000 	mov.w	r0, #0
 23fcb10:	bd30      	pop	{r4, r5, pc}
 23fcb12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fcb16:	bf1a      	itte	ne
 23fcb18:	4619      	movne	r1, r3
 23fcb1a:	4610      	movne	r0, r2
 23fcb1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fcb20:	bf1c      	itt	ne
 23fcb22:	460b      	movne	r3, r1
 23fcb24:	4602      	movne	r2, r0
 23fcb26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fcb2a:	bf06      	itte	eq
 23fcb2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fcb30:	ea91 0f03 	teqeq	r1, r3
 23fcb34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fcb38:	bd30      	pop	{r4, r5, pc}
 23fcb3a:	bf00      	nop

023fcb3c <__aeabi_ui2d>:
 23fcb3c:	f090 0f00 	teq	r0, #0
 23fcb40:	bf04      	itt	eq
 23fcb42:	2100      	moveq	r1, #0
 23fcb44:	4770      	bxeq	lr
 23fcb46:	b530      	push	{r4, r5, lr}
 23fcb48:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fcb4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fcb50:	f04f 0500 	mov.w	r5, #0
 23fcb54:	f04f 0100 	mov.w	r1, #0
 23fcb58:	e750      	b.n	23fc9fc <__adddf3+0x138>
 23fcb5a:	bf00      	nop

023fcb5c <__aeabi_i2d>:
 23fcb5c:	f090 0f00 	teq	r0, #0
 23fcb60:	bf04      	itt	eq
 23fcb62:	2100      	moveq	r1, #0
 23fcb64:	4770      	bxeq	lr
 23fcb66:	b530      	push	{r4, r5, lr}
 23fcb68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fcb6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fcb70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fcb74:	bf48      	it	mi
 23fcb76:	4240      	negmi	r0, r0
 23fcb78:	f04f 0100 	mov.w	r1, #0
 23fcb7c:	e73e      	b.n	23fc9fc <__adddf3+0x138>
 23fcb7e:	bf00      	nop

023fcb80 <__aeabi_f2d>:
 23fcb80:	0042      	lsls	r2, r0, #1
 23fcb82:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fcb86:	ea4f 0131 	mov.w	r1, r1, rrx
 23fcb8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fcb8e:	bf1f      	itttt	ne
 23fcb90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fcb94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fcb98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fcb9c:	4770      	bxne	lr
 23fcb9e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fcba2:	bf08      	it	eq
 23fcba4:	4770      	bxeq	lr
 23fcba6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fcbaa:	bf04      	itt	eq
 23fcbac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fcbb0:	4770      	bxeq	lr
 23fcbb2:	b530      	push	{r4, r5, lr}
 23fcbb4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fcbb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fcbbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fcbc0:	e71c      	b.n	23fc9fc <__adddf3+0x138>
 23fcbc2:	bf00      	nop

023fcbc4 <__aeabi_ul2d>:
 23fcbc4:	ea50 0201 	orrs.w	r2, r0, r1
 23fcbc8:	bf08      	it	eq
 23fcbca:	4770      	bxeq	lr
 23fcbcc:	b530      	push	{r4, r5, lr}
 23fcbce:	f04f 0500 	mov.w	r5, #0
 23fcbd2:	e00a      	b.n	23fcbea <__aeabi_l2d+0x16>

023fcbd4 <__aeabi_l2d>:
 23fcbd4:	ea50 0201 	orrs.w	r2, r0, r1
 23fcbd8:	bf08      	it	eq
 23fcbda:	4770      	bxeq	lr
 23fcbdc:	b530      	push	{r4, r5, lr}
 23fcbde:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fcbe2:	d502      	bpl.n	23fcbea <__aeabi_l2d+0x16>
 23fcbe4:	4240      	negs	r0, r0
 23fcbe6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fcbea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fcbee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fcbf2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fcbf6:	f43f aed8 	beq.w	23fc9aa <__adddf3+0xe6>
 23fcbfa:	f04f 0203 	mov.w	r2, #3
 23fcbfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fcc02:	bf18      	it	ne
 23fcc04:	3203      	addne	r2, #3
 23fcc06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fcc0a:	bf18      	it	ne
 23fcc0c:	3203      	addne	r2, #3
 23fcc0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fcc12:	f1c2 0320 	rsb	r3, r2, #32
 23fcc16:	fa00 fc03 	lsl.w	ip, r0, r3
 23fcc1a:	fa20 f002 	lsr.w	r0, r0, r2
 23fcc1e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fcc22:	ea40 000e 	orr.w	r0, r0, lr
 23fcc26:	fa21 f102 	lsr.w	r1, r1, r2
 23fcc2a:	4414      	add	r4, r2
 23fcc2c:	e6bd      	b.n	23fc9aa <__adddf3+0xe6>
 23fcc2e:	bf00      	nop

023fcc30 <strcmp>:
 23fcc30:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fcc34:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fcc38:	2a01      	cmp	r2, #1
 23fcc3a:	bf28      	it	cs
 23fcc3c:	429a      	cmpcs	r2, r3
 23fcc3e:	d0f7      	beq.n	23fcc30 <strcmp>
 23fcc40:	1ad0      	subs	r0, r2, r3
 23fcc42:	4770      	bx	lr

023fcc44 <strlen>:
 23fcc44:	4603      	mov	r3, r0
 23fcc46:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fcc4a:	2a00      	cmp	r2, #0
 23fcc4c:	d1fb      	bne.n	23fcc46 <strlen+0x2>
 23fcc4e:	1a18      	subs	r0, r3, r0
 23fcc50:	3801      	subs	r0, #1
 23fcc52:	4770      	bx	lr

023fcc54 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fcc54:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fcc56:	f001 ffaf 	bl	23febb8 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fcc5a:	2500      	movs	r5, #0
 23fcc5c:	4e05      	ldr	r6, [pc, #20]	; (23fcc74 <module_user_init+0x20>)
 23fcc5e:	4c06      	ldr	r4, [pc, #24]	; (23fcc78 <module_user_init+0x24>)
 23fcc60:	1ba4      	subs	r4, r4, r6
 23fcc62:	08a4      	lsrs	r4, r4, #2
 23fcc64:	42ac      	cmp	r4, r5
 23fcc66:	d100      	bne.n	23fcc6a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fcc68:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fcc6a:	f856 3b04 	ldr.w	r3, [r6], #4
 23fcc6e:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fcc70:	3501      	adds	r5, #1
 23fcc72:	e7f7      	b.n	23fcc64 <module_user_init+0x10>
 23fcc74:	023fffd4 	.word	0x023fffd4
 23fcc78:	023ffffc 	.word	0x023ffffc

023fcc7c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fcc7c:	f000 b832 	b.w	23fcce4 <setup>

023fcc80 <module_user_loop>:
}

void module_user_loop() {
 23fcc80:	b508      	push	{r3, lr}
    loop();
 23fcc82:	f000 f88b 	bl	23fcd9c <loop>
    _post_loop();
}
 23fcc86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fcc8a:	f001 bf4d 	b.w	23feb28 <_post_loop>

023fcc8e <_Znaj>:
 23fcc8e:	f001 bb1b 	b.w	23fe2c8 <malloc>

023fcc92 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fcc92:	f001 bb27 	b.w	23fe2e4 <free>
	...

023fcc98 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fcc98:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fcc9a:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fcc9c:	4a02      	ldr	r2, [pc, #8]	; (23fcca8 <__cxa_pure_virtual+0x10>)
 23fcc9e:	4903      	ldr	r1, [pc, #12]	; (23fccac <__cxa_pure_virtual+0x14>)
 23fcca0:	f001 f9b4 	bl	23fe00c <panic_>
  while (1);
 23fcca4:	e7fe      	b.n	23fcca4 <__cxa_pure_virtual+0xc>
 23fcca6:	bf00      	nop
 23fcca8:	023fdb75 	.word	0x023fdb75
 23fccac:	023ff71c 	.word	0x023ff71c

023fccb0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fccb0:	7800      	ldrb	r0, [r0, #0]
 23fccb2:	fab0 f080 	clz	r0, r0
 23fccb6:	0940      	lsrs	r0, r0, #5
 23fccb8:	4770      	bx	lr

023fccba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fccba:	2301      	movs	r3, #1
 23fccbc:	7003      	strb	r3, [r0, #0]
 23fccbe:	4770      	bx	lr

023fccc0 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23fccc0:	6803      	ldr	r3, [r0, #0]
 23fccc2:	b2c9      	uxtb	r1, r1
 23fccc4:	689b      	ldr	r3, [r3, #8]
 23fccc6:	4718      	bx	r3

023fccc8 <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fccc8:	b40e      	push	{r1, r2, r3}
 23fccca:	b503      	push	{r0, r1, lr}
 23fcccc:	ab03      	add	r3, sp, #12
 23fccce:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23fccd2:	2100      	movs	r1, #0
        va_start(args, format);
 23fccd4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23fccd6:	f001 fd5e 	bl	23fe796 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fccda:	b002      	add	sp, #8
 23fccdc:	f85d eb04 	ldr.w	lr, [sp], #4
 23fcce0:	b003      	add	sp, #12
 23fcce2:	4770      	bx	lr

023fcce4 <setup>:
byte accel_x_h, accel_x_l, accel_y_h, accel_y_l, accel_z_h, accel_z_l;
float accel_x, accel_y, accel_z;
int getRotation(int x, int y, int z);

void setup()
{
 23fcce4:	b508      	push	{r3, lr}
  Serial.begin(9600);
 23fcce6:	f002 f86f 	bl	23fedc8 <_Z16_fetch_usbserialv>
 23fccea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fccee:	f002 f85f 	bl	23fedb0 <_ZN9USBSerial5beginEl>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
 23fccf2:	223c      	movs	r2, #60	; 0x3c
 23fccf4:	2102      	movs	r1, #2
 23fccf6:	4818      	ldr	r0, [pc, #96]	; (23fcd58 <setup+0x74>)
 23fccf8:	f000 fc48 	bl	23fd58c <_ZN16Adafruit_SSD13065beginEhh>
  Wire.begin();
 23fccfc:	f002 fbec 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd00:	f002 f936 	bl	23fef70 <_ZN7TwoWire5beginEv>

  // Initialize MPU6050
  Wire.beginTransmission(0x68);
 23fcd04:	f002 fbe8 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd08:	2168      	movs	r1, #104	; 0x68
 23fcd0a:	f002 f95c 	bl	23fefc6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B); // Power management register
 23fcd0e:	f002 fbe3 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd12:	216b      	movs	r1, #107	; 0x6b
 23fcd14:	f7ff ffd4 	bl	23fccc0 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(0x00); // Wake up device
 23fcd18:	f002 fbde 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd1c:	2100      	movs	r1, #0
 23fcd1e:	f7ff ffcf 	bl	23fccc0 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
 23fcd22:	f002 fbd9 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd26:	2101      	movs	r1, #1
 23fcd28:	f002 f950 	bl	23fefcc <_ZN7TwoWire15endTransmissionEh>

  // Set accelerometer range to ±2g
  Wire.beginTransmission(0x68);
 23fcd2c:	f002 fbd4 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd30:	2168      	movs	r1, #104	; 0x68
 23fcd32:	f002 f948 	bl	23fefc6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x1C); // Accelerometer configuration register
 23fcd36:	f002 fbcf 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd3a:	211c      	movs	r1, #28
 23fcd3c:	f7ff ffc0 	bl	23fccc0 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(0x00); // ±2g range
 23fcd40:	f002 fbca 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcd44:	2100      	movs	r1, #0
 23fcd46:	f7ff ffbb 	bl	23fccc0 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(true);
 23fcd4a:	f002 fbc5 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
}
 23fcd4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission(true);
 23fcd52:	2101      	movs	r1, #1
 23fcd54:	f002 b93a 	b.w	23fefcc <_ZN7TwoWire15endTransmissionEh>
 23fcd58:	1007ae44 	.word	0x1007ae44

023fcd5c <_Z11getRotationiii>:
}

int getRotation(int x, int y, int z)
{
  // Map MPU6050 orientation to OLED rotation
  if (abs(x) > abs(y) && abs(x) > abs(z))
 23fcd5c:	2800      	cmp	r0, #0
 23fcd5e:	bfb8      	it	lt
 23fcd60:	4240      	neglt	r0, r0
 23fcd62:	2900      	cmp	r1, #0
 23fcd64:	bfb8      	it	lt
 23fcd66:	4249      	neglt	r1, r1
 23fcd68:	4288      	cmp	r0, r1
 23fcd6a:	dd05      	ble.n	23fcd78 <_Z11getRotationiii+0x1c>
 23fcd6c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 23fcd70:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 23fcd74:	4298      	cmp	r0, r3
 23fcd76:	dc0c      	bgt.n	23fcd92 <_Z11getRotationiii+0x36>
  {           // Device is flat, facing up or down
    return 0; // No rotation
  }
  else if (abs(y) > abs(x) && abs(y) > abs(z))
 23fcd78:	4288      	cmp	r0, r1
 23fcd7a:	da05      	bge.n	23fcd88 <_Z11getRotationiii+0x2c>
 23fcd7c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 23fcd80:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 23fcd84:	4299      	cmp	r1, r3
 23fcd86:	dc06      	bgt.n	23fcd96 <_Z11getRotationiii+0x3a>
    {           // Screen facing left
      return 1; // Rotate 90 degrees clockwise
    }
    else
    {           // Screen facing right
      return 3; // Rotate 90 degrees counter-clockwise
 23fcd88:	2a00      	cmp	r2, #0
 23fcd8a:	bfcc      	ite	gt
 23fcd8c:	2001      	movgt	r0, #1
 23fcd8e:	2003      	movle	r0, #3
 23fcd90:	4770      	bx	lr
    return 0; // No rotation
 23fcd92:	2000      	movs	r0, #0
 23fcd94:	4770      	bx	lr
    return 2; // Rotate 180 degrees
 23fcd96:	2002      	movs	r0, #2
    }
  }
 23fcd98:	4770      	bx	lr
	...

023fcd9c <loop>:
{
 23fcd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcda0:	b086      	sub	sp, #24
  Time.now();
 23fcda2:	f001 fe6e 	bl	23fea82 <_ZN9TimeClass3nowEv>
  Wire.beginTransmission(0x68);
 23fcda6:	f002 fb97 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcdaa:	2168      	movs	r1, #104	; 0x68
 23fcdac:	f002 f90b 	bl	23fefc6 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x3B); // Start reading from ACCEL_XOUT_H
 23fcdb0:	f002 fb92 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcdb4:	213b      	movs	r1, #59	; 0x3b
 23fcdb6:	f7ff ff83 	bl	23fccc0 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(false);
 23fcdba:	f002 fb8d 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcdbe:	2100      	movs	r1, #0
 23fcdc0:	f002 f904 	bl	23fefcc <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(0x68, 6, true);
 23fcdc4:	f002 fb88 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcdc8:	2301      	movs	r3, #1
 23fcdca:	2206      	movs	r2, #6
 23fcdcc:	2168      	movs	r1, #104	; 0x68
 23fcdce:	f002 f8e2 	bl	23fef96 <_ZN7TwoWire11requestFromEhjh>
  if (Wire.available() == 6)
 23fcdd2:	f002 fb81 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcdd6:	6803      	ldr	r3, [r0, #0]
 23fcdd8:	691b      	ldr	r3, [r3, #16]
 23fcdda:	4798      	blx	r3
 23fcddc:	2806      	cmp	r0, #6
 23fcdde:	f040 80d2 	bne.w	23fcf86 <loop+0x1ea>
    accel_x_h = Wire.read();
 23fcde2:	f002 fb79 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcde6:	6803      	ldr	r3, [r0, #0]
 23fcde8:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 23fcfd8 <loop+0x23c>
 23fcdec:	695b      	ldr	r3, [r3, #20]
 23fcdee:	4798      	blx	r3
 23fcdf0:	f888 0000 	strb.w	r0, [r8]
    accel_x_l = Wire.read();
 23fcdf4:	f002 fb70 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fcdf8:	6803      	ldr	r3, [r0, #0]
 23fcdfa:	4e66      	ldr	r6, [pc, #408]	; (23fcf94 <loop+0x1f8>)
 23fcdfc:	695b      	ldr	r3, [r3, #20]
 23fcdfe:	4798      	blx	r3
 23fce00:	7030      	strb	r0, [r6, #0]
    accel_y_h = Wire.read();
 23fce02:	f002 fb69 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fce06:	6803      	ldr	r3, [r0, #0]
 23fce08:	4f63      	ldr	r7, [pc, #396]	; (23fcf98 <loop+0x1fc>)
 23fce0a:	695b      	ldr	r3, [r3, #20]
 23fce0c:	4798      	blx	r3
 23fce0e:	7038      	strb	r0, [r7, #0]
    accel_y_l = Wire.read();
 23fce10:	f002 fb62 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fce14:	6803      	ldr	r3, [r0, #0]
 23fce16:	4d61      	ldr	r5, [pc, #388]	; (23fcf9c <loop+0x200>)
 23fce18:	695b      	ldr	r3, [r3, #20]
 23fce1a:	4798      	blx	r3
 23fce1c:	7028      	strb	r0, [r5, #0]
    accel_z_h = Wire.read();
 23fce1e:	f002 fb5b 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fce22:	6803      	ldr	r3, [r0, #0]
 23fce24:	4c5e      	ldr	r4, [pc, #376]	; (23fcfa0 <loop+0x204>)
 23fce26:	695b      	ldr	r3, [r3, #20]
 23fce28:	4798      	blx	r3
 23fce2a:	7020      	strb	r0, [r4, #0]
    accel_z_l = Wire.read();
 23fce2c:	f002 fb54 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fce30:	6803      	ldr	r3, [r0, #0]
 23fce32:	695b      	ldr	r3, [r3, #20]
 23fce34:	4798      	blx	r3
 23fce36:	4b5b      	ldr	r3, [pc, #364]	; (23fcfa4 <loop+0x208>)
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce38:	f898 2000 	ldrb.w	r2, [r8]
    accel_z_l = Wire.read();
 23fce3c:	7018      	strb	r0, [r3, #0]
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce3e:	7833      	ldrb	r3, [r6, #0]
    accel_z = ((accel_z_h << 8 | accel_z_l) / ACCEL_SCALE_FACTOR);
 23fce40:	b2c0      	uxtb	r0, r0
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23fce46:	ee07 3a10 	vmov	s14, r3
    accel_y = ((accel_y_h << 8 | accel_y_l) / ACCEL_SCALE_FACTOR);
 23fce4a:	783a      	ldrb	r2, [r7, #0]
 23fce4c:	782b      	ldrb	r3, [r5, #0]
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce4e:	ed9f 6a56 	vldr	s12, [pc, #344]	; 23fcfa8 <loop+0x20c>
    accel_y = ((accel_y_h << 8 | accel_y_l) / ACCEL_SCALE_FACTOR);
 23fce52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23fce56:	ee06 3a90 	vmov	s13, r3
    accel_z = ((accel_z_h << 8 | accel_z_l) / ACCEL_SCALE_FACTOR);
 23fce5a:	7823      	ldrb	r3, [r4, #0]
    accel_y = ((accel_y_h << 8 | accel_y_l) / ACCEL_SCALE_FACTOR);
 23fce5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    accel_z = ((accel_z_h << 8 | accel_z_l) / ACCEL_SCALE_FACTOR);
 23fce60:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 23fce64:	ee07 0a90 	vmov	s15, r0
 23fce68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fce6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 23fce70:	4f4e      	ldr	r7, [pc, #312]	; (23fcfac <loop+0x210>)
    accel_y = ((accel_y_h << 8 | accel_y_l) / ACCEL_SCALE_FACTOR);
 23fce72:	ee66 6a86 	vmul.f32	s13, s13, s12
    accel_z = ((accel_z_h << 8 | accel_z_l) / ACCEL_SCALE_FACTOR);
 23fce76:	edc7 7a00 	vstr	s15, [r7]
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    int rotation = getRotation(accel_x, accel_y, accel_z);
 23fce7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce82:	ee27 7a06 	vmul.f32	s14, s14, s12
    int rotation = getRotation(accel_x, accel_y, accel_z);
 23fce86:	ee17 2a90 	vmov	r2, s15
 23fce8a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 23fce8e:	ee17 1a90 	vmov	r1, s15
 23fce92:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce96:	4e46      	ldr	r6, [pc, #280]	; (23fcfb0 <loop+0x214>)
    accel_y = ((accel_y_h << 8 | accel_y_l) / ACCEL_SCALE_FACTOR);
 23fce98:	4d46      	ldr	r5, [pc, #280]	; (23fcfb4 <loop+0x218>)
    int rotation = getRotation(accel_x, accel_y, accel_z);
 23fce9a:	ee17 0a90 	vmov	r0, s15
    accel_x = ((accel_x_h << 8 | accel_x_l) / ACCEL_SCALE_FACTOR);
 23fce9e:	ed86 7a00 	vstr	s14, [r6]
    accel_y = ((accel_y_h << 8 | accel_y_l) / ACCEL_SCALE_FACTOR);
 23fcea2:	edc5 6a00 	vstr	s13, [r5]
    int rotation = getRotation(accel_x, accel_y, accel_z);
 23fcea6:	f7ff ff59 	bl	23fcd5c <_Z11getRotationiii>
 23fceaa:	4604      	mov	r4, r0
    display.clearDisplay();
 23fceac:	4842      	ldr	r0, [pc, #264]	; (23fcfb8 <loop+0x21c>)
 23fceae:	f000 fa87 	bl	23fd3c0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextColor(WHITE);
 23fceb2:	2101      	movs	r1, #1
 23fceb4:	4840      	ldr	r0, [pc, #256]	; (23fcfb8 <loop+0x21c>)
 23fceb6:	f000 fdef 	bl	23fda98 <_ZN12Adafruit_GFX12setTextColorEt>
    display.setTextSize(1);
 23fceba:	2101      	movs	r1, #1
 23fcebc:	483e      	ldr	r0, [pc, #248]	; (23fcfb8 <loop+0x21c>)
 23fcebe:	f000 fde6 	bl	23fda8e <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setCursor(0, 0);
 23fcec2:	2200      	movs	r2, #0
 23fcec4:	483c      	ldr	r0, [pc, #240]	; (23fcfb8 <loop+0x21c>)
 23fcec6:	4611      	mov	r1, r2
 23fcec8:	f000 fdde 	bl	23fda88 <_ZN12Adafruit_GFX9setCursorEss>
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 23fcecc:	f001 fdd9 	bl	23fea82 <_ZN9TimeClass3nowEv>
 23fced0:	4b3a      	ldr	r3, [pc, #232]	; (23fcfbc <loop+0x220>)
 23fced2:	4602      	mov	r2, r0
 23fced4:	493a      	ldr	r1, [pc, #232]	; (23fcfc0 <loop+0x224>)
 23fced6:	9300      	str	r3, [sp, #0]
 23fced8:	17c3      	asrs	r3, r0, #31
 23fceda:	a802      	add	r0, sp, #8
 23fcedc:	f001 fd72 	bl	23fe9c4 <_ZN9TimeClass6formatExPKc>
    display.print(Time.format("%A , %B %d"));
 23fcee0:	9902      	ldr	r1, [sp, #8]
 23fcee2:	4835      	ldr	r0, [pc, #212]	; (23fcfb8 <loop+0x21c>)
 23fcee4:	f001 fc1c 	bl	23fe720 <_ZN5Print5printEPKc>
 23fcee8:	a802      	add	r0, sp, #8
 23fceea:	f001 fb89 	bl	23fe600 <_ZN6StringD1Ev>
    display.setCursor(0, 20);
 23fceee:	2214      	movs	r2, #20
 23fcef0:	2100      	movs	r1, #0
 23fcef2:	4831      	ldr	r0, [pc, #196]	; (23fcfb8 <loop+0x21c>)
 23fcef4:	f000 fdc8 	bl	23fda88 <_ZN12Adafruit_GFX9setCursorEss>
 23fcef8:	f001 fdc3 	bl	23fea82 <_ZN9TimeClass3nowEv>
 23fcefc:	4b31      	ldr	r3, [pc, #196]	; (23fcfc4 <loop+0x228>)
 23fcefe:	4602      	mov	r2, r0
 23fcf00:	492f      	ldr	r1, [pc, #188]	; (23fcfc0 <loop+0x224>)
 23fcf02:	9300      	str	r3, [sp, #0]
 23fcf04:	17c3      	asrs	r3, r0, #31
 23fcf06:	a802      	add	r0, sp, #8
 23fcf08:	f001 fd5c 	bl	23fe9c4 <_ZN9TimeClass6formatExPKc>
    display.print(Time.format("%I : %M : %S %p"));
 23fcf0c:	9902      	ldr	r1, [sp, #8]
 23fcf0e:	482a      	ldr	r0, [pc, #168]	; (23fcfb8 <loop+0x21c>)
 23fcf10:	f001 fc06 	bl	23fe720 <_ZN5Print5printEPKc>
 23fcf14:	a802      	add	r0, sp, #8
 23fcf16:	f001 fb73 	bl	23fe600 <_ZN6StringD1Ev>
    display.setRotation(rotation);
 23fcf1a:	b2e1      	uxtb	r1, r4
 23fcf1c:	4826      	ldr	r0, [pc, #152]	; (23fcfb8 <loop+0x21c>)
 23fcf1e:	f000 fdc0 	bl	23fdaa2 <_ZN12Adafruit_GFX11setRotationEh>
    display.display();
 23fcf22:	4825      	ldr	r0, [pc, #148]	; (23fcfb8 <loop+0x21c>)
 23fcf24:	f000 fac2 	bl	23fd4ac <_ZN16Adafruit_SSD13067displayEv>
    delay(1000);
 23fcf28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fcf2c:	f001 fdc4 	bl	23feab8 <delay>
    Serial.printf("X-axis acceleration: %.2f g\n", accel_x);
 23fcf30:	f001 ff4a 	bl	23fedc8 <_Z16_fetch_usbserialv>
 23fcf34:	4604      	mov	r4, r0
 23fcf36:	6830      	ldr	r0, [r6, #0]
 23fcf38:	f7ff fe22 	bl	23fcb80 <__aeabi_f2d>
 23fcf3c:	4602      	mov	r2, r0
 23fcf3e:	460b      	mov	r3, r1
 23fcf40:	4620      	mov	r0, r4
 23fcf42:	4921      	ldr	r1, [pc, #132]	; (23fcfc8 <loop+0x22c>)
 23fcf44:	f7ff fec0 	bl	23fccc8 <_ZN5Print6printfEPKcz>
    Serial.printf("Y-axis acceleration: %.2f g\n", accel_y);
 23fcf48:	f001 ff3e 	bl	23fedc8 <_Z16_fetch_usbserialv>
 23fcf4c:	4604      	mov	r4, r0
 23fcf4e:	6828      	ldr	r0, [r5, #0]
 23fcf50:	f7ff fe16 	bl	23fcb80 <__aeabi_f2d>
 23fcf54:	4602      	mov	r2, r0
 23fcf56:	460b      	mov	r3, r1
 23fcf58:	4620      	mov	r0, r4
 23fcf5a:	491c      	ldr	r1, [pc, #112]	; (23fcfcc <loop+0x230>)
 23fcf5c:	f7ff feb4 	bl	23fccc8 <_ZN5Print6printfEPKcz>
    Serial.printf("Z-axis acceleration: %.2f g\n", accel_z);
 23fcf60:	f001 ff32 	bl	23fedc8 <_Z16_fetch_usbserialv>
 23fcf64:	4604      	mov	r4, r0
 23fcf66:	6838      	ldr	r0, [r7, #0]
 23fcf68:	f7ff fe0a 	bl	23fcb80 <__aeabi_f2d>
 23fcf6c:	4602      	mov	r2, r0
 23fcf6e:	460b      	mov	r3, r1
 23fcf70:	4620      	mov	r0, r4
 23fcf72:	4917      	ldr	r1, [pc, #92]	; (23fcfd0 <loop+0x234>)
 23fcf74:	f7ff fea8 	bl	23fccc8 <_ZN5Print6printfEPKcz>
  delay(1000); // Adjust as needed
 23fcf78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 23fcf7c:	b006      	add	sp, #24
 23fcf7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  delay(1000); // Adjust as needed
 23fcf82:	f001 bd99 	b.w	23feab8 <delay>
    Serial.println("Error reading from MPU6050");
 23fcf86:	f001 ff1f 	bl	23fedc8 <_Z16_fetch_usbserialv>
 23fcf8a:	4912      	ldr	r1, [pc, #72]	; (23fcfd4 <loop+0x238>)
 23fcf8c:	f001 fbdb 	bl	23fe746 <_ZN5Print7printlnEPKc>
 23fcf90:	e7f2      	b.n	23fcf78 <loop+0x1dc>
 23fcf92:	bf00      	nop
 23fcf94:	1007ae31 	.word	0x1007ae31
 23fcf98:	1007ae38 	.word	0x1007ae38
 23fcf9c:	1007ae39 	.word	0x1007ae39
 23fcfa0:	1007ae40 	.word	0x1007ae40
 23fcfa4:	1007ae41 	.word	0x1007ae41
 23fcfa8:	38800000 	.word	0x38800000
 23fcfac:	1007ae3c 	.word	0x1007ae3c
 23fcfb0:	1007ae2c 	.word	0x1007ae2c
 23fcfb4:	1007ae34 	.word	0x1007ae34
 23fcfb8:	1007ae44 	.word	0x1007ae44
 23fcfbc:	023ff731 	.word	0x023ff731
 23fcfc0:	1007ae94 	.word	0x1007ae94
 23fcfc4:	023ff73c 	.word	0x023ff73c
 23fcfc8:	023ff74c 	.word	0x023ff74c
 23fcfcc:	023ff769 	.word	0x023ff769
 23fcfd0:	023ff786 	.word	0x023ff786
 23fcfd4:	023ff7a3 	.word	0x023ff7a3
 23fcfd8:	1007ae30 	.word	0x1007ae30

023fcfdc <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fcfdc:	2200      	movs	r2, #0
 23fcfde:	b508      	push	{r3, lr}
 23fcfe0:	4b07      	ldr	r3, [pc, #28]	; (23fd000 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fcfe2:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fcfe4:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
 23fcfe8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 23fcfec:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fcfee:	f001 f829 	bl	23fe044 <set_system_mode>
 23fcff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_SSD1306 display(OLED_RESET);
 23fcff6:	f04f 31ff 	mov.w	r1, #4294967295
 23fcffa:	4802      	ldr	r0, [pc, #8]	; (23fd004 <_GLOBAL__sub_I_SystemMode+0x28>)
 23fcffc:	f000 b9ca 	b.w	23fd394 <_ZN16Adafruit_SSD1306C1Ea>
 23fd000:	1007ae20 	.word	0x1007ae20
 23fd004:	1007ae44 	.word	0x1007ae44

023fd008 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23fd008:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 23fd00a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23fd00c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
 23fd010:	2d02      	cmp	r5, #2
 23fd012:	d069      	beq.n	23fd0e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
 23fd014:	2d03      	cmp	r5, #3
 23fd016:	f000 809b 	beq.w	23fd150 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x148>
 23fd01a:	2d01      	cmp	r5, #1
 23fd01c:	d16c      	bne.n	23fd0f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 23fd01e:	43d2      	mvns	r2, r2
 23fd020:	8905      	ldrh	r5, [r0, #8]
 23fd022:	442a      	add	r2, r5
 23fd024:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 23fd026:	2a00      	cmp	r2, #0
 23fd028:	db5d      	blt.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd02a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 23fd02e:	4295      	cmp	r5, r2
 23fd030:	dd59      	ble.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 23fd032:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 23fd034:	bfbe      	ittt	lt
 23fd036:	185b      	addlt	r3, r3, r1
    __y = 0;
 23fd038:	2100      	movlt	r1, #0
    __h += __y;
 23fd03a:	b21b      	sxthlt	r3, r3

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 23fd03c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 23fd040:	18cd      	adds	r5, r1, r3
 23fd042:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 23fd044:	bfc4      	itt	gt
 23fd046:	1a43      	subgt	r3, r0, r1
 23fd048:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 23fd04a:	2b00      	cmp	r3, #0
 23fd04c:	dd4b      	ble.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 23fd04e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
 23fd052:	f8df c124 	ldr.w	ip, [pc, #292]	; 23fd178 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>
 23fd056:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 23fd05a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
 23fd05e:	b2db      	uxtb	r3, r3
  pBuf += x;
 23fd060:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
 23fd064:	d01a      	beq.n	23fd09c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 23fd066:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 23fd06a:	4e41      	ldr	r6, [pc, #260]	; (23fd170 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
    mod = 8-mod;
 23fd06c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 23fd06e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
 23fd070:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
 23fd072:	bf3f      	itttt	cc
 23fd074:	26ff      	movcc	r6, #255	; 0xff
 23fd076:	eba5 0e03 	subcc.w	lr, r5, r3
 23fd07a:	fa46 f60e 	asrcc.w	r6, r6, lr
 23fd07e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
 23fd080:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
 23fd084:	2c01      	cmp	r4, #1
      *pBuf |= mask;
 23fd086:	bf0c      	ite	eq
 23fd088:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
 23fd08a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 23fd08c:	42ab      	cmp	r3, r5
 23fd08e:	f80c 6002 	strb.w	r6, [ip, r2]
 23fd092:	d328      	bcc.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
 23fd094:	3908      	subs	r1, #8
 23fd096:	440b      	add	r3, r1
 23fd098:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
 23fd09a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 23fd09c:	2b07      	cmp	r3, #7
 23fd09e:	d919      	bls.n	23fd0d4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 23fd0a0:	2c01      	cmp	r4, #1
 23fd0a2:	f04f 35ff 	mov.w	r5, #4294967295
 23fd0a6:	bf18      	it	ne
 23fd0a8:	2500      	movne	r5, #0
 23fd0aa:	461a      	mov	r2, r3
 23fd0ac:	b2ed      	uxtb	r5, r5
 23fd0ae:	f100 0180 	add.w	r1, r0, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 23fd0b2:	3a08      	subs	r2, #8
 23fd0b4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 23fd0b6:	2a07      	cmp	r2, #7
      *pBuf = val;
 23fd0b8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
 23fd0bc:	f101 0180 	add.w	r1, r1, #128	; 0x80
 23fd0c0:	d8f7      	bhi.n	23fd0b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
 23fd0c2:	f1a3 0208 	sub.w	r2, r3, #8
 23fd0c6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 23fd0ca:	3201      	adds	r2, #1
 23fd0cc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
 23fd0d0:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 23fd0d4:	b13b      	cbz	r3, 23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 23fd0d6:	4a27      	ldr	r2, [pc, #156]	; (23fd174 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
    if(color == WHITE) { 
 23fd0d8:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 23fd0da:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
 23fd0dc:	7803      	ldrb	r3, [r0, #0]
 23fd0de:	bf0c      	ite	eq
 23fd0e0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 23fd0e2:	4393      	bicne	r3, r2
 23fd0e4:	7003      	strb	r3, [r0, #0]
}
 23fd0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fd0e8:	43d2      	mvns	r2, r2
 23fd0ea:	8945      	ldrh	r5, [r0, #10]
 23fd0ec:	442a      	add	r2, r5
      x -= (w-1);
 23fd0ee:	18cd      	adds	r5, r1, r3
 23fd0f0:	8901      	ldrh	r1, [r0, #8]
      y = HEIGHT - y - 1;
 23fd0f2:	b212      	sxth	r2, r2
      x -= (w-1);
 23fd0f4:	1b49      	subs	r1, r1, r5
 23fd0f6:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
 23fd0f8:	2a00      	cmp	r2, #0
 23fd0fa:	dbf4      	blt.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd0fc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 23fd100:	4295      	cmp	r5, r2
 23fd102:	ddf0      	ble.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
 23fd104:	2900      	cmp	r1, #0
    w += x;
 23fd106:	bfbe      	ittt	lt
 23fd108:	185b      	addlt	r3, r3, r1
    x = 0;
 23fd10a:	2100      	movlt	r1, #0
    w += x;
 23fd10c:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) { 
 23fd10e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 23fd112:	18ce      	adds	r6, r1, r3
 23fd114:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 23fd116:	bfc4      	itt	gt
 23fd118:	1a6b      	subgt	r3, r5, r1
 23fd11a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
 23fd11c:	2b00      	cmp	r3, #0
 23fd11e:	dde2      	ble.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += x;
 23fd120:	2580      	movs	r5, #128	; 0x80
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 23fd122:	10d0      	asrs	r0, r2, #3
  pBuf += x;
 23fd124:	fb10 1105 	smlabb	r1, r0, r5, r1
 23fd128:	4813      	ldr	r0, [pc, #76]	; (23fd178 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
  if(color == WHITE) { 
 23fd12a:	2c01      	cmp	r4, #1
  pBuf += x;
 23fd12c:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
 23fd12e:	f002 0007 	and.w	r0, r2, #7
 23fd132:	f04f 0201 	mov.w	r2, #1
 23fd136:	fa02 f200 	lsl.w	r2, r2, r0
 23fd13a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
 23fd13c:	440b      	add	r3, r1
 23fd13e:	d10c      	bne.n	23fd15a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
 23fd140:	428b      	cmp	r3, r1
 23fd142:	d0d0      	beq.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd144:	f811 0b01 	ldrb.w	r0, [r1], #1
 23fd148:	4310      	orrs	r0, r2
 23fd14a:	f801 0c01 	strb.w	r0, [r1, #-1]
 23fd14e:	e7f7      	b.n	23fd140 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x138>
      y -= (w-1);
 23fd150:	18cd      	adds	r5, r1, r3
 23fd152:	8941      	ldrh	r1, [r0, #10]
 23fd154:	1b49      	subs	r1, r1, r5
 23fd156:	b209      	sxth	r1, r1
      break;
 23fd158:	e765      	b.n	23fd026 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
 23fd15a:	43d2      	mvns	r2, r2
 23fd15c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
 23fd15e:	428b      	cmp	r3, r1
 23fd160:	d0c1      	beq.n	23fd0e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fd162:	f811 0b01 	ldrb.w	r0, [r1], #1
 23fd166:	4010      	ands	r0, r2
 23fd168:	f801 0c01 	strb.w	r0, [r1, #-1]
 23fd16c:	e7f7      	b.n	23fd15e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x156>
 23fd16e:	bf00      	nop
 23fd170:	1007a9a8 	.word	0x1007a9a8
 23fd174:	1007a9a0 	.word	0x1007a9a0
 23fd178:	1007a9b0 	.word	0x1007a9b0

023fd17c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fd17c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
 23fd17e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fd180:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
 23fd184:	2d02      	cmp	r5, #2
 23fd186:	d036      	beq.n	23fd1f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x7a>
 23fd188:	2d03      	cmp	r5, #3
 23fd18a:	f000 809d 	beq.w	23fd2c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14c>
 23fd18e:	2d01      	cmp	r5, #1
 23fd190:	d139      	bne.n	23fd206 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8a>
      x -= (h-1);
 23fd192:	18d5      	adds	r5, r2, r3
 23fd194:	8902      	ldrh	r2, [r0, #8]
 23fd196:	1b52      	subs	r2, r2, r5
 23fd198:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
 23fd19a:	2900      	cmp	r1, #0
 23fd19c:	f2c0 8093 	blt.w	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd1a0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 23fd1a4:	428d      	cmp	r5, r1
 23fd1a6:	f340 808e 	ble.w	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  if(x < 0) { 
 23fd1aa:	2a00      	cmp	r2, #0
    w += x;
 23fd1ac:	bfbe      	ittt	lt
 23fd1ae:	189b      	addlt	r3, r3, r2
    x = 0;
 23fd1b0:	2200      	movlt	r2, #0
    w += x;
 23fd1b2:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) { 
 23fd1b4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 23fd1b8:	18d6      	adds	r6, r2, r3
 23fd1ba:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 23fd1bc:	bfc4      	itt	gt
 23fd1be:	1aab      	subgt	r3, r5, r2
 23fd1c0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
 23fd1c2:	2b00      	cmp	r3, #0
 23fd1c4:	dd7f      	ble.n	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  pBuf += x;
 23fd1c6:	2580      	movs	r5, #128	; 0x80
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 23fd1c8:	10c8      	asrs	r0, r1, #3
  pBuf += x;
 23fd1ca:	fb10 2205 	smlabb	r2, r0, r5, r2
 23fd1ce:	4846      	ldr	r0, [pc, #280]	; (23fd2e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
  if(color == WHITE) { 
 23fd1d0:	2c01      	cmp	r4, #1
  pBuf += x;
 23fd1d2:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
 23fd1d4:	f001 0007 	and.w	r0, r1, #7
 23fd1d8:	f04f 0101 	mov.w	r1, #1
 23fd1dc:	fa01 f100 	lsl.w	r1, r1, r0
 23fd1e0:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
 23fd1e2:	4413      	add	r3, r2
 23fd1e4:	d175      	bne.n	23fd2d2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
    while(w--) { *pBuf++ |= mask; }
 23fd1e6:	429a      	cmp	r2, r3
 23fd1e8:	d06d      	beq.n	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd1ea:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fd1ee:	4308      	orrs	r0, r1
 23fd1f0:	f802 0c01 	strb.w	r0, [r2, #-1]
 23fd1f4:	e7f7      	b.n	23fd1e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x6a>
      x = WIDTH - x - 1;
 23fd1f6:	43c9      	mvns	r1, r1
 23fd1f8:	8905      	ldrh	r5, [r0, #8]
 23fd1fa:	4429      	add	r1, r5
      y -= (h-1);
 23fd1fc:	18d5      	adds	r5, r2, r3
 23fd1fe:	8942      	ldrh	r2, [r0, #10]
      x = WIDTH - x - 1;
 23fd200:	b209      	sxth	r1, r1
      y -= (h-1);
 23fd202:	1b52      	subs	r2, r2, r5
 23fd204:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
 23fd206:	2900      	cmp	r1, #0
 23fd208:	db5d      	blt.n	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd20a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 23fd20e:	428d      	cmp	r5, r1
 23fd210:	dd59      	ble.n	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  if(__y < 0) { 
 23fd212:	2a00      	cmp	r2, #0
    __h += __y;
 23fd214:	bfbe      	ittt	lt
 23fd216:	189b      	addlt	r3, r3, r2
    __y = 0;
 23fd218:	2200      	movlt	r2, #0
    __h += __y;
 23fd21a:	b21b      	sxthlt	r3, r3
  if( (__y + __h) > HEIGHT) { 
 23fd21c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 23fd220:	18d5      	adds	r5, r2, r3
 23fd222:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 23fd224:	bfc4      	itt	gt
 23fd226:	1a83      	subgt	r3, r0, r2
 23fd228:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
 23fd22a:	2b00      	cmp	r3, #0
 23fd22c:	dd4b      	ble.n	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  pBuf += x;
 23fd22e:	f3c2 00c4 	ubfx	r0, r2, #3, #5
 23fd232:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 23fd2e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>
 23fd236:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
 23fd23a:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
 23fd23e:	b2db      	uxtb	r3, r3
  pBuf += x;
 23fd240:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
 23fd244:	d01a      	beq.n	23fd27c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x100>
    mod = 8-mod;
 23fd246:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
 23fd24a:	4e28      	ldr	r6, [pc, #160]	; (23fd2ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
    mod = 8-mod;
 23fd24c:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
 23fd24e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
 23fd250:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
 23fd252:	bf3f      	itttt	cc
 23fd254:	26ff      	movcc	r6, #255	; 0xff
 23fd256:	eba5 0e03 	subcc.w	lr, r5, r3
 23fd25a:	fa46 f60e 	asrcc.w	r6, r6, lr
 23fd25e:	4037      	andcc	r7, r6
      *pBuf |= mask;
 23fd260:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
 23fd264:	2c01      	cmp	r4, #1
      *pBuf |= mask;
 23fd266:	bf0c      	ite	eq
 23fd268:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
 23fd26a:	43be      	bicne	r6, r7
    if(h<mod) { return; }
 23fd26c:	42ab      	cmp	r3, r5
 23fd26e:	f80c 6001 	strb.w	r6, [ip, r1]
 23fd272:	d328      	bcc.n	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    h -= mod;
 23fd274:	3a08      	subs	r2, #8
 23fd276:	4413      	add	r3, r2
 23fd278:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
 23fd27a:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
 23fd27c:	2b07      	cmp	r3, #7
 23fd27e:	d919      	bls.n	23fd2b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x138>
    register uint8_t val = (color == WHITE) ? 255 : 0;
 23fd280:	2c01      	cmp	r4, #1
 23fd282:	f04f 35ff 	mov.w	r5, #4294967295
 23fd286:	bf18      	it	ne
 23fd288:	2500      	movne	r5, #0
 23fd28a:	461a      	mov	r2, r3
 23fd28c:	b2ed      	uxtb	r5, r5
 23fd28e:	f100 0180 	add.w	r1, r0, #128	; 0x80
      h -= 8;
 23fd292:	3a08      	subs	r2, #8
 23fd294:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 23fd296:	2a07      	cmp	r2, #7
      *pBuf = val;
 23fd298:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
 23fd29c:	f101 0180 	add.w	r1, r1, #128	; 0x80
 23fd2a0:	d8f7      	bhi.n	23fd292 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x116>
      pBuf += SSD1306_LCDWIDTH;
 23fd2a2:	f1a3 0208 	sub.w	r2, r3, #8
 23fd2a6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 23fd2aa:	3201      	adds	r2, #1
 23fd2ac:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
 23fd2b0:	f003 0307 	and.w	r3, r3, #7
  if(h) {
 23fd2b4:	b13b      	cbz	r3, 23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    register uint8_t mask = postmask[mod];
 23fd2b6:	4a0e      	ldr	r2, [pc, #56]	; (23fd2f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 23fd2b8:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 23fd2ba:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
 23fd2bc:	7803      	ldrb	r3, [r0, #0]
 23fd2be:	bf0c      	ite	eq
 23fd2c0:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
 23fd2c2:	4393      	bicne	r3, r2
 23fd2c4:	7003      	strb	r3, [r0, #0]
}
 23fd2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fd2c8:	43c9      	mvns	r1, r1
 23fd2ca:	8945      	ldrh	r5, [r0, #10]
 23fd2cc:	4429      	add	r1, r5
 23fd2ce:	b209      	sxth	r1, r1
      break;
 23fd2d0:	e763      	b.n	23fd19a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
 23fd2d2:	43c9      	mvns	r1, r1
 23fd2d4:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
 23fd2d6:	429a      	cmp	r2, r3
 23fd2d8:	d0f5      	beq.n	23fd2c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fd2da:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fd2de:	4008      	ands	r0, r1
 23fd2e0:	f802 0c01 	strb.w	r0, [r2, #-1]
 23fd2e4:	e7f7      	b.n	23fd2d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x15a>
 23fd2e6:	bf00      	nop
 23fd2e8:	1007a9b0 	.word	0x1007a9b0
 23fd2ec:	1007a9a8 	.word	0x1007a9a8
 23fd2f0:	1007a9a0 	.word	0x1007a9a0

023fd2f4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 23fd2f4:	4770      	bx	lr
	...

023fd2f8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fd2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 23fd2fa:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fd2fc:	4606      	mov	r6, r0
 23fd2fe:	4614      	mov	r4, r2
 23fd300:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 23fd302:	db2d      	blt.n	23fd360 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fd304:	f000 fbdb 	bl	23fdabe <_ZN12Adafruit_GFX5widthEv>
 23fd308:	42a8      	cmp	r0, r5
 23fd30a:	dd29      	ble.n	23fd360 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fd30c:	2c00      	cmp	r4, #0
 23fd30e:	db27      	blt.n	23fd360 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fd310:	4630      	mov	r0, r6
 23fd312:	f000 fbd7 	bl	23fdac4 <_ZN12Adafruit_GFX6heightEv>
 23fd316:	42a0      	cmp	r0, r4
 23fd318:	dd22      	ble.n	23fd360 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
 23fd31a:	4630      	mov	r0, r6
 23fd31c:	f000 fbbf 	bl	23fda9e <_ZN12Adafruit_GFX11getRotationEv>
 23fd320:	2802      	cmp	r0, #2
 23fd322:	d01e      	beq.n	23fd362 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
 23fd324:	2803      	cmp	r0, #3
 23fd326:	d025      	beq.n	23fd374 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
 23fd328:	2801      	cmp	r0, #1
 23fd32a:	d104      	bne.n	23fd336 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
 23fd32c:	43e2      	mvns	r2, r4
 23fd32e:	8933      	ldrh	r3, [r6, #8]
    break;
 23fd330:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
 23fd332:	441a      	add	r2, r3
 23fd334:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 23fd336:	4622      	mov	r2, r4
 23fd338:	2180      	movs	r1, #128	; 0x80
 23fd33a:	2c00      	cmp	r4, #0
 23fd33c:	bfb8      	it	lt
 23fd33e:	1de2      	addlt	r2, r4, #7
 23fd340:	10d2      	asrs	r2, r2, #3
 23fd342:	fb12 5501 	smlabb	r5, r2, r1, r5
 23fd346:	2201      	movs	r2, #1
 23fd348:	490d      	ldr	r1, [pc, #52]	; (23fd380 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
 23fd34a:	f004 0407 	and.w	r4, r4, #7
 23fd34e:	574b      	ldrsb	r3, [r1, r5]
 23fd350:	fa02 f404 	lsl.w	r4, r2, r4
 23fd354:	b264      	sxtb	r4, r4
  if (color == WHITE) 
 23fd356:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 23fd358:	bf0c      	ite	eq
 23fd35a:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 23fd35c:	43a3      	bicne	r3, r4
 23fd35e:	554b      	strb	r3, [r1, r5]
}
 23fd360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    y = HEIGHT - y - 1;
 23fd362:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
 23fd364:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 23fd366:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
 23fd368:	3901      	subs	r1, #1
 23fd36a:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
 23fd36c:	4414      	add	r4, r2
    x = WIDTH - x - 1;
 23fd36e:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 23fd370:	b224      	sxth	r4, r4
    break;
 23fd372:	e7e0      	b.n	23fd336 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
 23fd374:	8973      	ldrh	r3, [r6, #10]
 23fd376:	3b01      	subs	r3, #1
 23fd378:	1b5b      	subs	r3, r3, r5
    break;
 23fd37a:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
 23fd37c:	b21c      	sxth	r4, r3
    break;
 23fd37e:	e7da      	b.n	23fd336 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
 23fd380:	1007a9b0 	.word	0x1007a9b0

023fd384 <_ZN16Adafruit_SSD1306D0Ev>:
 23fd384:	b510      	push	{r4, lr}
 23fd386:	4604      	mov	r4, r0
 23fd388:	2124      	movs	r1, #36	; 0x24
 23fd38a:	f7ff fc82 	bl	23fcc92 <_ZdlPvj>
 23fd38e:	4620      	mov	r0, r4
 23fd390:	bd10      	pop	{r4, pc}
	...

023fd394 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 23fd394:	b538      	push	{r3, r4, r5, lr}
 23fd396:	4604      	mov	r4, r0
 23fd398:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 23fd39a:	2240      	movs	r2, #64	; 0x40
 23fd39c:	2180      	movs	r1, #128	; 0x80
 23fd39e:	f000 faa5 	bl	23fd8ec <_ZN12Adafruit_GFXC1Ess>
 23fd3a2:	4b06      	ldr	r3, [pc, #24]	; (23fd3bc <_ZN16Adafruit_SSD1306C1Ea+0x28>)
}
 23fd3a4:	4620      	mov	r0, r4
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 23fd3a6:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
 23fd3a8:	23ff      	movs	r3, #255	; 0xff
 23fd3aa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 23fd3ae:	7763      	strb	r3, [r4, #29]
 23fd3b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  rst = reset;
 23fd3b4:	f884 5020 	strb.w	r5, [r4, #32]
  sclk = dc = cs = sid = -1;
 23fd3b8:	83e3      	strh	r3, [r4, #30]
}
 23fd3ba:	bd38      	pop	{r3, r4, r5, pc}
 23fd3bc:	023ff7c8 	.word	0x023ff7c8

023fd3c0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 23fd3c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23fd3c4:	2100      	movs	r1, #0
 23fd3c6:	4801      	ldr	r0, [pc, #4]	; (23fd3cc <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
 23fd3c8:	f002 b8e5 	b.w	23ff596 <memset>
 23fd3cc:	1007a9b0 	.word	0x1007a9b0

023fd3d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fd3d0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fd3d2:	4c0a      	ldr	r4, [pc, #40]	; (23fd3fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fd3d4:	e8d4 1f8f 	ldab	r1, [r4]
 23fd3d8:	f011 0101 	ands.w	r1, r1, #1
 23fd3dc:	d10b      	bne.n	23fd3f6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fd3de:	4620      	mov	r0, r4
 23fd3e0:	9101      	str	r1, [sp, #4]
 23fd3e2:	f7ff fc65 	bl	23fccb0 <__cxa_guard_acquire>
 23fd3e6:	9901      	ldr	r1, [sp, #4]
 23fd3e8:	b128      	cbz	r0, 23fd3f6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fd3ea:	4805      	ldr	r0, [pc, #20]	; (23fd400 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fd3ec:	f001 f83c 	bl	23fe468 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fd3f0:	4620      	mov	r0, r4
 23fd3f2:	f7ff fc62 	bl	23fccba <__cxa_guard_release>
        return instance;
    }
 23fd3f6:	4802      	ldr	r0, [pc, #8]	; (23fd400 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fd3f8:	b002      	add	sp, #8
 23fd3fa:	bd10      	pop	{r4, pc}
 23fd3fc:	1007ae68 	.word	0x1007ae68
 23fd400:	1007ae6c 	.word	0x1007ae6c

023fd404 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
 23fd404:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
 23fd406:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 23fd40a:	b143      	cbz	r3, 23fd41e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
 23fd40c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23fd40e:	f7ff ffdf 	bl	23fd3d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd412:	9901      	ldr	r1, [sp, #4]
}
 23fd414:	b003      	add	sp, #12
 23fd416:	f85d eb04 	ldr.w	lr, [sp], #4
 23fd41a:	f001 b8d9 	b.w	23fe5d0 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 23fd41e:	460b      	mov	r3, r1
 23fd420:	2201      	movs	r2, #1
 23fd422:	7f81      	ldrb	r1, [r0, #30]
 23fd424:	7f40      	ldrb	r0, [r0, #29]
}
 23fd426:	b003      	add	sp, #12
 23fd428:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 23fd42c:	f001 bf56 	b.w	23ff2dc <shiftOut>

023fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fd430:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 23fd432:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fd436:	4604      	mov	r4, r0
  if (sid != -1)
 23fd438:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fd43a:	460d      	mov	r5, r1
  if (sid != -1)
 23fd43c:	d01d      	beq.n	23fd47a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
 23fd43e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 23fd442:	2101      	movs	r1, #1
 23fd444:	b280      	uxth	r0, r0
 23fd446:	f001 ff30 	bl	23ff2aa <digitalWrite>
    digitalWrite(dc, LOW);
 23fd44a:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23fd44e:	2100      	movs	r1, #0
 23fd450:	b280      	uxth	r0, r0
 23fd452:	f001 ff2a 	bl	23ff2aa <digitalWrite>
    digitalWrite(cs, LOW);
 23fd456:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd45a:	2100      	movs	r1, #0
 23fd45c:	b280      	uxth	r0, r0
 23fd45e:	f001 ff24 	bl	23ff2aa <digitalWrite>
    fastSPIwrite(c);
 23fd462:	4629      	mov	r1, r5
 23fd464:	4620      	mov	r0, r4
 23fd466:	f7ff ffcd 	bl	23fd404 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
 23fd46a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd46e:	2101      	movs	r1, #1
}
 23fd470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
 23fd474:	b280      	uxth	r0, r0
 23fd476:	f001 bf18 	b.w	23ff2aa <digitalWrite>
    Wire.beginTransmission(_i2caddr);
 23fd47a:	f002 f82d 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd47e:	f994 101b 	ldrsb.w	r1, [r4, #27]
 23fd482:	f001 fda0 	bl	23fefc6 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 23fd486:	f002 f827 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd48a:	6803      	ldr	r3, [r0, #0]
 23fd48c:	2100      	movs	r1, #0
 23fd48e:	689b      	ldr	r3, [r3, #8]
 23fd490:	4798      	blx	r3
    Wire.write(c);
 23fd492:	f002 f821 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd496:	6803      	ldr	r3, [r0, #0]
 23fd498:	4629      	mov	r1, r5
 23fd49a:	689b      	ldr	r3, [r3, #8]
 23fd49c:	4798      	blx	r3
    Wire.endTransmission();
 23fd49e:	f002 f81b 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
}
 23fd4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
 23fd4a6:	f001 bd95 	b.w	23fefd4 <_ZN7TwoWire15endTransmissionEv>
	...

023fd4ac <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 23fd4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd4ae:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
 23fd4b0:	2121      	movs	r1, #33	; 0x21
 23fd4b2:	f7ff ffbd 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 23fd4b6:	2100      	movs	r1, #0
 23fd4b8:	4620      	mov	r0, r4
 23fd4ba:	f7ff ffb9 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
 23fd4be:	217f      	movs	r1, #127	; 0x7f
 23fd4c0:	4620      	mov	r0, r4
 23fd4c2:	f7ff ffb5 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
 23fd4c6:	2122      	movs	r1, #34	; 0x22
 23fd4c8:	4620      	mov	r0, r4
 23fd4ca:	f7ff ffb1 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 23fd4ce:	2100      	movs	r1, #0
 23fd4d0:	4620      	mov	r0, r4
 23fd4d2:	f7ff ffad 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
 23fd4d6:	2107      	movs	r1, #7
 23fd4d8:	4620      	mov	r0, r4
 23fd4da:	f7ff ffa9 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
 23fd4de:	f994 301d 	ldrsb.w	r3, [r4, #29]
 23fd4e2:	4f29      	ldr	r7, [pc, #164]	; (23fd588 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
 23fd4e4:	3301      	adds	r3, #1
 23fd4e6:	d02a      	beq.n	23fd53e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
 23fd4e8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd4ec:	2101      	movs	r1, #1
 23fd4ee:	b280      	uxth	r0, r0
 23fd4f0:	f001 fedb 	bl	23ff2aa <digitalWrite>
    digitalWrite(dc, HIGH);
 23fd4f4:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23fd4f8:	2101      	movs	r1, #1
 23fd4fa:	b280      	uxth	r0, r0
 23fd4fc:	f001 fed5 	bl	23ff2aa <digitalWrite>
    digitalWrite(cs, LOW);
 23fd500:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd504:	2100      	movs	r1, #0
 23fd506:	b280      	uxth	r0, r0
 23fd508:	f001 fecf 	bl	23ff2aa <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fd50c:	2001      	movs	r0, #1
 23fd50e:	f000 fb31 	bl	23fdb74 <HAL_Delay_Microseconds>
 23fd512:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fd516:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
 23fd518:	4620      	mov	r0, r4
 23fd51a:	f817 1b01 	ldrb.w	r1, [r7], #1
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fd51e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
 23fd520:	f7ff ff70 	bl	23fd404 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fd524:	2d00      	cmp	r5, #0
 23fd526:	d1f6      	bne.n	23fd516 <_ZN16Adafruit_SSD13067displayEv+0x6a>
 23fd528:	2001      	movs	r0, #1
 23fd52a:	f000 fb23 	bl	23fdb74 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
 23fd52e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd532:	2101      	movs	r1, #1
}
 23fd534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
 23fd538:	b280      	uxth	r0, r0
 23fd53a:	f001 beb6 	b.w	23ff2aa <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fd53e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
 23fd540:	f001 ffca 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd544:	f994 101b 	ldrsb.w	r1, [r4, #27]
 23fd548:	f001 fd3d 	bl	23fefc6 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
 23fd54c:	f001 ffc4 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd550:	6803      	ldr	r3, [r0, #0]
 23fd552:	2140      	movs	r1, #64	; 0x40
 23fd554:	689b      	ldr	r3, [r3, #8]
 23fd556:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
 23fd558:	f105 0610 	add.w	r6, r5, #16
 23fd55c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
 23fd55e:	f001 ffbb 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd562:	6803      	ldr	r3, [r0, #0]
 23fd564:	5d79      	ldrb	r1, [r7, r5]
 23fd566:	689b      	ldr	r3, [r3, #8]
 23fd568:	4798      	blx	r3
		i++;
 23fd56a:	1c6b      	adds	r3, r5, #1
 23fd56c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
 23fd56e:	42ae      	cmp	r6, r5
 23fd570:	d1f5      	bne.n	23fd55e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
 23fd572:	f001 ffb1 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd576:	f001 fd2d 	bl	23fefd4 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fd57a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 23fd57e:	d100      	bne.n	23fd582 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
 23fd580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fd582:	4635      	mov	r5, r6
 23fd584:	e7dc      	b.n	23fd540 <_ZN16Adafruit_SSD13067displayEv+0x94>
 23fd586:	bf00      	nop
 23fd588:	1007a9b0 	.word	0x1007a9b0

023fd58c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fd58c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
 23fd58e:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fd592:	4604      	mov	r4, r0
  if (sid != -1){
 23fd594:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fd596:	460d      	mov	r5, r1
  _vccstate = vccstate;
 23fd598:	7701      	strb	r1, [r0, #28]
  _i2caddr = i2caddr;
 23fd59a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
 23fd59c:	f000 80c9 	beq.w	23fd732 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
 23fd5a0:	f990 001f 	ldrsb.w	r0, [r0, #31]
 23fd5a4:	2101      	movs	r1, #1
 23fd5a6:	b280      	uxth	r0, r0
 23fd5a8:	f001 fe6e 	bl	23ff288 <pinMode>
    pinMode(cs, OUTPUT);
 23fd5ac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd5b0:	2101      	movs	r1, #1
 23fd5b2:	b280      	uxth	r0, r0
 23fd5b4:	f001 fe68 	bl	23ff288 <pinMode>
    if (!hwSPI){
 23fd5b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 23fd5bc:	2b00      	cmp	r3, #0
 23fd5be:	f000 80a6 	beq.w	23fd70e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
 23fd5c2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fd5c6:	2101      	movs	r1, #1
 23fd5c8:	b280      	uxth	r0, r0
 23fd5ca:	f001 fe6e 	bl	23ff2aa <digitalWrite>
        instance().setBitOrder(order);
 23fd5ce:	f7ff feff 	bl	23fd3d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd5d2:	2101      	movs	r1, #1
 23fd5d4:	f000 ff66 	bl	23fe4a4 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
 23fd5d8:	f7ff fefa 	bl	23fd3d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd5dc:	2110      	movs	r1, #16
 23fd5de:	f000 ffd1 	bl	23fe584 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
 23fd5e2:	f7ff fef5 	bl	23fd3d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd5e6:	2100      	movs	r1, #0
 23fd5e8:	f000 ff70 	bl	23fe4cc <_ZN8SPIClass11setDataModeEh>
        instance().begin();
 23fd5ec:	f7ff fef0 	bl	23fd3d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fd5f0:	f000 ff44 	bl	23fe47c <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
 23fd5f4:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd5f8:	2101      	movs	r1, #1
 23fd5fa:	b280      	uxth	r0, r0
 23fd5fc:	f001 fe44 	bl	23ff288 <pinMode>
  digitalWrite(rst, HIGH);
 23fd600:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd604:	2101      	movs	r1, #1
 23fd606:	b280      	uxth	r0, r0
 23fd608:	f001 fe4f 	bl	23ff2aa <digitalWrite>
  delay(1);
 23fd60c:	2001      	movs	r0, #1
 23fd60e:	f001 fa53 	bl	23feab8 <delay>
  digitalWrite(rst, LOW);
 23fd612:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd616:	2100      	movs	r1, #0
 23fd618:	b280      	uxth	r0, r0
 23fd61a:	f001 fe46 	bl	23ff2aa <digitalWrite>
  delay(10);
 23fd61e:	200a      	movs	r0, #10
 23fd620:	f001 fa4a 	bl	23feab8 <delay>
  digitalWrite(rst, HIGH);
 23fd624:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fd628:	2101      	movs	r1, #1
 23fd62a:	b280      	uxth	r0, r0
 23fd62c:	f001 fe3d 	bl	23ff2aa <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 23fd630:	4620      	mov	r0, r4
 23fd632:	21ae      	movs	r1, #174	; 0xae
 23fd634:	f7ff fefc 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 23fd638:	4620      	mov	r0, r4
 23fd63a:	21d5      	movs	r1, #213	; 0xd5
 23fd63c:	f7ff fef8 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
 23fd640:	4620      	mov	r0, r4
 23fd642:	2180      	movs	r1, #128	; 0x80
 23fd644:	f7ff fef4 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 23fd648:	4620      	mov	r0, r4
 23fd64a:	21a8      	movs	r1, #168	; 0xa8
 23fd64c:	f7ff fef0 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
 23fd650:	4620      	mov	r0, r4
 23fd652:	213f      	movs	r1, #63	; 0x3f
 23fd654:	f7ff feec 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 23fd658:	4620      	mov	r0, r4
 23fd65a:	21d3      	movs	r1, #211	; 0xd3
 23fd65c:	f7ff fee8 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
 23fd660:	4620      	mov	r0, r4
 23fd662:	2100      	movs	r1, #0
 23fd664:	f7ff fee4 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 23fd668:	4620      	mov	r0, r4
 23fd66a:	2140      	movs	r1, #64	; 0x40
 23fd66c:	f7ff fee0 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 23fd670:	218d      	movs	r1, #141	; 0x8d
 23fd672:	4620      	mov	r0, r4
 23fd674:	f7ff fedc 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fd678:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
 23fd67a:	bf0c      	ite	eq
 23fd67c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
 23fd67e:	2114      	movne	r1, #20
 23fd680:	4620      	mov	r0, r4
 23fd682:	f7ff fed5 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 23fd686:	4620      	mov	r0, r4
 23fd688:	2120      	movs	r1, #32
 23fd68a:	f7ff fed1 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
 23fd68e:	4620      	mov	r0, r4
 23fd690:	2100      	movs	r1, #0
 23fd692:	f7ff fecd 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
 23fd696:	4620      	mov	r0, r4
 23fd698:	21a1      	movs	r1, #161	; 0xa1
 23fd69a:	f7ff fec9 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
 23fd69e:	4620      	mov	r0, r4
 23fd6a0:	21c8      	movs	r1, #200	; 0xc8
 23fd6a2:	f7ff fec5 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 23fd6a6:	4620      	mov	r0, r4
 23fd6a8:	21da      	movs	r1, #218	; 0xda
 23fd6aa:	f7ff fec1 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
 23fd6ae:	4620      	mov	r0, r4
 23fd6b0:	2112      	movs	r1, #18
 23fd6b2:	f7ff febd 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 23fd6b6:	2181      	movs	r1, #129	; 0x81
 23fd6b8:	4620      	mov	r0, r4
 23fd6ba:	f7ff feb9 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fd6be:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
 23fd6c0:	bf0c      	ite	eq
 23fd6c2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
 23fd6c4:	21cf      	movne	r1, #207	; 0xcf
 23fd6c6:	4620      	mov	r0, r4
 23fd6c8:	f7ff feb2 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 23fd6cc:	21d9      	movs	r1, #217	; 0xd9
 23fd6ce:	4620      	mov	r0, r4
 23fd6d0:	f7ff feae 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fd6d4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
 23fd6d6:	bf0c      	ite	eq
 23fd6d8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
 23fd6da:	21f1      	movne	r1, #241	; 0xf1
 23fd6dc:	4620      	mov	r0, r4
 23fd6de:	f7ff fea7 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 23fd6e2:	4620      	mov	r0, r4
 23fd6e4:	21db      	movs	r1, #219	; 0xdb
 23fd6e6:	f7ff fea3 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
 23fd6ea:	4620      	mov	r0, r4
 23fd6ec:	2140      	movs	r1, #64	; 0x40
 23fd6ee:	f7ff fe9f 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 23fd6f2:	4620      	mov	r0, r4
 23fd6f4:	21a4      	movs	r1, #164	; 0xa4
 23fd6f6:	f7ff fe9b 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 23fd6fa:	4620      	mov	r0, r4
 23fd6fc:	21a6      	movs	r1, #166	; 0xa6
 23fd6fe:	f7ff fe97 	bl	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 23fd702:	4620      	mov	r0, r4
}
 23fd704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 23fd708:	21af      	movs	r1, #175	; 0xaf
 23fd70a:	f7ff be91 	b.w	23fd430 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
 23fd70e:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23fd712:	2101      	movs	r1, #1
 23fd714:	b280      	uxth	r0, r0
 23fd716:	f001 fdb7 	bl	23ff288 <pinMode>
    	pinMode(sclk, OUTPUT);
 23fd71a:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23fd71e:	2101      	movs	r1, #1
 23fd720:	b280      	uxth	r0, r0
 23fd722:	f001 fdb1 	bl	23ff288 <pinMode>
    if (hwSPI){
 23fd726:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 23fd72a:	2b00      	cmp	r3, #0
 23fd72c:	f43f af62 	beq.w	23fd5f4 <_ZN16Adafruit_SSD13065beginEhh+0x68>
 23fd730:	e747      	b.n	23fd5c2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
 23fd732:	f001 fed1 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23fd736:	f001 fc1b 	bl	23fef70 <_ZN7TwoWire5beginEv>
 23fd73a:	e75b      	b.n	23fd5f4 <_ZN16Adafruit_SSD13065beginEhh+0x68>

023fd73c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 23fd73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd740:	461f      	mov	r7, r3
 23fd742:	b085      	sub	sp, #20
 23fd744:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fd748:	eba7 0a01 	sub.w	sl, r7, r1
 23fd74c:	eba8 0902 	sub.w	r9, r8, r2
 23fd750:	f1b9 0f00 	cmp.w	r9, #0
 23fd754:	bfb8      	it	lt
 23fd756:	f1c9 0900 	rsblt	r9, r9, #0
 23fd75a:	f1ba 0f00 	cmp.w	sl, #0
 23fd75e:	bfb8      	it	lt
 23fd760:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23fd764:	45d1      	cmp	r9, sl
			    uint16_t color) {
 23fd766:	4683      	mov	fp, r0
 23fd768:	460c      	mov	r4, r1
 23fd76a:	4615      	mov	r5, r2
 23fd76c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23fd770:	dd04      	ble.n	23fd77c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
 23fd772:	463a      	mov	r2, r7
    swap(x0, y0);
 23fd774:	462c      	mov	r4, r5
    swap(x1, y1);
 23fd776:	4647      	mov	r7, r8
    swap(x0, y0);
 23fd778:	460d      	mov	r5, r1
    swap(x1, y1);
 23fd77a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23fd77c:	42bc      	cmp	r4, r7
 23fd77e:	dd05      	ble.n	23fd78c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
 23fd780:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 23fd782:	4645      	mov	r5, r8
 23fd784:	4690      	mov	r8, r2
  if (x0 > x1) {
 23fd786:	4622      	mov	r2, r4
 23fd788:	463c      	mov	r4, r7
 23fd78a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23fd78c:	1b3e      	subs	r6, r7, r4
 23fd78e:	b2b2      	uxth	r2, r6
 23fd790:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23fd792:	eba8 0205 	sub.w	r2, r8, r5
 23fd796:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fd79a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23fd79e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fd7a2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23fd7a6:	4545      	cmp	r5, r8
 23fd7a8:	bfb4      	ite	lt
 23fd7aa:	2201      	movlt	r2, #1
 23fd7ac:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
 23fd7b0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23fd7b2:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23fd7b4:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 23fd7b6:	42bc      	cmp	r4, r7
 23fd7b8:	dc1c      	bgt.n	23fd7f4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
 23fd7ba:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23fd7be:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
 23fd7c0:	f8d2 8010 	ldr.w	r8, [r2, #16]
 23fd7c4:	bfc7      	ittee	gt
 23fd7c6:	4629      	movgt	r1, r5
 23fd7c8:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
 23fd7ca:	462a      	movle	r2, r5
 23fd7cc:	4621      	movle	r1, r4
      drawPixel(y0, x0, color);
 23fd7ce:	9303      	str	r3, [sp, #12]
      drawPixel(x0, y0, color);
 23fd7d0:	4658      	mov	r0, fp
 23fd7d2:	47c0      	blx	r8
    }
    err -= dy;
 23fd7d4:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
 23fd7d6:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23fd7d8:	1ab6      	subs	r6, r6, r2
 23fd7da:	b2b1      	uxth	r1, r6
 23fd7dc:	b236      	sxth	r6, r6
    if (err < 0) {
 23fd7de:	2e00      	cmp	r6, #0
 23fd7e0:	da05      	bge.n	23fd7ee <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
 23fd7e2:	9a02      	ldr	r2, [sp, #8]
 23fd7e4:	4415      	add	r5, r2
      err += dx;
 23fd7e6:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23fd7e8:	b22d      	sxth	r5, r5
      err += dx;
 23fd7ea:	1856      	adds	r6, r2, r1
 23fd7ec:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
 23fd7ee:	3401      	adds	r4, #1
 23fd7f0:	b224      	sxth	r4, r4
 23fd7f2:	e7e0      	b.n	23fd7b6 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
 23fd7f4:	b005      	add	sp, #20
 23fd7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fd7fa <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 23fd7fa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fd7fe:	4604      	mov	r4, r0
 23fd800:	4616      	mov	r6, r2
 23fd802:	468a      	mov	sl, r1
 23fd804:	461d      	mov	r5, r3
 23fd806:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 23fd80a:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
 23fd80c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 23fd810:	f8cd 8000 	str.w	r8, [sp]
 23fd814:	69ff      	ldr	r7, [r7, #28]
 23fd816:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 23fd818:	6823      	ldr	r3, [r4, #0]
 23fd81a:	f109 32ff 	add.w	r2, r9, #4294967295
 23fd81e:	f8cd 8000 	str.w	r8, [sp]
 23fd822:	4432      	add	r2, r6
 23fd824:	4651      	mov	r1, sl
 23fd826:	4620      	mov	r0, r4
 23fd828:	69df      	ldr	r7, [r3, #28]
 23fd82a:	b212      	sxth	r2, r2
 23fd82c:	462b      	mov	r3, r5
 23fd82e:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 23fd830:	6823      	ldr	r3, [r4, #0]
 23fd832:	f8cd 8000 	str.w	r8, [sp]
 23fd836:	4632      	mov	r2, r6
 23fd838:	4651      	mov	r1, sl
 23fd83a:	4620      	mov	r0, r4
 23fd83c:	699f      	ldr	r7, [r3, #24]
 23fd83e:	464b      	mov	r3, r9
 23fd840:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 23fd842:	1e6b      	subs	r3, r5, #1
 23fd844:	eb03 010a 	add.w	r1, r3, sl
 23fd848:	6823      	ldr	r3, [r4, #0]
 23fd84a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 23fd84e:	699d      	ldr	r5, [r3, #24]
 23fd850:	4632      	mov	r2, r6
 23fd852:	464b      	mov	r3, r9
 23fd854:	4620      	mov	r0, r4
 23fd856:	46ac      	mov	ip, r5
 23fd858:	b209      	sxth	r1, r1
}
 23fd85a:	b002      	add	sp, #8
 23fd85c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
 23fd860:	4760      	bx	ip

023fd862 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 23fd862:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 23fd864:	3b01      	subs	r3, #1
 23fd866:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fd86a:	4413      	add	r3, r2
 23fd86c:	6804      	ldr	r4, [r0, #0]
 23fd86e:	b21b      	sxth	r3, r3
 23fd870:	9300      	str	r3, [sp, #0]
 23fd872:	9501      	str	r5, [sp, #4]
 23fd874:	460b      	mov	r3, r1
 23fd876:	6964      	ldr	r4, [r4, #20]
 23fd878:	47a0      	blx	r4
}
 23fd87a:	b003      	add	sp, #12
 23fd87c:	bd30      	pop	{r4, r5, pc}

023fd87e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 23fd87e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 23fd880:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fd884:	6804      	ldr	r4, [r0, #0]
 23fd886:	e9cd 2500 	strd	r2, r5, [sp]
 23fd88a:	3b01      	subs	r3, #1
 23fd88c:	440b      	add	r3, r1
 23fd88e:	6964      	ldr	r4, [r4, #20]
 23fd890:	b21b      	sxth	r3, r3
 23fd892:	47a0      	blx	r4
}
 23fd894:	b003      	add	sp, #12
 23fd896:	bd30      	pop	{r4, r5, pc}

023fd898 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 23fd898:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fd89c:	4605      	mov	r5, r0
 23fd89e:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 23fd8a0:	460c      	mov	r4, r1
			    uint16_t color) {
 23fd8a2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fd8a6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  for (int16_t i=x; i<x+w; i++) {
 23fd8aa:	18ce      	adds	r6, r1, r3
 23fd8ac:	42b4      	cmp	r4, r6
 23fd8ae:	da0b      	bge.n	23fd8c8 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
 23fd8b0:	682b      	ldr	r3, [r5, #0]
 23fd8b2:	f8cd 8000 	str.w	r8, [sp]
 23fd8b6:	4621      	mov	r1, r4
 23fd8b8:	699f      	ldr	r7, [r3, #24]
 23fd8ba:	4652      	mov	r2, sl
 23fd8bc:	464b      	mov	r3, r9
 23fd8be:	4628      	mov	r0, r5
 23fd8c0:	3401      	adds	r4, #1
 23fd8c2:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
 23fd8c4:	b224      	sxth	r4, r4
 23fd8c6:	e7f1      	b.n	23fd8ac <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
 23fd8c8:	b002      	add	sp, #8
 23fd8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fd8ce <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 23fd8ce:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23fd8d0:	9101      	str	r1, [sp, #4]
 23fd8d2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fd8d6:	6802      	ldr	r2, [r0, #0]
 23fd8d8:	9100      	str	r1, [sp, #0]
 23fd8da:	6a54      	ldr	r4, [r2, #36]	; 0x24
 23fd8dc:	2200      	movs	r2, #0
 23fd8de:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fd8e2:	4611      	mov	r1, r2
 23fd8e4:	47a0      	blx	r4
}
 23fd8e6:	b002      	add	sp, #8
 23fd8e8:	bd10      	pop	{r4, pc}

023fd8ea <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
 23fd8ea:	4770      	bx	lr

023fd8ec <_ZN12Adafruit_GFXC1Ess>:
  WIDTH(w), HEIGHT(h)
 23fd8ec:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
 23fd8ee:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
 23fd8f0:	f04f 32ff 	mov.w	r2, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fd8f4:	b530      	push	{r4, r5, lr}
  textcolor = textbgcolor = 0xFFFF;
 23fd8f6:	6142      	str	r2, [r0, #20]
    Print() : write_error(0) {}
 23fd8f8:	2400      	movs	r4, #0
  textsize  = 1;
 23fd8fa:	2201      	movs	r2, #1
  WIDTH(w), HEIGHT(h)
 23fd8fc:	4d04      	ldr	r5, [pc, #16]	; (23fd910 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fd8fe:	6044      	str	r4, [r0, #4]
 23fd900:	6005      	str	r5, [r0, #0]
 23fd902:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
 23fd904:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
 23fd906:	6104      	str	r4, [r0, #16]
  textsize  = 1;
 23fd908:	8302      	strh	r2, [r0, #24]
  wrap      = true;
 23fd90a:	7682      	strb	r2, [r0, #26]
}
 23fd90c:	bd30      	pop	{r4, r5, pc}
 23fd90e:	bf00      	nop
 23fd910:	023ffcfc 	.word	0x023ffcfc

023fd914 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fd914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd918:	ed2d 8b02 	vpush	{d8}
 23fd91c:	b08d      	sub	sp, #52	; 0x34
 23fd91e:	9104      	str	r1, [sp, #16]
 23fd920:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 23fd924:	4607      	mov	r7, r0
 23fd926:	9105      	str	r1, [sp, #20]
 23fd928:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 23fd92c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 23fd930:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
 23fd932:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 23fd936:	9804      	ldr	r0, [sp, #16]
 23fd938:	4281      	cmp	r1, r0
 23fd93a:	dd52      	ble.n	23fd9e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
 23fd93c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 23fd940:	4291      	cmp	r1, r2
 23fd942:	dd4e      	ble.n	23fd9e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
 23fd944:	2106      	movs	r1, #6
 23fd946:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
 23fd94a:	2c00      	cmp	r4, #0
 23fd94c:	dd49      	ble.n	23fd9e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
 23fd94e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
 23fd952:	2c00      	cmp	r4, #0
 23fd954:	dd45      	ble.n	23fd9e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
  for (int8_t i=0; i<6; i++ ) {
 23fd956:	2400      	movs	r4, #0
      line = pgm_read_byte(font+(c*5)+i);
 23fd958:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23fd95c:	930b      	str	r3, [sp, #44]	; 0x2c
 23fd95e:	b293      	uxth	r3, r2
 23fd960:	9307      	str	r3, [sp, #28]
 23fd962:	3308      	adds	r3, #8
 23fd964:	b29b      	uxth	r3, r3
 23fd966:	9108      	str	r1, [sp, #32]
 23fd968:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
 23fd96a:	2c05      	cmp	r4, #5
      line = 0x0;
 23fd96c:	bf0f      	iteee	eq
 23fd96e:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
 23fd970:	4b2b      	ldrne	r3, [pc, #172]	; (23fda20 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
 23fd972:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
 23fd974:	191b      	addne	r3, r3, r4
 23fd976:	bf18      	it	ne
 23fd978:	5c9b      	ldrbne	r3, [r3, r2]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fd97a:	9a04      	ldr	r2, [sp, #16]
      line = 0x0;
 23fd97c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fd97e:	b2ab      	uxth	r3, r5
 23fd980:	930a      	str	r3, [sp, #40]	; 0x28
 23fd982:	fb04 f305 	mul.w	r3, r4, r5
 23fd986:	9e07      	ldr	r6, [sp, #28]
 23fd988:	fa13 f382 	uxtah	r3, r3, r2
 23fd98c:	b21b      	sxth	r3, r3
 23fd98e:	ee08 3a10 	vmov	s16, r3
 23fd992:	46b0      	mov	r8, r6
          drawPixel(x+i, y+j, bg);
 23fd994:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fd998:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
 23fd99c:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
 23fd9a0:	9b03      	ldr	r3, [sp, #12]
 23fd9a2:	07db      	lsls	r3, r3, #31
 23fd9a4:	d52f      	bpl.n	23fda06 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
 23fd9a6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
 23fd9a8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
 23fd9aa:	d11f      	bne.n	23fd9ec <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
 23fd9ac:	f8d3 b010 	ldr.w	fp, [r3, #16]
 23fd9b0:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
 23fd9b2:	4651      	mov	r1, sl
 23fd9b4:	4638      	mov	r0, r7
 23fd9b6:	b232      	sxth	r2, r6
 23fd9b8:	47d8      	blx	fp
      line >>= 1;
 23fd9ba:	9b03      	ldr	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
 23fd9bc:	3601      	adds	r6, #1
      line >>= 1;
 23fd9be:	085b      	lsrs	r3, r3, #1
 23fd9c0:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
 23fd9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fd9c4:	b2b6      	uxth	r6, r6
 23fd9c6:	4498      	add	r8, r3
 23fd9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd9ca:	fa1f f888 	uxth.w	r8, r8
 23fd9ce:	42b3      	cmp	r3, r6
 23fd9d0:	d1e6      	bne.n	23fd9a0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
 23fd9d2:	9b08      	ldr	r3, [sp, #32]
 23fd9d4:	3401      	adds	r4, #1
 23fd9d6:	3b01      	subs	r3, #1
 23fd9d8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fd9dc:	b264      	sxtb	r4, r4
 23fd9de:	9308      	str	r3, [sp, #32]
 23fd9e0:	d1c3      	bne.n	23fd96a <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
 23fd9e2:	b00d      	add	sp, #52	; 0x34
 23fd9e4:	ecbd 8b02 	vpop	{d8}
 23fd9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
 23fd9ec:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fd9ee:	e9cd 9200 	strd	r9, r2, [sp]
 23fd9f2:	ee18 1a10 	vmov	r1, s16
 23fd9f6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 23fd9fa:	4638      	mov	r0, r7
 23fd9fc:	464b      	mov	r3, r9
 23fd9fe:	fa0f f288 	sxth.w	r2, r8
 23fda02:	47d8      	blx	fp
 23fda04:	e7d9      	b.n	23fd9ba <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
 23fda06:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 23fda0a:	4293      	cmp	r3, r2
 23fda0c:	d0d5      	beq.n	23fd9ba <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
 23fda0e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
 23fda10:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
 23fda12:	d103      	bne.n	23fda1c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
 23fda14:	f8d3 b010 	ldr.w	fp, [r3, #16]
 23fda18:	9b06      	ldr	r3, [sp, #24]
 23fda1a:	e7ca      	b.n	23fd9b2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fda1c:	9a06      	ldr	r2, [sp, #24]
 23fda1e:	e7e6      	b.n	23fd9ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
 23fda20:	023ff7f8 	.word	0x023ff7f8

023fda24 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fda24:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
 23fda26:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
 23fda28:	4604      	mov	r4, r0
 23fda2a:	b085      	sub	sp, #20
  if (c == '\n') {
 23fda2c:	d107      	bne.n	23fda3e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
 23fda2e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
 23fda30:	8a63      	ldrh	r3, [r4, #18]
 23fda32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fda36:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 23fda38:	2300      	movs	r3, #0
 23fda3a:	8223      	strh	r3, [r4, #16]
 23fda3c:	e021      	b.n	23fda82 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
 23fda3e:	290d      	cmp	r1, #13
 23fda40:	d01f      	beq.n	23fda82 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 23fda42:	7e03      	ldrb	r3, [r0, #24]
 23fda44:	9302      	str	r3, [sp, #8]
 23fda46:	8ac3      	ldrh	r3, [r0, #22]
 23fda48:	9301      	str	r3, [sp, #4]
 23fda4a:	8a83      	ldrh	r3, [r0, #20]
 23fda4c:	9300      	str	r3, [sp, #0]
 23fda4e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 23fda52:	460b      	mov	r3, r1
 23fda54:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 23fda58:	f7ff ff5c 	bl	23fd914 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 23fda5c:	7e20      	ldrb	r0, [r4, #24]
 23fda5e:	8a23      	ldrh	r3, [r4, #16]
 23fda60:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 23fda64:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 23fda68:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
 23fda6a:	b21b      	sxth	r3, r3
 23fda6c:	4602      	mov	r2, r0
 23fda6e:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 23fda70:	b139      	cbz	r1, 23fda82 <_ZN12Adafruit_GFX5writeEh+0x5e>
 23fda72:	f06f 0505 	mvn.w	r5, #5
 23fda76:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 23fda7a:	fb05 1100 	mla	r1, r5, r0, r1
 23fda7e:	428b      	cmp	r3, r1
 23fda80:	dcd6      	bgt.n	23fda30 <_ZN12Adafruit_GFX5writeEh+0xc>
}
 23fda82:	2001      	movs	r0, #1
 23fda84:	b005      	add	sp, #20
 23fda86:	bd30      	pop	{r4, r5, pc}

023fda88 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
 23fda88:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 23fda8a:	8242      	strh	r2, [r0, #18]
}
 23fda8c:	4770      	bx	lr

023fda8e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
 23fda8e:	2901      	cmp	r1, #1
 23fda90:	bf38      	it	cc
 23fda92:	2101      	movcc	r1, #1
 23fda94:	7601      	strb	r1, [r0, #24]
}
 23fda96:	4770      	bx	lr

023fda98 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
 23fda98:	82c1      	strh	r1, [r0, #22]
 23fda9a:	8281      	strh	r1, [r0, #20]
}
 23fda9c:	4770      	bx	lr

023fda9e <_ZN12Adafruit_GFX11getRotationEv>:
}
 23fda9e:	7e40      	ldrb	r0, [r0, #25]
 23fdaa0:	4770      	bx	lr

023fdaa2 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23fdaa2:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23fdaa6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23fdaaa:	7643      	strb	r3, [r0, #25]
    _width  = WIDTH;
 23fdaac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch(rotation) {
 23fdab0:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
 23fdab2:	bf59      	ittee	pl
 23fdab4:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23fdab6:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
 23fdab8:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23fdaba:	81c3      	strhmi	r3, [r0, #14]
}
 23fdabc:	4770      	bx	lr

023fdabe <_ZN12Adafruit_GFX5widthEv>:
}
 23fdabe:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 23fdac2:	4770      	bx	lr

023fdac4 <_ZN12Adafruit_GFX6heightEv>:
}
 23fdac4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 23fdac8:	4770      	bx	lr
	...

023fdacc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fdacc:	b509      	push	{r0, r3, lr}
 23fdace:	4804      	ldr	r0, [pc, #16]	; (23fdae0 <netdb_freeaddrinfo+0x14>)
 23fdad0:	6800      	ldr	r0, [r0, #0]
 23fdad2:	4b04      	ldr	r3, [pc, #16]	; (23fdae4 <netdb_freeaddrinfo+0x18>)
 23fdad4:	4403      	add	r3, r0
 23fdad6:	681b      	ldr	r3, [r3, #0]
 23fdad8:	689b      	ldr	r3, [r3, #8]
 23fdada:	9302      	str	r3, [sp, #8]
 23fdadc:	bd09      	pop	{r0, r3, pc}
 23fdade:	0000      	.short	0x0000
 23fdae0:	1007a99c 	.word	0x1007a99c
 23fdae4:	00000050 	.word	0x00000050

023fdae8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fdae8:	b509      	push	{r0, r3, lr}
 23fdaea:	4804      	ldr	r0, [pc, #16]	; (23fdafc <netdb_getaddrinfo+0x14>)
 23fdaec:	6800      	ldr	r0, [r0, #0]
 23fdaee:	4b04      	ldr	r3, [pc, #16]	; (23fdb00 <netdb_getaddrinfo+0x18>)
 23fdaf0:	4403      	add	r3, r0
 23fdaf2:	681b      	ldr	r3, [r3, #0]
 23fdaf4:	68db      	ldr	r3, [r3, #12]
 23fdaf6:	9302      	str	r3, [sp, #8]
 23fdaf8:	bd09      	pop	{r0, r3, pc}
 23fdafa:	0000      	.short	0x0000
 23fdafc:	1007a99c 	.word	0x1007a99c
 23fdb00:	00000050 	.word	0x00000050

023fdb04 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fdb04:	b509      	push	{r0, r3, lr}
 23fdb06:	4804      	ldr	r0, [pc, #16]	; (23fdb18 <hal_gpio_mode+0x14>)
 23fdb08:	6800      	ldr	r0, [r0, #0]
 23fdb0a:	4b04      	ldr	r3, [pc, #16]	; (23fdb1c <hal_gpio_mode+0x18>)
 23fdb0c:	4403      	add	r3, r0
 23fdb0e:	681b      	ldr	r3, [r3, #0]
 23fdb10:	689b      	ldr	r3, [r3, #8]
 23fdb12:	9302      	str	r3, [sp, #8]
 23fdb14:	bd09      	pop	{r0, r3, pc}
 23fdb16:	0000      	.short	0x0000
 23fdb18:	1007a99c 	.word	0x1007a99c
 23fdb1c:	00000014 	.word	0x00000014

023fdb20 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fdb20:	b509      	push	{r0, r3, lr}
 23fdb22:	4804      	ldr	r0, [pc, #16]	; (23fdb34 <hal_gpio_get_mode+0x14>)
 23fdb24:	6800      	ldr	r0, [r0, #0]
 23fdb26:	4b04      	ldr	r3, [pc, #16]	; (23fdb38 <hal_gpio_get_mode+0x18>)
 23fdb28:	4403      	add	r3, r0
 23fdb2a:	681b      	ldr	r3, [r3, #0]
 23fdb2c:	68db      	ldr	r3, [r3, #12]
 23fdb2e:	9302      	str	r3, [sp, #8]
 23fdb30:	bd09      	pop	{r0, r3, pc}
 23fdb32:	0000      	.short	0x0000
 23fdb34:	1007a99c 	.word	0x1007a99c
 23fdb38:	00000014 	.word	0x00000014

023fdb3c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fdb3c:	b509      	push	{r0, r3, lr}
 23fdb3e:	4804      	ldr	r0, [pc, #16]	; (23fdb50 <hal_gpio_write+0x14>)
 23fdb40:	6800      	ldr	r0, [r0, #0]
 23fdb42:	4b04      	ldr	r3, [pc, #16]	; (23fdb54 <hal_gpio_write+0x18>)
 23fdb44:	4403      	add	r3, r0
 23fdb46:	681b      	ldr	r3, [r3, #0]
 23fdb48:	691b      	ldr	r3, [r3, #16]
 23fdb4a:	9302      	str	r3, [sp, #8]
 23fdb4c:	bd09      	pop	{r0, r3, pc}
 23fdb4e:	0000      	.short	0x0000
 23fdb50:	1007a99c 	.word	0x1007a99c
 23fdb54:	00000014 	.word	0x00000014

023fdb58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fdb58:	b509      	push	{r0, r3, lr}
 23fdb5a:	4804      	ldr	r0, [pc, #16]	; (23fdb6c <HAL_RNG_GetRandomNumber+0x14>)
 23fdb5c:	6800      	ldr	r0, [r0, #0]
 23fdb5e:	4b04      	ldr	r3, [pc, #16]	; (23fdb70 <HAL_RNG_GetRandomNumber+0x18>)
 23fdb60:	4403      	add	r3, r0
 23fdb62:	681b      	ldr	r3, [r3, #0]
 23fdb64:	685b      	ldr	r3, [r3, #4]
 23fdb66:	9302      	str	r3, [sp, #8]
 23fdb68:	bd09      	pop	{r0, r3, pc}
 23fdb6a:	0000      	.short	0x0000
 23fdb6c:	1007a99c 	.word	0x1007a99c
 23fdb70:	00000000 	.word	0x00000000

023fdb74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fdb74:	b509      	push	{r0, r3, lr}
 23fdb76:	4804      	ldr	r0, [pc, #16]	; (23fdb88 <HAL_Delay_Microseconds+0x14>)
 23fdb78:	6800      	ldr	r0, [r0, #0]
 23fdb7a:	4b04      	ldr	r3, [pc, #16]	; (23fdb8c <HAL_Delay_Microseconds+0x18>)
 23fdb7c:	4403      	add	r3, r0
 23fdb7e:	681b      	ldr	r3, [r3, #0]
 23fdb80:	68db      	ldr	r3, [r3, #12]
 23fdb82:	9302      	str	r3, [sp, #8]
 23fdb84:	bd09      	pop	{r0, r3, pc}
 23fdb86:	0000      	.short	0x0000
 23fdb88:	1007a99c 	.word	0x1007a99c
 23fdb8c:	00000000 	.word	0x00000000

023fdb90 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fdb90:	b509      	push	{r0, r3, lr}
 23fdb92:	4804      	ldr	r0, [pc, #16]	; (23fdba4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fdb94:	6800      	ldr	r0, [r0, #0]
 23fdb96:	4b04      	ldr	r3, [pc, #16]	; (23fdba8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fdb98:	4403      	add	r3, r0
 23fdb9a:	681b      	ldr	r3, [r3, #0]
 23fdb9c:	695b      	ldr	r3, [r3, #20]
 23fdb9e:	9302      	str	r3, [sp, #8]
 23fdba0:	bd09      	pop	{r0, r3, pc}
 23fdba2:	0000      	.short	0x0000
 23fdba4:	1007a99c 	.word	0x1007a99c
 23fdba8:	00000000 	.word	0x00000000

023fdbac <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23fdbac:	b509      	push	{r0, r3, lr}
 23fdbae:	4804      	ldr	r0, [pc, #16]	; (23fdbc0 <hal_rtc_time_is_valid+0x14>)
 23fdbb0:	6800      	ldr	r0, [r0, #0]
 23fdbb2:	4b04      	ldr	r3, [pc, #16]	; (23fdbc4 <hal_rtc_time_is_valid+0x18>)
 23fdbb4:	4403      	add	r3, r0
 23fdbb6:	681b      	ldr	r3, [r3, #0]
 23fdbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fdbba:	9302      	str	r3, [sp, #8]
 23fdbbc:	bd09      	pop	{r0, r3, pc}
 23fdbbe:	0000      	.short	0x0000
 23fdbc0:	1007a99c 	.word	0x1007a99c
 23fdbc4:	00000000 	.word	0x00000000

023fdbc8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23fdbc8:	b509      	push	{r0, r3, lr}
 23fdbca:	4804      	ldr	r0, [pc, #16]	; (23fdbdc <hal_rtc_get_time+0x14>)
 23fdbcc:	6800      	ldr	r0, [r0, #0]
 23fdbce:	4b04      	ldr	r3, [pc, #16]	; (23fdbe0 <hal_rtc_get_time+0x18>)
 23fdbd0:	4403      	add	r3, r0
 23fdbd2:	681b      	ldr	r3, [r3, #0]
 23fdbd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23fdbd6:	9302      	str	r3, [sp, #8]
 23fdbd8:	bd09      	pop	{r0, r3, pc}
 23fdbda:	0000      	.short	0x0000
 23fdbdc:	1007a99c 	.word	0x1007a99c
 23fdbe0:	00000000 	.word	0x00000000

023fdbe4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fdbe4:	b509      	push	{r0, r3, lr}
 23fdbe6:	4804      	ldr	r0, [pc, #16]	; (23fdbf8 <os_mutex_recursive_create+0x14>)
 23fdbe8:	6800      	ldr	r0, [r0, #0]
 23fdbea:	4b04      	ldr	r3, [pc, #16]	; (23fdbfc <os_mutex_recursive_create+0x18>)
 23fdbec:	4403      	add	r3, r0
 23fdbee:	681b      	ldr	r3, [r3, #0]
 23fdbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fdbf2:	9302      	str	r3, [sp, #8]
 23fdbf4:	bd09      	pop	{r0, r3, pc}
 23fdbf6:	0000      	.short	0x0000
 23fdbf8:	1007a99c 	.word	0x1007a99c
 23fdbfc:	00000030 	.word	0x00000030

023fdc00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fdc00:	b509      	push	{r0, r3, lr}
 23fdc02:	4804      	ldr	r0, [pc, #16]	; (23fdc14 <inet_inet_ntop+0x14>)
 23fdc04:	6800      	ldr	r0, [r0, #0]
 23fdc06:	4b04      	ldr	r3, [pc, #16]	; (23fdc18 <inet_inet_ntop+0x18>)
 23fdc08:	4403      	add	r3, r0
 23fdc0a:	681b      	ldr	r3, [r3, #0]
 23fdc0c:	695b      	ldr	r3, [r3, #20]
 23fdc0e:	9302      	str	r3, [sp, #8]
 23fdc10:	bd09      	pop	{r0, r3, pc}
 23fdc12:	0000      	.short	0x0000
 23fdc14:	1007a99c 	.word	0x1007a99c
 23fdc18:	0000004c 	.word	0x0000004c

023fdc1c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fdc1c:	b509      	push	{r0, r3, lr}
 23fdc1e:	4804      	ldr	r0, [pc, #16]	; (23fdc30 <hal_usart_write+0x14>)
 23fdc20:	6800      	ldr	r0, [r0, #0]
 23fdc22:	4b04      	ldr	r3, [pc, #16]	; (23fdc34 <hal_usart_write+0x18>)
 23fdc24:	4403      	add	r3, r0
 23fdc26:	681b      	ldr	r3, [r3, #0]
 23fdc28:	68db      	ldr	r3, [r3, #12]
 23fdc2a:	9302      	str	r3, [sp, #8]
 23fdc2c:	bd09      	pop	{r0, r3, pc}
 23fdc2e:	0000      	.short	0x0000
 23fdc30:	1007a99c 	.word	0x1007a99c
 23fdc34:	00000024 	.word	0x00000024

023fdc38 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fdc38:	b509      	push	{r0, r3, lr}
 23fdc3a:	4804      	ldr	r0, [pc, #16]	; (23fdc4c <hal_usart_available+0x14>)
 23fdc3c:	6800      	ldr	r0, [r0, #0]
 23fdc3e:	4b04      	ldr	r3, [pc, #16]	; (23fdc50 <hal_usart_available+0x18>)
 23fdc40:	4403      	add	r3, r0
 23fdc42:	681b      	ldr	r3, [r3, #0]
 23fdc44:	691b      	ldr	r3, [r3, #16]
 23fdc46:	9302      	str	r3, [sp, #8]
 23fdc48:	bd09      	pop	{r0, r3, pc}
 23fdc4a:	0000      	.short	0x0000
 23fdc4c:	1007a99c 	.word	0x1007a99c
 23fdc50:	00000024 	.word	0x00000024

023fdc54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fdc54:	b509      	push	{r0, r3, lr}
 23fdc56:	4804      	ldr	r0, [pc, #16]	; (23fdc68 <hal_usart_read+0x14>)
 23fdc58:	6800      	ldr	r0, [r0, #0]
 23fdc5a:	4b04      	ldr	r3, [pc, #16]	; (23fdc6c <hal_usart_read+0x18>)
 23fdc5c:	4403      	add	r3, r0
 23fdc5e:	681b      	ldr	r3, [r3, #0]
 23fdc60:	695b      	ldr	r3, [r3, #20]
 23fdc62:	9302      	str	r3, [sp, #8]
 23fdc64:	bd09      	pop	{r0, r3, pc}
 23fdc66:	0000      	.short	0x0000
 23fdc68:	1007a99c 	.word	0x1007a99c
 23fdc6c:	00000024 	.word	0x00000024

023fdc70 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fdc70:	b509      	push	{r0, r3, lr}
 23fdc72:	4804      	ldr	r0, [pc, #16]	; (23fdc84 <hal_usart_peek+0x14>)
 23fdc74:	6800      	ldr	r0, [r0, #0]
 23fdc76:	4b04      	ldr	r3, [pc, #16]	; (23fdc88 <hal_usart_peek+0x18>)
 23fdc78:	4403      	add	r3, r0
 23fdc7a:	681b      	ldr	r3, [r3, #0]
 23fdc7c:	699b      	ldr	r3, [r3, #24]
 23fdc7e:	9302      	str	r3, [sp, #8]
 23fdc80:	bd09      	pop	{r0, r3, pc}
 23fdc82:	0000      	.short	0x0000
 23fdc84:	1007a99c 	.word	0x1007a99c
 23fdc88:	00000024 	.word	0x00000024

023fdc8c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fdc8c:	b509      	push	{r0, r3, lr}
 23fdc8e:	4804      	ldr	r0, [pc, #16]	; (23fdca0 <hal_usart_flush+0x14>)
 23fdc90:	6800      	ldr	r0, [r0, #0]
 23fdc92:	4b04      	ldr	r3, [pc, #16]	; (23fdca4 <hal_usart_flush+0x18>)
 23fdc94:	4403      	add	r3, r0
 23fdc96:	681b      	ldr	r3, [r3, #0]
 23fdc98:	69db      	ldr	r3, [r3, #28]
 23fdc9a:	9302      	str	r3, [sp, #8]
 23fdc9c:	bd09      	pop	{r0, r3, pc}
 23fdc9e:	0000      	.short	0x0000
 23fdca0:	1007a99c 	.word	0x1007a99c
 23fdca4:	00000024 	.word	0x00000024

023fdca8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fdca8:	b509      	push	{r0, r3, lr}
 23fdcaa:	4804      	ldr	r0, [pc, #16]	; (23fdcbc <hal_usart_is_enabled+0x14>)
 23fdcac:	6800      	ldr	r0, [r0, #0]
 23fdcae:	4b04      	ldr	r3, [pc, #16]	; (23fdcc0 <hal_usart_is_enabled+0x18>)
 23fdcb0:	4403      	add	r3, r0
 23fdcb2:	681b      	ldr	r3, [r3, #0]
 23fdcb4:	6a1b      	ldr	r3, [r3, #32]
 23fdcb6:	9302      	str	r3, [sp, #8]
 23fdcb8:	bd09      	pop	{r0, r3, pc}
 23fdcba:	0000      	.short	0x0000
 23fdcbc:	1007a99c 	.word	0x1007a99c
 23fdcc0:	00000024 	.word	0x00000024

023fdcc4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fdcc4:	b509      	push	{r0, r3, lr}
 23fdcc6:	4804      	ldr	r0, [pc, #16]	; (23fdcd8 <hal_usart_available_data_for_write+0x14>)
 23fdcc8:	6800      	ldr	r0, [r0, #0]
 23fdcca:	4b04      	ldr	r3, [pc, #16]	; (23fdcdc <hal_usart_available_data_for_write+0x18>)
 23fdccc:	4403      	add	r3, r0
 23fdcce:	681b      	ldr	r3, [r3, #0]
 23fdcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fdcd2:	9302      	str	r3, [sp, #8]
 23fdcd4:	bd09      	pop	{r0, r3, pc}
 23fdcd6:	0000      	.short	0x0000
 23fdcd8:	1007a99c 	.word	0x1007a99c
 23fdcdc:	00000024 	.word	0x00000024

023fdce0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fdce0:	b509      	push	{r0, r3, lr}
 23fdce2:	4804      	ldr	r0, [pc, #16]	; (23fdcf4 <hal_usart_init_ex+0x14>)
 23fdce4:	6800      	ldr	r0, [r0, #0]
 23fdce6:	4b04      	ldr	r3, [pc, #16]	; (23fdcf8 <hal_usart_init_ex+0x18>)
 23fdce8:	4403      	add	r3, r0
 23fdcea:	681b      	ldr	r3, [r3, #0]
 23fdcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdcee:	9302      	str	r3, [sp, #8]
 23fdcf0:	bd09      	pop	{r0, r3, pc}
 23fdcf2:	0000      	.short	0x0000
 23fdcf4:	1007a99c 	.word	0x1007a99c
 23fdcf8:	00000024 	.word	0x00000024

023fdcfc <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fdcfc:	b509      	push	{r0, r3, lr}
 23fdcfe:	4804      	ldr	r0, [pc, #16]	; (23fdd10 <hal_i2c_begin+0x14>)
 23fdd00:	6800      	ldr	r0, [r0, #0]
 23fdd02:	4b04      	ldr	r3, [pc, #16]	; (23fdd14 <hal_i2c_begin+0x18>)
 23fdd04:	4403      	add	r3, r0
 23fdd06:	681b      	ldr	r3, [r3, #0]
 23fdd08:	68db      	ldr	r3, [r3, #12]
 23fdd0a:	9302      	str	r3, [sp, #8]
 23fdd0c:	bd09      	pop	{r0, r3, pc}
 23fdd0e:	0000      	.short	0x0000
 23fdd10:	1007a99c 	.word	0x1007a99c
 23fdd14:	00000010 	.word	0x00000010

023fdd18 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fdd18:	b509      	push	{r0, r3, lr}
 23fdd1a:	4804      	ldr	r0, [pc, #16]	; (23fdd2c <hal_i2c_begin_transmission+0x14>)
 23fdd1c:	6800      	ldr	r0, [r0, #0]
 23fdd1e:	4b04      	ldr	r3, [pc, #16]	; (23fdd30 <hal_i2c_begin_transmission+0x18>)
 23fdd20:	4403      	add	r3, r0
 23fdd22:	681b      	ldr	r3, [r3, #0]
 23fdd24:	699b      	ldr	r3, [r3, #24]
 23fdd26:	9302      	str	r3, [sp, #8]
 23fdd28:	bd09      	pop	{r0, r3, pc}
 23fdd2a:	0000      	.short	0x0000
 23fdd2c:	1007a99c 	.word	0x1007a99c
 23fdd30:	00000010 	.word	0x00000010

023fdd34 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fdd34:	b509      	push	{r0, r3, lr}
 23fdd36:	4804      	ldr	r0, [pc, #16]	; (23fdd48 <hal_i2c_end_transmission+0x14>)
 23fdd38:	6800      	ldr	r0, [r0, #0]
 23fdd3a:	4b04      	ldr	r3, [pc, #16]	; (23fdd4c <hal_i2c_end_transmission+0x18>)
 23fdd3c:	4403      	add	r3, r0
 23fdd3e:	681b      	ldr	r3, [r3, #0]
 23fdd40:	69db      	ldr	r3, [r3, #28]
 23fdd42:	9302      	str	r3, [sp, #8]
 23fdd44:	bd09      	pop	{r0, r3, pc}
 23fdd46:	0000      	.short	0x0000
 23fdd48:	1007a99c 	.word	0x1007a99c
 23fdd4c:	00000010 	.word	0x00000010

023fdd50 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fdd50:	b509      	push	{r0, r3, lr}
 23fdd52:	4804      	ldr	r0, [pc, #16]	; (23fdd64 <hal_i2c_write+0x14>)
 23fdd54:	6800      	ldr	r0, [r0, #0]
 23fdd56:	4b04      	ldr	r3, [pc, #16]	; (23fdd68 <hal_i2c_write+0x18>)
 23fdd58:	4403      	add	r3, r0
 23fdd5a:	681b      	ldr	r3, [r3, #0]
 23fdd5c:	6a1b      	ldr	r3, [r3, #32]
 23fdd5e:	9302      	str	r3, [sp, #8]
 23fdd60:	bd09      	pop	{r0, r3, pc}
 23fdd62:	0000      	.short	0x0000
 23fdd64:	1007a99c 	.word	0x1007a99c
 23fdd68:	00000010 	.word	0x00000010

023fdd6c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fdd6c:	b509      	push	{r0, r3, lr}
 23fdd6e:	4804      	ldr	r0, [pc, #16]	; (23fdd80 <hal_i2c_available+0x14>)
 23fdd70:	6800      	ldr	r0, [r0, #0]
 23fdd72:	4b04      	ldr	r3, [pc, #16]	; (23fdd84 <hal_i2c_available+0x18>)
 23fdd74:	4403      	add	r3, r0
 23fdd76:	681b      	ldr	r3, [r3, #0]
 23fdd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fdd7a:	9302      	str	r3, [sp, #8]
 23fdd7c:	bd09      	pop	{r0, r3, pc}
 23fdd7e:	0000      	.short	0x0000
 23fdd80:	1007a99c 	.word	0x1007a99c
 23fdd84:	00000010 	.word	0x00000010

023fdd88 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fdd88:	b509      	push	{r0, r3, lr}
 23fdd8a:	4804      	ldr	r0, [pc, #16]	; (23fdd9c <hal_i2c_read+0x14>)
 23fdd8c:	6800      	ldr	r0, [r0, #0]
 23fdd8e:	4b04      	ldr	r3, [pc, #16]	; (23fdda0 <hal_i2c_read+0x18>)
 23fdd90:	4403      	add	r3, r0
 23fdd92:	681b      	ldr	r3, [r3, #0]
 23fdd94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fdd96:	9302      	str	r3, [sp, #8]
 23fdd98:	bd09      	pop	{r0, r3, pc}
 23fdd9a:	0000      	.short	0x0000
 23fdd9c:	1007a99c 	.word	0x1007a99c
 23fdda0:	00000010 	.word	0x00000010

023fdda4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fdda4:	b509      	push	{r0, r3, lr}
 23fdda6:	4804      	ldr	r0, [pc, #16]	; (23fddb8 <hal_i2c_peek+0x14>)
 23fdda8:	6800      	ldr	r0, [r0, #0]
 23fddaa:	4b04      	ldr	r3, [pc, #16]	; (23fddbc <hal_i2c_peek+0x18>)
 23fddac:	4403      	add	r3, r0
 23fddae:	681b      	ldr	r3, [r3, #0]
 23fddb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fddb2:	9302      	str	r3, [sp, #8]
 23fddb4:	bd09      	pop	{r0, r3, pc}
 23fddb6:	0000      	.short	0x0000
 23fddb8:	1007a99c 	.word	0x1007a99c
 23fddbc:	00000010 	.word	0x00000010

023fddc0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fddc0:	b509      	push	{r0, r3, lr}
 23fddc2:	4804      	ldr	r0, [pc, #16]	; (23fddd4 <hal_i2c_flush+0x14>)
 23fddc4:	6800      	ldr	r0, [r0, #0]
 23fddc6:	4b04      	ldr	r3, [pc, #16]	; (23fddd8 <hal_i2c_flush+0x18>)
 23fddc8:	4403      	add	r3, r0
 23fddca:	681b      	ldr	r3, [r3, #0]
 23fddcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fddce:	9302      	str	r3, [sp, #8]
 23fddd0:	bd09      	pop	{r0, r3, pc}
 23fddd2:	0000      	.short	0x0000
 23fddd4:	1007a99c 	.word	0x1007a99c
 23fddd8:	00000010 	.word	0x00000010

023fdddc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fdddc:	b509      	push	{r0, r3, lr}
 23fddde:	4804      	ldr	r0, [pc, #16]	; (23fddf0 <hal_i2c_is_enabled+0x14>)
 23fdde0:	6800      	ldr	r0, [r0, #0]
 23fdde2:	4b04      	ldr	r3, [pc, #16]	; (23fddf4 <hal_i2c_is_enabled+0x18>)
 23fdde4:	4403      	add	r3, r0
 23fdde6:	681b      	ldr	r3, [r3, #0]
 23fdde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fddea:	9302      	str	r3, [sp, #8]
 23fddec:	bd09      	pop	{r0, r3, pc}
 23fddee:	0000      	.short	0x0000
 23fddf0:	1007a99c 	.word	0x1007a99c
 23fddf4:	00000010 	.word	0x00000010

023fddf8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fddf8:	b509      	push	{r0, r3, lr}
 23fddfa:	4804      	ldr	r0, [pc, #16]	; (23fde0c <hal_i2c_init+0x14>)
 23fddfc:	6800      	ldr	r0, [r0, #0]
 23fddfe:	4b04      	ldr	r3, [pc, #16]	; (23fde10 <hal_i2c_init+0x18>)
 23fde00:	4403      	add	r3, r0
 23fde02:	681b      	ldr	r3, [r3, #0]
 23fde04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fde06:	9302      	str	r3, [sp, #8]
 23fde08:	bd09      	pop	{r0, r3, pc}
 23fde0a:	0000      	.short	0x0000
 23fde0c:	1007a99c 	.word	0x1007a99c
 23fde10:	00000010 	.word	0x00000010

023fde14 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fde14:	b509      	push	{r0, r3, lr}
 23fde16:	4804      	ldr	r0, [pc, #16]	; (23fde28 <hal_i2c_request_ex+0x14>)
 23fde18:	6800      	ldr	r0, [r0, #0]
 23fde1a:	4b04      	ldr	r3, [pc, #16]	; (23fde2c <hal_i2c_request_ex+0x18>)
 23fde1c:	4403      	add	r3, r0
 23fde1e:	681b      	ldr	r3, [r3, #0]
 23fde20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fde22:	9302      	str	r3, [sp, #8]
 23fde24:	bd09      	pop	{r0, r3, pc}
 23fde26:	0000      	.short	0x0000
 23fde28:	1007a99c 	.word	0x1007a99c
 23fde2c:	00000010 	.word	0x00000010

023fde30 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fde30:	b509      	push	{r0, r3, lr}
 23fde32:	4804      	ldr	r0, [pc, #16]	; (23fde44 <hal_spi_begin+0x14>)
 23fde34:	6800      	ldr	r0, [r0, #0]
 23fde36:	4b04      	ldr	r3, [pc, #16]	; (23fde48 <hal_spi_begin+0x18>)
 23fde38:	4403      	add	r3, r0
 23fde3a:	681b      	ldr	r3, [r3, #0]
 23fde3c:	681b      	ldr	r3, [r3, #0]
 23fde3e:	9302      	str	r3, [sp, #8]
 23fde40:	bd09      	pop	{r0, r3, pc}
 23fde42:	0000      	.short	0x0000
 23fde44:	1007a99c 	.word	0x1007a99c
 23fde48:	00000018 	.word	0x00000018

023fde4c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 23fde4c:	b509      	push	{r0, r3, lr}
 23fde4e:	4804      	ldr	r0, [pc, #16]	; (23fde60 <hal_spi_set_bit_order+0x14>)
 23fde50:	6800      	ldr	r0, [r0, #0]
 23fde52:	4b04      	ldr	r3, [pc, #16]	; (23fde64 <hal_spi_set_bit_order+0x18>)
 23fde54:	4403      	add	r3, r0
 23fde56:	681b      	ldr	r3, [r3, #0]
 23fde58:	689b      	ldr	r3, [r3, #8]
 23fde5a:	9302      	str	r3, [sp, #8]
 23fde5c:	bd09      	pop	{r0, r3, pc}
 23fde5e:	0000      	.short	0x0000
 23fde60:	1007a99c 	.word	0x1007a99c
 23fde64:	00000018 	.word	0x00000018

023fde68 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fde68:	b509      	push	{r0, r3, lr}
 23fde6a:	4804      	ldr	r0, [pc, #16]	; (23fde7c <hal_spi_set_data_mode+0x14>)
 23fde6c:	6800      	ldr	r0, [r0, #0]
 23fde6e:	4b04      	ldr	r3, [pc, #16]	; (23fde80 <hal_spi_set_data_mode+0x18>)
 23fde70:	4403      	add	r3, r0
 23fde72:	681b      	ldr	r3, [r3, #0]
 23fde74:	68db      	ldr	r3, [r3, #12]
 23fde76:	9302      	str	r3, [sp, #8]
 23fde78:	bd09      	pop	{r0, r3, pc}
 23fde7a:	0000      	.short	0x0000
 23fde7c:	1007a99c 	.word	0x1007a99c
 23fde80:	00000018 	.word	0x00000018

023fde84 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fde84:	b509      	push	{r0, r3, lr}
 23fde86:	4804      	ldr	r0, [pc, #16]	; (23fde98 <hal_spi_set_clock_divider+0x14>)
 23fde88:	6800      	ldr	r0, [r0, #0]
 23fde8a:	4b04      	ldr	r3, [pc, #16]	; (23fde9c <hal_spi_set_clock_divider+0x18>)
 23fde8c:	4403      	add	r3, r0
 23fde8e:	681b      	ldr	r3, [r3, #0]
 23fde90:	691b      	ldr	r3, [r3, #16]
 23fde92:	9302      	str	r3, [sp, #8]
 23fde94:	bd09      	pop	{r0, r3, pc}
 23fde96:	0000      	.short	0x0000
 23fde98:	1007a99c 	.word	0x1007a99c
 23fde9c:	00000018 	.word	0x00000018

023fdea0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fdea0:	b509      	push	{r0, r3, lr}
 23fdea2:	4804      	ldr	r0, [pc, #16]	; (23fdeb4 <hal_spi_transfer+0x14>)
 23fdea4:	6800      	ldr	r0, [r0, #0]
 23fdea6:	4b04      	ldr	r3, [pc, #16]	; (23fdeb8 <hal_spi_transfer+0x18>)
 23fdea8:	4403      	add	r3, r0
 23fdeaa:	681b      	ldr	r3, [r3, #0]
 23fdeac:	695b      	ldr	r3, [r3, #20]
 23fdeae:	9302      	str	r3, [sp, #8]
 23fdeb0:	bd09      	pop	{r0, r3, pc}
 23fdeb2:	0000      	.short	0x0000
 23fdeb4:	1007a99c 	.word	0x1007a99c
 23fdeb8:	00000018 	.word	0x00000018

023fdebc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fdebc:	b509      	push	{r0, r3, lr}
 23fdebe:	4804      	ldr	r0, [pc, #16]	; (23fded0 <hal_spi_init+0x14>)
 23fdec0:	6800      	ldr	r0, [r0, #0]
 23fdec2:	4b04      	ldr	r3, [pc, #16]	; (23fded4 <hal_spi_init+0x18>)
 23fdec4:	4403      	add	r3, r0
 23fdec6:	681b      	ldr	r3, [r3, #0]
 23fdec8:	69db      	ldr	r3, [r3, #28]
 23fdeca:	9302      	str	r3, [sp, #8]
 23fdecc:	bd09      	pop	{r0, r3, pc}
 23fdece:	0000      	.short	0x0000
 23fded0:	1007a99c 	.word	0x1007a99c
 23fded4:	00000018 	.word	0x00000018

023fded8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fded8:	b509      	push	{r0, r3, lr}
 23fdeda:	4804      	ldr	r0, [pc, #16]	; (23fdeec <hal_spi_is_enabled+0x14>)
 23fdedc:	6800      	ldr	r0, [r0, #0]
 23fdede:	4b04      	ldr	r3, [pc, #16]	; (23fdef0 <hal_spi_is_enabled+0x18>)
 23fdee0:	4403      	add	r3, r0
 23fdee2:	681b      	ldr	r3, [r3, #0]
 23fdee4:	6a1b      	ldr	r3, [r3, #32]
 23fdee6:	9302      	str	r3, [sp, #8]
 23fdee8:	bd09      	pop	{r0, r3, pc}
 23fdeea:	0000      	.short	0x0000
 23fdeec:	1007a99c 	.word	0x1007a99c
 23fdef0:	00000018 	.word	0x00000018

023fdef4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fdef4:	b509      	push	{r0, r3, lr}
 23fdef6:	4804      	ldr	r0, [pc, #16]	; (23fdf08 <hal_spi_info+0x14>)
 23fdef8:	6800      	ldr	r0, [r0, #0]
 23fdefa:	4b04      	ldr	r3, [pc, #16]	; (23fdf0c <hal_spi_info+0x18>)
 23fdefc:	4403      	add	r3, r0
 23fdefe:	681b      	ldr	r3, [r3, #0]
 23fdf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fdf02:	9302      	str	r3, [sp, #8]
 23fdf04:	bd09      	pop	{r0, r3, pc}
 23fdf06:	0000      	.short	0x0000
 23fdf08:	1007a99c 	.word	0x1007a99c
 23fdf0c:	00000018 	.word	0x00000018

023fdf10 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fdf10:	b509      	push	{r0, r3, lr}
 23fdf12:	4804      	ldr	r0, [pc, #16]	; (23fdf24 <hal_spi_acquire+0x14>)
 23fdf14:	6800      	ldr	r0, [r0, #0]
 23fdf16:	4b04      	ldr	r3, [pc, #16]	; (23fdf28 <hal_spi_acquire+0x18>)
 23fdf18:	4403      	add	r3, r0
 23fdf1a:	681b      	ldr	r3, [r3, #0]
 23fdf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdf1e:	9302      	str	r3, [sp, #8]
 23fdf20:	bd09      	pop	{r0, r3, pc}
 23fdf22:	0000      	.short	0x0000
 23fdf24:	1007a99c 	.word	0x1007a99c
 23fdf28:	00000018 	.word	0x00000018

023fdf2c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fdf2c:	b509      	push	{r0, r3, lr}
 23fdf2e:	4804      	ldr	r0, [pc, #16]	; (23fdf40 <hal_spi_release+0x14>)
 23fdf30:	6800      	ldr	r0, [r0, #0]
 23fdf32:	4b04      	ldr	r3, [pc, #16]	; (23fdf44 <hal_spi_release+0x18>)
 23fdf34:	4403      	add	r3, r0
 23fdf36:	681b      	ldr	r3, [r3, #0]
 23fdf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fdf3a:	9302      	str	r3, [sp, #8]
 23fdf3c:	bd09      	pop	{r0, r3, pc}
 23fdf3e:	0000      	.short	0x0000
 23fdf40:	1007a99c 	.word	0x1007a99c
 23fdf44:	00000018 	.word	0x00000018

023fdf48 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fdf48:	b509      	push	{r0, r3, lr}
 23fdf4a:	4804      	ldr	r0, [pc, #16]	; (23fdf5c <HAL_USB_USART_Init+0x14>)
 23fdf4c:	6800      	ldr	r0, [r0, #0]
 23fdf4e:	4b04      	ldr	r3, [pc, #16]	; (23fdf60 <HAL_USB_USART_Init+0x18>)
 23fdf50:	4403      	add	r3, r0
 23fdf52:	681b      	ldr	r3, [r3, #0]
 23fdf54:	681b      	ldr	r3, [r3, #0]
 23fdf56:	9302      	str	r3, [sp, #8]
 23fdf58:	bd09      	pop	{r0, r3, pc}
 23fdf5a:	0000      	.short	0x0000
 23fdf5c:	1007a99c 	.word	0x1007a99c
 23fdf60:	00000034 	.word	0x00000034

023fdf64 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fdf64:	b509      	push	{r0, r3, lr}
 23fdf66:	4804      	ldr	r0, [pc, #16]	; (23fdf78 <HAL_USB_USART_Begin+0x14>)
 23fdf68:	6800      	ldr	r0, [r0, #0]
 23fdf6a:	4b04      	ldr	r3, [pc, #16]	; (23fdf7c <HAL_USB_USART_Begin+0x18>)
 23fdf6c:	4403      	add	r3, r0
 23fdf6e:	681b      	ldr	r3, [r3, #0]
 23fdf70:	685b      	ldr	r3, [r3, #4]
 23fdf72:	9302      	str	r3, [sp, #8]
 23fdf74:	bd09      	pop	{r0, r3, pc}
 23fdf76:	0000      	.short	0x0000
 23fdf78:	1007a99c 	.word	0x1007a99c
 23fdf7c:	00000034 	.word	0x00000034

023fdf80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fdf80:	b509      	push	{r0, r3, lr}
 23fdf82:	4804      	ldr	r0, [pc, #16]	; (23fdf94 <HAL_USB_USART_Available_Data+0x14>)
 23fdf84:	6800      	ldr	r0, [r0, #0]
 23fdf86:	4b04      	ldr	r3, [pc, #16]	; (23fdf98 <HAL_USB_USART_Available_Data+0x18>)
 23fdf88:	4403      	add	r3, r0
 23fdf8a:	681b      	ldr	r3, [r3, #0]
 23fdf8c:	691b      	ldr	r3, [r3, #16]
 23fdf8e:	9302      	str	r3, [sp, #8]
 23fdf90:	bd09      	pop	{r0, r3, pc}
 23fdf92:	0000      	.short	0x0000
 23fdf94:	1007a99c 	.word	0x1007a99c
 23fdf98:	00000034 	.word	0x00000034

023fdf9c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fdf9c:	b509      	push	{r0, r3, lr}
 23fdf9e:	4804      	ldr	r0, [pc, #16]	; (23fdfb0 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fdfa0:	6800      	ldr	r0, [r0, #0]
 23fdfa2:	4b04      	ldr	r3, [pc, #16]	; (23fdfb4 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fdfa4:	4403      	add	r3, r0
 23fdfa6:	681b      	ldr	r3, [r3, #0]
 23fdfa8:	695b      	ldr	r3, [r3, #20]
 23fdfaa:	9302      	str	r3, [sp, #8]
 23fdfac:	bd09      	pop	{r0, r3, pc}
 23fdfae:	0000      	.short	0x0000
 23fdfb0:	1007a99c 	.word	0x1007a99c
 23fdfb4:	00000034 	.word	0x00000034

023fdfb8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fdfb8:	b509      	push	{r0, r3, lr}
 23fdfba:	4804      	ldr	r0, [pc, #16]	; (23fdfcc <HAL_USB_USART_Receive_Data+0x14>)
 23fdfbc:	6800      	ldr	r0, [r0, #0]
 23fdfbe:	4b04      	ldr	r3, [pc, #16]	; (23fdfd0 <HAL_USB_USART_Receive_Data+0x18>)
 23fdfc0:	4403      	add	r3, r0
 23fdfc2:	681b      	ldr	r3, [r3, #0]
 23fdfc4:	699b      	ldr	r3, [r3, #24]
 23fdfc6:	9302      	str	r3, [sp, #8]
 23fdfc8:	bd09      	pop	{r0, r3, pc}
 23fdfca:	0000      	.short	0x0000
 23fdfcc:	1007a99c 	.word	0x1007a99c
 23fdfd0:	00000034 	.word	0x00000034

023fdfd4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fdfd4:	b509      	push	{r0, r3, lr}
 23fdfd6:	4804      	ldr	r0, [pc, #16]	; (23fdfe8 <HAL_USB_USART_Send_Data+0x14>)
 23fdfd8:	6800      	ldr	r0, [r0, #0]
 23fdfda:	4b04      	ldr	r3, [pc, #16]	; (23fdfec <HAL_USB_USART_Send_Data+0x18>)
 23fdfdc:	4403      	add	r3, r0
 23fdfde:	681b      	ldr	r3, [r3, #0]
 23fdfe0:	69db      	ldr	r3, [r3, #28]
 23fdfe2:	9302      	str	r3, [sp, #8]
 23fdfe4:	bd09      	pop	{r0, r3, pc}
 23fdfe6:	0000      	.short	0x0000
 23fdfe8:	1007a99c 	.word	0x1007a99c
 23fdfec:	00000034 	.word	0x00000034

023fdff0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fdff0:	b509      	push	{r0, r3, lr}
 23fdff2:	4804      	ldr	r0, [pc, #16]	; (23fe004 <HAL_USB_USART_Flush_Data+0x14>)
 23fdff4:	6800      	ldr	r0, [r0, #0]
 23fdff6:	4b04      	ldr	r3, [pc, #16]	; (23fe008 <HAL_USB_USART_Flush_Data+0x18>)
 23fdff8:	4403      	add	r3, r0
 23fdffa:	681b      	ldr	r3, [r3, #0]
 23fdffc:	6a1b      	ldr	r3, [r3, #32]
 23fdffe:	9302      	str	r3, [sp, #8]
 23fe000:	bd09      	pop	{r0, r3, pc}
 23fe002:	0000      	.short	0x0000
 23fe004:	1007a99c 	.word	0x1007a99c
 23fe008:	00000034 	.word	0x00000034

023fe00c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fe00c:	b509      	push	{r0, r3, lr}
 23fe00e:	4804      	ldr	r0, [pc, #16]	; (23fe020 <panic_+0x14>)
 23fe010:	6800      	ldr	r0, [r0, #0]
 23fe012:	4b04      	ldr	r3, [pc, #16]	; (23fe024 <panic_+0x18>)
 23fe014:	4403      	add	r3, r0
 23fe016:	681b      	ldr	r3, [r3, #0]
 23fe018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe01a:	9302      	str	r3, [sp, #8]
 23fe01c:	bd09      	pop	{r0, r3, pc}
 23fe01e:	0000      	.short	0x0000
 23fe020:	1007a99c 	.word	0x1007a99c
 23fe024:	00000048 	.word	0x00000048

023fe028 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23fe028:	b509      	push	{r0, r3, lr}
 23fe02a:	4804      	ldr	r0, [pc, #16]	; (23fe03c <system_mode+0x14>)
 23fe02c:	6800      	ldr	r0, [r0, #0]
 23fe02e:	4b04      	ldr	r3, [pc, #16]	; (23fe040 <system_mode+0x18>)
 23fe030:	4403      	add	r3, r0
 23fe032:	681b      	ldr	r3, [r3, #0]
 23fe034:	681b      	ldr	r3, [r3, #0]
 23fe036:	9302      	str	r3, [sp, #8]
 23fe038:	bd09      	pop	{r0, r3, pc}
 23fe03a:	0000      	.short	0x0000
 23fe03c:	1007a99c 	.word	0x1007a99c
 23fe040:	00000008 	.word	0x00000008

023fe044 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fe044:	b509      	push	{r0, r3, lr}
 23fe046:	4804      	ldr	r0, [pc, #16]	; (23fe058 <set_system_mode+0x14>)
 23fe048:	6800      	ldr	r0, [r0, #0]
 23fe04a:	4b04      	ldr	r3, [pc, #16]	; (23fe05c <set_system_mode+0x18>)
 23fe04c:	4403      	add	r3, r0
 23fe04e:	681b      	ldr	r3, [r3, #0]
 23fe050:	685b      	ldr	r3, [r3, #4]
 23fe052:	9302      	str	r3, [sp, #8]
 23fe054:	bd09      	pop	{r0, r3, pc}
 23fe056:	0000      	.short	0x0000
 23fe058:	1007a99c 	.word	0x1007a99c
 23fe05c:	00000008 	.word	0x00000008

023fe060 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fe060:	b509      	push	{r0, r3, lr}
 23fe062:	4804      	ldr	r0, [pc, #16]	; (23fe074 <system_delay_ms+0x14>)
 23fe064:	6800      	ldr	r0, [r0, #0]
 23fe066:	4b04      	ldr	r3, [pc, #16]	; (23fe078 <system_delay_ms+0x18>)
 23fe068:	4403      	add	r3, r0
 23fe06a:	681b      	ldr	r3, [r3, #0]
 23fe06c:	695b      	ldr	r3, [r3, #20]
 23fe06e:	9302      	str	r3, [sp, #8]
 23fe070:	bd09      	pop	{r0, r3, pc}
 23fe072:	0000      	.short	0x0000
 23fe074:	1007a99c 	.word	0x1007a99c
 23fe078:	00000008 	.word	0x00000008

023fe07c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23fe07c:	b509      	push	{r0, r3, lr}
 23fe07e:	4804      	ldr	r0, [pc, #16]	; (23fe090 <system_thread_get_state+0x14>)
 23fe080:	6800      	ldr	r0, [r0, #0]
 23fe082:	4b04      	ldr	r3, [pc, #16]	; (23fe094 <system_thread_get_state+0x18>)
 23fe084:	4403      	add	r3, r0
 23fe086:	681b      	ldr	r3, [r3, #0]
 23fe088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fe08a:	9302      	str	r3, [sp, #8]
 23fe08c:	bd09      	pop	{r0, r3, pc}
 23fe08e:	0000      	.short	0x0000
 23fe090:	1007a99c 	.word	0x1007a99c
 23fe094:	00000008 	.word	0x00000008

023fe098 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fe098:	b509      	push	{r0, r3, lr}
 23fe09a:	4804      	ldr	r0, [pc, #16]	; (23fe0ac <system_ctrl_set_app_request_handler+0x14>)
 23fe09c:	6800      	ldr	r0, [r0, #0]
 23fe09e:	4b04      	ldr	r3, [pc, #16]	; (23fe0b0 <system_ctrl_set_app_request_handler+0x18>)
 23fe0a0:	4403      	add	r3, r0
 23fe0a2:	681b      	ldr	r3, [r3, #0]
 23fe0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fe0a8:	9302      	str	r3, [sp, #8]
 23fe0aa:	bd09      	pop	{r0, r3, pc}
 23fe0ac:	1007a99c 	.word	0x1007a99c
 23fe0b0:	00000008 	.word	0x00000008

023fe0b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fe0b4:	b509      	push	{r0, r3, lr}
 23fe0b6:	4804      	ldr	r0, [pc, #16]	; (23fe0c8 <system_ctrl_set_result+0x14>)
 23fe0b8:	6800      	ldr	r0, [r0, #0]
 23fe0ba:	4b04      	ldr	r3, [pc, #16]	; (23fe0cc <system_ctrl_set_result+0x18>)
 23fe0bc:	4403      	add	r3, r0
 23fe0be:	681b      	ldr	r3, [r3, #0]
 23fe0c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fe0c4:	9302      	str	r3, [sp, #8]
 23fe0c6:	bd09      	pop	{r0, r3, pc}
 23fe0c8:	1007a99c 	.word	0x1007a99c
 23fe0cc:	00000008 	.word	0x00000008

023fe0d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe0d0:	b509      	push	{r0, r3, lr}
 23fe0d2:	4804      	ldr	r0, [pc, #16]	; (23fe0e4 <network_connect+0x14>)
 23fe0d4:	6800      	ldr	r0, [r0, #0]
 23fe0d6:	4b04      	ldr	r3, [pc, #16]	; (23fe0e8 <network_connect+0x18>)
 23fe0d8:	4403      	add	r3, r0
 23fe0da:	681b      	ldr	r3, [r3, #0]
 23fe0dc:	685b      	ldr	r3, [r3, #4]
 23fe0de:	9302      	str	r3, [sp, #8]
 23fe0e0:	bd09      	pop	{r0, r3, pc}
 23fe0e2:	0000      	.short	0x0000
 23fe0e4:	1007a99c 	.word	0x1007a99c
 23fe0e8:	00000028 	.word	0x00000028

023fe0ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fe0ec:	b509      	push	{r0, r3, lr}
 23fe0ee:	4804      	ldr	r0, [pc, #16]	; (23fe100 <network_connecting+0x14>)
 23fe0f0:	6800      	ldr	r0, [r0, #0]
 23fe0f2:	4b04      	ldr	r3, [pc, #16]	; (23fe104 <network_connecting+0x18>)
 23fe0f4:	4403      	add	r3, r0
 23fe0f6:	681b      	ldr	r3, [r3, #0]
 23fe0f8:	689b      	ldr	r3, [r3, #8]
 23fe0fa:	9302      	str	r3, [sp, #8]
 23fe0fc:	bd09      	pop	{r0, r3, pc}
 23fe0fe:	0000      	.short	0x0000
 23fe100:	1007a99c 	.word	0x1007a99c
 23fe104:	00000028 	.word	0x00000028

023fe108 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fe108:	b509      	push	{r0, r3, lr}
 23fe10a:	4804      	ldr	r0, [pc, #16]	; (23fe11c <network_disconnect+0x14>)
 23fe10c:	6800      	ldr	r0, [r0, #0]
 23fe10e:	4b04      	ldr	r3, [pc, #16]	; (23fe120 <network_disconnect+0x18>)
 23fe110:	4403      	add	r3, r0
 23fe112:	681b      	ldr	r3, [r3, #0]
 23fe114:	68db      	ldr	r3, [r3, #12]
 23fe116:	9302      	str	r3, [sp, #8]
 23fe118:	bd09      	pop	{r0, r3, pc}
 23fe11a:	0000      	.short	0x0000
 23fe11c:	1007a99c 	.word	0x1007a99c
 23fe120:	00000028 	.word	0x00000028

023fe124 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fe124:	b509      	push	{r0, r3, lr}
 23fe126:	4804      	ldr	r0, [pc, #16]	; (23fe138 <network_ready+0x14>)
 23fe128:	6800      	ldr	r0, [r0, #0]
 23fe12a:	4b04      	ldr	r3, [pc, #16]	; (23fe13c <network_ready+0x18>)
 23fe12c:	4403      	add	r3, r0
 23fe12e:	681b      	ldr	r3, [r3, #0]
 23fe130:	691b      	ldr	r3, [r3, #16]
 23fe132:	9302      	str	r3, [sp, #8]
 23fe134:	bd09      	pop	{r0, r3, pc}
 23fe136:	0000      	.short	0x0000
 23fe138:	1007a99c 	.word	0x1007a99c
 23fe13c:	00000028 	.word	0x00000028

023fe140 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe140:	b509      	push	{r0, r3, lr}
 23fe142:	4804      	ldr	r0, [pc, #16]	; (23fe154 <network_on+0x14>)
 23fe144:	6800      	ldr	r0, [r0, #0]
 23fe146:	4b04      	ldr	r3, [pc, #16]	; (23fe158 <network_on+0x18>)
 23fe148:	4403      	add	r3, r0
 23fe14a:	681b      	ldr	r3, [r3, #0]
 23fe14c:	695b      	ldr	r3, [r3, #20]
 23fe14e:	9302      	str	r3, [sp, #8]
 23fe150:	bd09      	pop	{r0, r3, pc}
 23fe152:	0000      	.short	0x0000
 23fe154:	1007a99c 	.word	0x1007a99c
 23fe158:	00000028 	.word	0x00000028

023fe15c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe15c:	b509      	push	{r0, r3, lr}
 23fe15e:	4804      	ldr	r0, [pc, #16]	; (23fe170 <network_off+0x14>)
 23fe160:	6800      	ldr	r0, [r0, #0]
 23fe162:	4b04      	ldr	r3, [pc, #16]	; (23fe174 <network_off+0x18>)
 23fe164:	4403      	add	r3, r0
 23fe166:	681b      	ldr	r3, [r3, #0]
 23fe168:	699b      	ldr	r3, [r3, #24]
 23fe16a:	9302      	str	r3, [sp, #8]
 23fe16c:	bd09      	pop	{r0, r3, pc}
 23fe16e:	0000      	.short	0x0000
 23fe170:	1007a99c 	.word	0x1007a99c
 23fe174:	00000028 	.word	0x00000028

023fe178 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fe178:	b509      	push	{r0, r3, lr}
 23fe17a:	4804      	ldr	r0, [pc, #16]	; (23fe18c <network_listen+0x14>)
 23fe17c:	6800      	ldr	r0, [r0, #0]
 23fe17e:	4b04      	ldr	r3, [pc, #16]	; (23fe190 <network_listen+0x18>)
 23fe180:	4403      	add	r3, r0
 23fe182:	681b      	ldr	r3, [r3, #0]
 23fe184:	69db      	ldr	r3, [r3, #28]
 23fe186:	9302      	str	r3, [sp, #8]
 23fe188:	bd09      	pop	{r0, r3, pc}
 23fe18a:	0000      	.short	0x0000
 23fe18c:	1007a99c 	.word	0x1007a99c
 23fe190:	00000028 	.word	0x00000028

023fe194 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fe194:	b509      	push	{r0, r3, lr}
 23fe196:	4804      	ldr	r0, [pc, #16]	; (23fe1a8 <network_listening+0x14>)
 23fe198:	6800      	ldr	r0, [r0, #0]
 23fe19a:	4b04      	ldr	r3, [pc, #16]	; (23fe1ac <network_listening+0x18>)
 23fe19c:	4403      	add	r3, r0
 23fe19e:	681b      	ldr	r3, [r3, #0]
 23fe1a0:	6a1b      	ldr	r3, [r3, #32]
 23fe1a2:	9302      	str	r3, [sp, #8]
 23fe1a4:	bd09      	pop	{r0, r3, pc}
 23fe1a6:	0000      	.short	0x0000
 23fe1a8:	1007a99c 	.word	0x1007a99c
 23fe1ac:	00000028 	.word	0x00000028

023fe1b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fe1b0:	b509      	push	{r0, r3, lr}
 23fe1b2:	4804      	ldr	r0, [pc, #16]	; (23fe1c4 <network_set_listen_timeout+0x14>)
 23fe1b4:	6800      	ldr	r0, [r0, #0]
 23fe1b6:	4b04      	ldr	r3, [pc, #16]	; (23fe1c8 <network_set_listen_timeout+0x18>)
 23fe1b8:	4403      	add	r3, r0
 23fe1ba:	681b      	ldr	r3, [r3, #0]
 23fe1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe1be:	9302      	str	r3, [sp, #8]
 23fe1c0:	bd09      	pop	{r0, r3, pc}
 23fe1c2:	0000      	.short	0x0000
 23fe1c4:	1007a99c 	.word	0x1007a99c
 23fe1c8:	00000028 	.word	0x00000028

023fe1cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fe1cc:	b509      	push	{r0, r3, lr}
 23fe1ce:	4804      	ldr	r0, [pc, #16]	; (23fe1e0 <network_get_listen_timeout+0x14>)
 23fe1d0:	6800      	ldr	r0, [r0, #0]
 23fe1d2:	4b04      	ldr	r3, [pc, #16]	; (23fe1e4 <network_get_listen_timeout+0x18>)
 23fe1d4:	4403      	add	r3, r0
 23fe1d6:	681b      	ldr	r3, [r3, #0]
 23fe1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe1da:	9302      	str	r3, [sp, #8]
 23fe1dc:	bd09      	pop	{r0, r3, pc}
 23fe1de:	0000      	.short	0x0000
 23fe1e0:	1007a99c 	.word	0x1007a99c
 23fe1e4:	00000028 	.word	0x00000028

023fe1e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fe1e8:	b509      	push	{r0, r3, lr}
 23fe1ea:	4804      	ldr	r0, [pc, #16]	; (23fe1fc <network_is_on+0x14>)
 23fe1ec:	6800      	ldr	r0, [r0, #0]
 23fe1ee:	4b04      	ldr	r3, [pc, #16]	; (23fe200 <network_is_on+0x18>)
 23fe1f0:	4403      	add	r3, r0
 23fe1f2:	681b      	ldr	r3, [r3, #0]
 23fe1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe1f6:	9302      	str	r3, [sp, #8]
 23fe1f8:	bd09      	pop	{r0, r3, pc}
 23fe1fa:	0000      	.short	0x0000
 23fe1fc:	1007a99c 	.word	0x1007a99c
 23fe200:	00000028 	.word	0x00000028

023fe204 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fe204:	b509      	push	{r0, r3, lr}
 23fe206:	4804      	ldr	r0, [pc, #16]	; (23fe218 <network_is_off+0x14>)
 23fe208:	6800      	ldr	r0, [r0, #0]
 23fe20a:	4b04      	ldr	r3, [pc, #16]	; (23fe21c <network_is_off+0x18>)
 23fe20c:	4403      	add	r3, r0
 23fe20e:	681b      	ldr	r3, [r3, #0]
 23fe210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe212:	9302      	str	r3, [sp, #8]
 23fe214:	bd09      	pop	{r0, r3, pc}
 23fe216:	0000      	.short	0x0000
 23fe218:	1007a99c 	.word	0x1007a99c
 23fe21c:	00000028 	.word	0x00000028

023fe220 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fe220:	b509      	push	{r0, r3, lr}
 23fe222:	4804      	ldr	r0, [pc, #16]	; (23fe234 <network_prefer+0x14>)
 23fe224:	6800      	ldr	r0, [r0, #0]
 23fe226:	4b04      	ldr	r3, [pc, #16]	; (23fe238 <network_prefer+0x18>)
 23fe228:	4403      	add	r3, r0
 23fe22a:	681b      	ldr	r3, [r3, #0]
 23fe22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe22e:	9302      	str	r3, [sp, #8]
 23fe230:	bd09      	pop	{r0, r3, pc}
 23fe232:	0000      	.short	0x0000
 23fe234:	1007a99c 	.word	0x1007a99c
 23fe238:	00000028 	.word	0x00000028

023fe23c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fe23c:	b509      	push	{r0, r3, lr}
 23fe23e:	4804      	ldr	r0, [pc, #16]	; (23fe250 <network_is_preferred+0x14>)
 23fe240:	6800      	ldr	r0, [r0, #0]
 23fe242:	4b04      	ldr	r3, [pc, #16]	; (23fe254 <network_is_preferred+0x18>)
 23fe244:	4403      	add	r3, r0
 23fe246:	681b      	ldr	r3, [r3, #0]
 23fe248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fe24a:	9302      	str	r3, [sp, #8]
 23fe24c:	bd09      	pop	{r0, r3, pc}
 23fe24e:	0000      	.short	0x0000
 23fe250:	1007a99c 	.word	0x1007a99c
 23fe254:	00000028 	.word	0x00000028

023fe258 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fe258:	b509      	push	{r0, r3, lr}
 23fe25a:	4804      	ldr	r0, [pc, #16]	; (23fe26c <spark_process+0x14>)
 23fe25c:	6800      	ldr	r0, [r0, #0]
 23fe25e:	4b04      	ldr	r3, [pc, #16]	; (23fe270 <spark_process+0x18>)
 23fe260:	4403      	add	r3, r0
 23fe262:	681b      	ldr	r3, [r3, #0]
 23fe264:	689b      	ldr	r3, [r3, #8]
 23fe266:	9302      	str	r3, [sp, #8]
 23fe268:	bd09      	pop	{r0, r3, pc}
 23fe26a:	0000      	.short	0x0000
 23fe26c:	1007a99c 	.word	0x1007a99c
 23fe270:	0000002c 	.word	0x0000002c

023fe274 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fe274:	b509      	push	{r0, r3, lr}
 23fe276:	4804      	ldr	r0, [pc, #16]	; (23fe288 <spark_cloud_flag_connected+0x14>)
 23fe278:	6800      	ldr	r0, [r0, #0]
 23fe27a:	4b04      	ldr	r3, [pc, #16]	; (23fe28c <spark_cloud_flag_connected+0x18>)
 23fe27c:	4403      	add	r3, r0
 23fe27e:	681b      	ldr	r3, [r3, #0]
 23fe280:	695b      	ldr	r3, [r3, #20]
 23fe282:	9302      	str	r3, [sp, #8]
 23fe284:	bd09      	pop	{r0, r3, pc}
 23fe286:	0000      	.short	0x0000
 23fe288:	1007a99c 	.word	0x1007a99c
 23fe28c:	0000002c 	.word	0x0000002c

023fe290 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23fe290:	b509      	push	{r0, r3, lr}
 23fe292:	4804      	ldr	r0, [pc, #16]	; (23fe2a4 <spark_sync_time_pending+0x14>)
 23fe294:	6800      	ldr	r0, [r0, #0]
 23fe296:	4b04      	ldr	r3, [pc, #16]	; (23fe2a8 <spark_sync_time_pending+0x18>)
 23fe298:	4403      	add	r3, r0
 23fe29a:	681b      	ldr	r3, [r3, #0]
 23fe29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe29e:	9302      	str	r3, [sp, #8]
 23fe2a0:	bd09      	pop	{r0, r3, pc}
 23fe2a2:	0000      	.short	0x0000
 23fe2a4:	1007a99c 	.word	0x1007a99c
 23fe2a8:	0000002c 	.word	0x0000002c

023fe2ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fe2ac:	b509      	push	{r0, r3, lr}
 23fe2ae:	4804      	ldr	r0, [pc, #16]	; (23fe2c0 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fe2b0:	6800      	ldr	r0, [r0, #0]
 23fe2b2:	4b04      	ldr	r3, [pc, #16]	; (23fe2c4 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fe2b4:	4403      	add	r3, r0
 23fe2b6:	681b      	ldr	r3, [r3, #0]
 23fe2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe2ba:	9302      	str	r3, [sp, #8]
 23fe2bc:	bd09      	pop	{r0, r3, pc}
 23fe2be:	0000      	.short	0x0000
 23fe2c0:	1007a99c 	.word	0x1007a99c
 23fe2c4:	0000002c 	.word	0x0000002c

023fe2c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fe2c8:	b509      	push	{r0, r3, lr}
 23fe2ca:	4804      	ldr	r0, [pc, #16]	; (23fe2dc <malloc+0x14>)
 23fe2cc:	6800      	ldr	r0, [r0, #0]
 23fe2ce:	4b04      	ldr	r3, [pc, #16]	; (23fe2e0 <malloc+0x18>)
 23fe2d0:	4403      	add	r3, r0
 23fe2d2:	681b      	ldr	r3, [r3, #0]
 23fe2d4:	681b      	ldr	r3, [r3, #0]
 23fe2d6:	9302      	str	r3, [sp, #8]
 23fe2d8:	bd09      	pop	{r0, r3, pc}
 23fe2da:	0000      	.short	0x0000
 23fe2dc:	1007a99c 	.word	0x1007a99c
 23fe2e0:	00000004 	.word	0x00000004

023fe2e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fe2e4:	b509      	push	{r0, r3, lr}
 23fe2e6:	4804      	ldr	r0, [pc, #16]	; (23fe2f8 <free+0x14>)
 23fe2e8:	6800      	ldr	r0, [r0, #0]
 23fe2ea:	4b04      	ldr	r3, [pc, #16]	; (23fe2fc <free+0x18>)
 23fe2ec:	4403      	add	r3, r0
 23fe2ee:	681b      	ldr	r3, [r3, #0]
 23fe2f0:	685b      	ldr	r3, [r3, #4]
 23fe2f2:	9302      	str	r3, [sp, #8]
 23fe2f4:	bd09      	pop	{r0, r3, pc}
 23fe2f6:	0000      	.short	0x0000
 23fe2f8:	1007a99c 	.word	0x1007a99c
 23fe2fc:	00000004 	.word	0x00000004

023fe300 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fe300:	b509      	push	{r0, r3, lr}
 23fe302:	4804      	ldr	r0, [pc, #16]	; (23fe314 <realloc+0x14>)
 23fe304:	6800      	ldr	r0, [r0, #0]
 23fe306:	4b04      	ldr	r3, [pc, #16]	; (23fe318 <realloc+0x18>)
 23fe308:	4403      	add	r3, r0
 23fe30a:	681b      	ldr	r3, [r3, #0]
 23fe30c:	689b      	ldr	r3, [r3, #8]
 23fe30e:	9302      	str	r3, [sp, #8]
 23fe310:	bd09      	pop	{r0, r3, pc}
 23fe312:	0000      	.short	0x0000
 23fe314:	1007a99c 	.word	0x1007a99c
 23fe318:	00000004 	.word	0x00000004

023fe31c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23fe31c:	b509      	push	{r0, r3, lr}
 23fe31e:	4804      	ldr	r0, [pc, #16]	; (23fe330 <siprintf+0x14>)
 23fe320:	6800      	ldr	r0, [r0, #0]
 23fe322:	4b04      	ldr	r3, [pc, #16]	; (23fe334 <siprintf+0x18>)
 23fe324:	4403      	add	r3, r0
 23fe326:	681b      	ldr	r3, [r3, #0]
 23fe328:	691b      	ldr	r3, [r3, #16]
 23fe32a:	9302      	str	r3, [sp, #8]
 23fe32c:	bd09      	pop	{r0, r3, pc}
 23fe32e:	0000      	.short	0x0000
 23fe330:	1007a99c 	.word	0x1007a99c
 23fe334:	00000004 	.word	0x00000004

023fe338 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23fe338:	b509      	push	{r0, r3, lr}
 23fe33a:	4804      	ldr	r0, [pc, #16]	; (23fe34c <snprintf+0x14>)
 23fe33c:	6800      	ldr	r0, [r0, #0]
 23fe33e:	4b04      	ldr	r3, [pc, #16]	; (23fe350 <snprintf+0x18>)
 23fe340:	4403      	add	r3, r0
 23fe342:	681b      	ldr	r3, [r3, #0]
 23fe344:	69db      	ldr	r3, [r3, #28]
 23fe346:	9302      	str	r3, [sp, #8]
 23fe348:	bd09      	pop	{r0, r3, pc}
 23fe34a:	0000      	.short	0x0000
 23fe34c:	1007a99c 	.word	0x1007a99c
 23fe350:	00000004 	.word	0x00000004

023fe354 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fe354:	b509      	push	{r0, r3, lr}
 23fe356:	4804      	ldr	r0, [pc, #16]	; (23fe368 <vsnprintf+0x14>)
 23fe358:	6800      	ldr	r0, [r0, #0]
 23fe35a:	4b04      	ldr	r3, [pc, #16]	; (23fe36c <vsnprintf+0x18>)
 23fe35c:	4403      	add	r3, r0
 23fe35e:	681b      	ldr	r3, [r3, #0]
 23fe360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe362:	9302      	str	r3, [sp, #8]
 23fe364:	bd09      	pop	{r0, r3, pc}
 23fe366:	0000      	.short	0x0000
 23fe368:	1007a99c 	.word	0x1007a99c
 23fe36c:	00000004 	.word	0x00000004

023fe370 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fe370:	b509      	push	{r0, r3, lr}
 23fe372:	4804      	ldr	r0, [pc, #16]	; (23fe384 <__assert_func+0x14>)
 23fe374:	6800      	ldr	r0, [r0, #0]
 23fe376:	4b04      	ldr	r3, [pc, #16]	; (23fe388 <__assert_func+0x18>)
 23fe378:	4403      	add	r3, r0
 23fe37a:	681b      	ldr	r3, [r3, #0]
 23fe37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe37e:	9302      	str	r3, [sp, #8]
 23fe380:	bd09      	pop	{r0, r3, pc}
 23fe382:	0000      	.short	0x0000
 23fe384:	1007a99c 	.word	0x1007a99c
 23fe388:	00000004 	.word	0x00000004

023fe38c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fe38c:	b509      	push	{r0, r3, lr}
 23fe38e:	4804      	ldr	r0, [pc, #16]	; (23fe3a0 <newlib_impure_ptr_callback+0x14>)
 23fe390:	6800      	ldr	r0, [r0, #0]
 23fe392:	4b04      	ldr	r3, [pc, #16]	; (23fe3a4 <newlib_impure_ptr_callback+0x18>)
 23fe394:	4403      	add	r3, r0
 23fe396:	681b      	ldr	r3, [r3, #0]
 23fe398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe39a:	9302      	str	r3, [sp, #8]
 23fe39c:	bd09      	pop	{r0, r3, pc}
 23fe39e:	0000      	.short	0x0000
 23fe3a0:	1007a99c 	.word	0x1007a99c
 23fe3a4:	00000004 	.word	0x00000004

023fe3a8 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 23fe3a8:	b509      	push	{r0, r3, lr}
 23fe3aa:	4804      	ldr	r0, [pc, #16]	; (23fe3bc <strftime+0x14>)
 23fe3ac:	6800      	ldr	r0, [r0, #0]
 23fe3ae:	4b04      	ldr	r3, [pc, #16]	; (23fe3c0 <strftime+0x18>)
 23fe3b0:	4403      	add	r3, r0
 23fe3b2:	681b      	ldr	r3, [r3, #0]
 23fe3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fe3b6:	9302      	str	r3, [sp, #8]
 23fe3b8:	bd09      	pop	{r0, r3, pc}
 23fe3ba:	0000      	.short	0x0000
 23fe3bc:	1007a99c 	.word	0x1007a99c
 23fe3c0:	00000004 	.word	0x00000004

023fe3c4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23fe3c4:	b509      	push	{r0, r3, lr}
 23fe3c6:	4804      	ldr	r0, [pc, #16]	; (23fe3d8 <localtime_r+0x14>)
 23fe3c8:	6800      	ldr	r0, [r0, #0]
 23fe3ca:	4b04      	ldr	r3, [pc, #16]	; (23fe3dc <localtime_r+0x18>)
 23fe3cc:	4403      	add	r3, r0
 23fe3ce:	681b      	ldr	r3, [r3, #0]
 23fe3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fe3d2:	9302      	str	r3, [sp, #8]
 23fe3d4:	bd09      	pop	{r0, r3, pc}
 23fe3d6:	0000      	.short	0x0000
 23fe3d8:	1007a99c 	.word	0x1007a99c
 23fe3dc:	00000004 	.word	0x00000004

023fe3e0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe3e0:	2200      	movs	r2, #0
 23fe3e2:	6840      	ldr	r0, [r0, #4]
 23fe3e4:	4611      	mov	r1, r2
 23fe3e6:	f7ff bed5 	b.w	23fe194 <network_listening>

023fe3ea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe3ea:	2200      	movs	r2, #0
 23fe3ec:	6840      	ldr	r0, [r0, #4]
 23fe3ee:	4611      	mov	r1, r2
 23fe3f0:	f7ff beec 	b.w	23fe1cc <network_get_listen_timeout>

023fe3f4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe3f4:	2200      	movs	r2, #0
 23fe3f6:	6840      	ldr	r0, [r0, #4]
 23fe3f8:	f7ff beda 	b.w	23fe1b0 <network_set_listen_timeout>

023fe3fc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe3fc:	2200      	movs	r2, #0
 23fe3fe:	6840      	ldr	r0, [r0, #4]
 23fe400:	f081 0101 	eor.w	r1, r1, #1
 23fe404:	f7ff beb8 	b.w	23fe178 <network_listen>

023fe408 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe408:	2300      	movs	r3, #0
 23fe40a:	6840      	ldr	r0, [r0, #4]
 23fe40c:	461a      	mov	r2, r3
 23fe40e:	4619      	mov	r1, r3
 23fe410:	f7ff bea4 	b.w	23fe15c <network_off>

023fe414 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe414:	2300      	movs	r3, #0
 23fe416:	6840      	ldr	r0, [r0, #4]
 23fe418:	461a      	mov	r2, r3
 23fe41a:	4619      	mov	r1, r3
 23fe41c:	f7ff be90 	b.w	23fe140 <network_on>

023fe420 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fe420:	2200      	movs	r2, #0
 23fe422:	6840      	ldr	r0, [r0, #4]
 23fe424:	4611      	mov	r1, r2
 23fe426:	f7ff be7d 	b.w	23fe124 <network_ready>

023fe42a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe42a:	2200      	movs	r2, #0
 23fe42c:	6840      	ldr	r0, [r0, #4]
 23fe42e:	4611      	mov	r1, r2
 23fe430:	f7ff be5c 	b.w	23fe0ec <network_connecting>

023fe434 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe434:	2200      	movs	r2, #0
 23fe436:	2102      	movs	r1, #2
 23fe438:	6840      	ldr	r0, [r0, #4]
 23fe43a:	f7ff be65 	b.w	23fe108 <network_disconnect>

023fe43e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe43e:	2300      	movs	r3, #0
 23fe440:	6840      	ldr	r0, [r0, #4]
 23fe442:	461a      	mov	r2, r3
 23fe444:	f7ff be44 	b.w	23fe0d0 <network_connect>

023fe448 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fe448:	2203      	movs	r2, #3
 23fe44a:	4b02      	ldr	r3, [pc, #8]	; (23fe454 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fe44c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fe44e:	4a02      	ldr	r2, [pc, #8]	; (23fe458 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fe450:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fe452:	4770      	bx	lr
 23fe454:	1007ae74 	.word	0x1007ae74
 23fe458:	023ffd34 	.word	0x023ffd34

023fe45c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fe45c:	2100      	movs	r1, #0
 23fe45e:	f7ff bd65 	b.w	23fdf2c <hal_spi_release>

023fe462 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fe462:	2100      	movs	r1, #0
 23fe464:	f7ff bd54 	b.w	23fdf10 <hal_spi_acquire>

023fe468 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe468:	b510      	push	{r4, lr}
 23fe46a:	4604      	mov	r4, r0
 23fe46c:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe46e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe470:	f7ff fd24 	bl	23fdebc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe474:	2300      	movs	r3, #0
}
 23fe476:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe478:	6063      	str	r3, [r4, #4]
}
 23fe47a:	bd10      	pop	{r4, pc}

023fe47c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fe47c:	b513      	push	{r0, r1, r4, lr}
 23fe47e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fe480:	7800      	ldrb	r0, [r0, #0]
 23fe482:	f7ff ffee 	bl	23fe462 <_ZN8SPIClass4lockEv.isra.0>
 23fe486:	b958      	cbnz	r0, 23fe4a0 <_ZN8SPIClass5beginEv+0x24>
 23fe488:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fe48a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fe48e:	9001      	str	r0, [sp, #4]
 23fe490:	f7ff fcce 	bl	23fde30 <hal_spi_begin>
        unlock();
 23fe494:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe496:	b002      	add	sp, #8
 23fe498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe49c:	f7ff bfde 	b.w	23fe45c <_ZN8SPIClass6unlockEv.isra.0>
 23fe4a0:	b002      	add	sp, #8
 23fe4a2:	bd10      	pop	{r4, pc}

023fe4a4 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 23fe4a4:	b513      	push	{r0, r1, r4, lr}
 23fe4a6:	4604      	mov	r4, r0
    if (!lock())
 23fe4a8:	7800      	ldrb	r0, [r0, #0]
{
 23fe4aa:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fe4ac:	f7ff ffd9 	bl	23fe462 <_ZN8SPIClass4lockEv.isra.0>
 23fe4b0:	9901      	ldr	r1, [sp, #4]
 23fe4b2:	b948      	cbnz	r0, 23fe4c8 <_ZN8SPIClass11setBitOrderEh+0x24>
 23fe4b4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 23fe4b6:	9001      	str	r0, [sp, #4]
 23fe4b8:	f7ff fcc8 	bl	23fde4c <hal_spi_set_bit_order>
        unlock();
 23fe4bc:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe4be:	b002      	add	sp, #8
 23fe4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe4c4:	f7ff bfca 	b.w	23fe45c <_ZN8SPIClass6unlockEv.isra.0>
 23fe4c8:	b002      	add	sp, #8
 23fe4ca:	bd10      	pop	{r4, pc}

023fe4cc <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 23fe4cc:	b513      	push	{r0, r1, r4, lr}
 23fe4ce:	4604      	mov	r4, r0
    if (!lock())
 23fe4d0:	7800      	ldrb	r0, [r0, #0]
{
 23fe4d2:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fe4d4:	f7ff ffc5 	bl	23fe462 <_ZN8SPIClass4lockEv.isra.0>
 23fe4d8:	9901      	ldr	r1, [sp, #4]
 23fe4da:	b948      	cbnz	r0, 23fe4f0 <_ZN8SPIClass11setDataModeEh+0x24>
 23fe4dc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fe4de:	9001      	str	r0, [sp, #4]
 23fe4e0:	f7ff fcc2 	bl	23fde68 <hal_spi_set_data_mode>
        unlock();
 23fe4e4:	9801      	ldr	r0, [sp, #4]
    }
}
 23fe4e6:	b002      	add	sp, #8
 23fe4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe4ec:	f7ff bfb6 	b.w	23fe45c <_ZN8SPIClass6unlockEv.isra.0>
 23fe4f0:	b002      	add	sp, #8
 23fe4f2:	bd10      	pop	{r4, pc}

023fe4f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fe4f4:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fe4f6:	2400      	movs	r4, #0
 23fe4f8:	0840      	lsrs	r0, r0, #1
 23fe4fa:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe4fc:	6818      	ldr	r0, [r3, #0]
 23fe4fe:	b2e5      	uxtb	r5, r4
 23fe500:	4288      	cmp	r0, r1
 23fe502:	d906      	bls.n	23fe512 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fe504:	3401      	adds	r4, #1
 23fe506:	2c08      	cmp	r4, #8
 23fe508:	d002      	beq.n	23fe510 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fe50a:	0840      	lsrs	r0, r0, #1
 23fe50c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fe50e:	e7f5      	b.n	23fe4fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fe510:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fe512:	4b02      	ldr	r3, [pc, #8]	; (23fe51c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fe514:	5d5b      	ldrb	r3, [r3, r5]
 23fe516:	7013      	strb	r3, [r2, #0]
}
 23fe518:	bd30      	pop	{r4, r5, pc}
 23fe51a:	bf00      	nop
 23fe51c:	023ffd70 	.word	0x023ffd70

023fe520 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fe520:	2300      	movs	r3, #0
{
 23fe522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe526:	4604      	mov	r4, r0
 23fe528:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fe52a:	7800      	ldrb	r0, [r0, #0]
{
 23fe52c:	460e      	mov	r6, r1
 23fe52e:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fe530:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fe532:	f7ff ff96 	bl	23fe462 <_ZN8SPIClass4lockEv.isra.0>
 23fe536:	4605      	mov	r5, r0
 23fe538:	bb00      	cbnz	r0, 23fe57c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe53a:	4601      	mov	r1, r0
 23fe53c:	2214      	movs	r2, #20
 23fe53e:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fe540:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fe544:	f001 f827 	bl	23ff596 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe548:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fe54a:	462a      	mov	r2, r5
 23fe54c:	4640      	mov	r0, r8
 23fe54e:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fe550:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fe554:	f7ff fcce 	bl	23fdef4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fe558:	fb07 f106 	mul.w	r1, r7, r6
 23fe55c:	9804      	ldr	r0, [sp, #16]
 23fe55e:	ab02      	add	r3, sp, #8
 23fe560:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fe564:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fe568:	f7ff ffc4 	bl	23fe4f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fe56c:	7820      	ldrb	r0, [r4, #0]
 23fe56e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fe572:	f7ff fc87 	bl	23fde84 <hal_spi_set_clock_divider>
        unlock();
 23fe576:	7820      	ldrb	r0, [r4, #0]
 23fe578:	f7ff ff70 	bl	23fe45c <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fe57c:	9802      	ldr	r0, [sp, #8]
 23fe57e:	b008      	add	sp, #32
 23fe580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe584 <_ZN8SPIClass15setClockDividerEh>:
{
 23fe584:	b538      	push	{r3, r4, r5, lr}
 23fe586:	4604      	mov	r4, r0
    if (!lock())
 23fe588:	7800      	ldrb	r0, [r0, #0]
{
 23fe58a:	460d      	mov	r5, r1
    if (!lock())
 23fe58c:	f7ff ff69 	bl	23fe462 <_ZN8SPIClass4lockEv.isra.0>
 23fe590:	4603      	mov	r3, r0
 23fe592:	b9d0      	cbnz	r0, 23fe5ca <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
 23fe594:	6861      	ldr	r1, [r4, #4]
 23fe596:	b199      	cbz	r1, 23fe5c0 <_ZN8SPIClass15setClockDividerEh+0x3c>
 23fe598:	4a0c      	ldr	r2, [pc, #48]	; (23fe5cc <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
 23fe59a:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fe59e:	4285      	cmp	r5, r0
 23fe5a0:	d002      	beq.n	23fe5a8 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
 23fe5a2:	3301      	adds	r3, #1
 23fe5a4:	2b08      	cmp	r3, #8
 23fe5a6:	d1f8      	bne.n	23fe59a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
 23fe5a8:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 23fe5aa:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 23fe5ac:	2201      	movs	r2, #1
 23fe5ae:	4620      	mov	r0, r4
 23fe5b0:	40d9      	lsrs	r1, r3
 23fe5b2:	f7ff ffb5 	bl	23fe520 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 23fe5b6:	7820      	ldrb	r0, [r4, #0]
}
 23fe5b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
 23fe5bc:	f7ff bf4e 	b.w	23fe45c <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 23fe5c0:	4629      	mov	r1, r5
 23fe5c2:	7820      	ldrb	r0, [r4, #0]
 23fe5c4:	f7ff fc5e 	bl	23fde84 <hal_spi_set_clock_divider>
 23fe5c8:	e7f5      	b.n	23fe5b6 <_ZN8SPIClass15setClockDividerEh+0x32>
}
 23fe5ca:	bd38      	pop	{r3, r4, r5, pc}
 23fe5cc:	023ffd70 	.word	0x023ffd70

023fe5d0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 23fe5d0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fe5d2:	7800      	ldrb	r0, [r0, #0]
 23fe5d4:	f7ff fc64 	bl	23fdea0 <hal_spi_transfer>
}
 23fe5d8:	b2c0      	uxtb	r0, r0
 23fe5da:	bd08      	pop	{r3, pc}

023fe5dc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe5dc:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe5de:	2000      	movs	r0, #0
 23fe5e0:	4b04      	ldr	r3, [pc, #16]	; (23fe5f4 <_GLOBAL__sub_I_System+0x18>)
 23fe5e2:	601a      	str	r2, [r3, #0]
 23fe5e4:	4b04      	ldr	r3, [pc, #16]	; (23fe5f8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe5e6:	4a05      	ldr	r2, [pc, #20]	; (23fe5fc <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe5e8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe5ec:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe5ee:	f7ff bd29 	b.w	23fe044 <set_system_mode>
 23fe5f2:	bf00      	nop
 23fe5f4:	1007ae88 	.word	0x1007ae88
 23fe5f8:	1007ae7c 	.word	0x1007ae7c
 23fe5fc:	ffff0000 	.word	0xffff0000

023fe600 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fe600:	b510      	push	{r4, lr}
 23fe602:	4604      	mov	r4, r0
{
    free(buffer);
 23fe604:	6800      	ldr	r0, [r0, #0]
 23fe606:	f7ff fe6d 	bl	23fe2e4 <free>
}
 23fe60a:	4620      	mov	r0, r4
 23fe60c:	bd10      	pop	{r4, pc}

023fe60e <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fe60e:	b510      	push	{r4, lr}
 23fe610:	4604      	mov	r4, r0
    if (buffer) {
 23fe612:	6800      	ldr	r0, [r0, #0]
 23fe614:	b108      	cbz	r0, 23fe61a <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fe616:	f7ff fe65 	bl	23fe2e4 <free>
    }
    buffer = nullptr;
 23fe61a:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fe61c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fe620:	6023      	str	r3, [r4, #0]
}
 23fe622:	bd10      	pop	{r4, pc}

023fe624 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe624:	b538      	push	{r3, r4, r5, lr}
 23fe626:	4604      	mov	r4, r0
 23fe628:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe62a:	6800      	ldr	r0, [r0, #0]
 23fe62c:	3101      	adds	r1, #1
 23fe62e:	f7ff fe67 	bl	23fe300 <realloc>
    if (newbuffer) {
 23fe632:	b110      	cbz	r0, 23fe63a <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fe634:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fe638:	2001      	movs	r0, #1
    }
    return 0;
}
 23fe63a:	bd38      	pop	{r3, r4, r5, pc}

023fe63c <_ZN6String7reserveEj>:
{
 23fe63c:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fe63e:	6803      	ldr	r3, [r0, #0]
{
 23fe640:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fe642:	b123      	cbz	r3, 23fe64e <_ZN6String7reserveEj+0x12>
 23fe644:	6843      	ldr	r3, [r0, #4]
 23fe646:	428b      	cmp	r3, r1
 23fe648:	d301      	bcc.n	23fe64e <_ZN6String7reserveEj+0x12>
 23fe64a:	2001      	movs	r0, #1
}
 23fe64c:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fe64e:	4620      	mov	r0, r4
 23fe650:	f7ff ffe8 	bl	23fe624 <_ZN6String12changeBufferEj>
 23fe654:	2800      	cmp	r0, #0
 23fe656:	d0f9      	beq.n	23fe64c <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fe658:	68a3      	ldr	r3, [r4, #8]
 23fe65a:	2b00      	cmp	r3, #0
 23fe65c:	d1f5      	bne.n	23fe64a <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fe65e:	6822      	ldr	r2, [r4, #0]
 23fe660:	7013      	strb	r3, [r2, #0]
 23fe662:	e7f2      	b.n	23fe64a <_ZN6String7reserveEj+0xe>

023fe664 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe666:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fe668:	4611      	mov	r1, r2
 23fe66a:	9201      	str	r2, [sp, #4]
{
 23fe66c:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fe66e:	f7ff ffe5 	bl	23fe63c <_ZN6String7reserveEj>
 23fe672:	9a01      	ldr	r2, [sp, #4]
 23fe674:	b928      	cbnz	r0, 23fe682 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fe676:	4620      	mov	r0, r4
 23fe678:	f7ff ffc9 	bl	23fe60e <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fe67c:	4620      	mov	r0, r4
 23fe67e:	b003      	add	sp, #12
 23fe680:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fe682:	4629      	mov	r1, r5
    len = length;
 23fe684:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fe686:	6820      	ldr	r0, [r4, #0]
 23fe688:	f000 ff78 	bl	23ff57c <memcpy>
    buffer[len] = 0;
 23fe68c:	2100      	movs	r1, #0
 23fe68e:	6822      	ldr	r2, [r4, #0]
 23fe690:	68a3      	ldr	r3, [r4, #8]
 23fe692:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fe694:	e7f2      	b.n	23fe67c <_ZN6String4copyEPKcj+0x18>

023fe696 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fe696:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fe698:	b513      	push	{r0, r1, r4, lr}
 23fe69a:	4604      	mov	r4, r0
    capacity_ = 0;
 23fe69c:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fe6a0:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fe6a2:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fe6a4:	b141      	cbz	r1, 23fe6b8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fe6a6:	4608      	mov	r0, r1
 23fe6a8:	9101      	str	r1, [sp, #4]
 23fe6aa:	f7fe facb 	bl	23fcc44 <strlen>
 23fe6ae:	9901      	ldr	r1, [sp, #4]
 23fe6b0:	4602      	mov	r2, r0
 23fe6b2:	4620      	mov	r0, r4
 23fe6b4:	f7ff ffd6 	bl	23fe664 <_ZN6String4copyEPKcj>
}
 23fe6b8:	4620      	mov	r0, r4
 23fe6ba:	b002      	add	sp, #8
 23fe6bc:	bd10      	pop	{r4, pc}
	...

023fe6c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fe6c0:	2300      	movs	r3, #0
 23fe6c2:	4802      	ldr	r0, [pc, #8]	; (23fe6cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fe6c4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fe6c6:	f7ff ba8d 	b.w	23fdbe4 <os_mutex_recursive_create>
 23fe6ca:	bf00      	nop
 23fe6cc:	1007ae8c 	.word	0x1007ae8c

023fe6d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe6d2:	4606      	mov	r6, r0
 23fe6d4:	460d      	mov	r5, r1
  size_t n = 0;
 23fe6d6:	2400      	movs	r4, #0
 23fe6d8:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe6da:	42bd      	cmp	r5, r7
 23fe6dc:	d00c      	beq.n	23fe6f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe6de:	6833      	ldr	r3, [r6, #0]
 23fe6e0:	4630      	mov	r0, r6
 23fe6e2:	689b      	ldr	r3, [r3, #8]
 23fe6e4:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe6e8:	4798      	blx	r3
     if (chunk>=0)
 23fe6ea:	1e03      	subs	r3, r0, #0
 23fe6ec:	db01      	blt.n	23fe6f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe6ee:	441c      	add	r4, r3
  while (size--) {
 23fe6f0:	e7f3      	b.n	23fe6da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe6f2:	2c00      	cmp	r4, #0
 23fe6f4:	bf08      	it	eq
 23fe6f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe6f8:	4620      	mov	r0, r4
 23fe6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe6fc <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fe6fc:	b513      	push	{r0, r1, r4, lr}
 23fe6fe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fe700:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe702:	b159      	cbz	r1, 23fe71c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe704:	9101      	str	r1, [sp, #4]
 23fe706:	f7fe fa9d 	bl	23fcc44 <strlen>
 23fe70a:	4602      	mov	r2, r0
 23fe70c:	4620      	mov	r0, r4
 23fe70e:	6823      	ldr	r3, [r4, #0]
 23fe710:	9901      	ldr	r1, [sp, #4]
 23fe712:	68db      	ldr	r3, [r3, #12]
    }
 23fe714:	b002      	add	sp, #8
 23fe716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe71a:	4718      	bx	r3
    }
 23fe71c:	b002      	add	sp, #8
 23fe71e:	bd10      	pop	{r4, pc}

023fe720 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fe720:	b508      	push	{r3, lr}
  return write(str);
 23fe722:	f7ff ffeb 	bl	23fe6fc <_ZN5Print5writeEPKc>
}
 23fe726:	bd08      	pop	{r3, pc}

023fe728 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fe728:	6803      	ldr	r3, [r0, #0]
 23fe72a:	689b      	ldr	r3, [r3, #8]
 23fe72c:	4718      	bx	r3

023fe72e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fe72e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fe730:	210d      	movs	r1, #13
{
 23fe732:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fe734:	f7ff fff8 	bl	23fe728 <_ZN5Print5printEc>
  n += print('\n');
 23fe738:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fe73a:	4604      	mov	r4, r0
  n += print('\n');
 23fe73c:	4628      	mov	r0, r5
 23fe73e:	f7ff fff3 	bl	23fe728 <_ZN5Print5printEc>
  return n;
}
 23fe742:	4420      	add	r0, r4
 23fe744:	bd38      	pop	{r3, r4, r5, pc}

023fe746 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fe746:	b538      	push	{r3, r4, r5, lr}
 23fe748:	4605      	mov	r5, r0
  return write(str);
 23fe74a:	f7ff ffd7 	bl	23fe6fc <_ZN5Print5writeEPKc>
 23fe74e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fe750:	4628      	mov	r0, r5
 23fe752:	f7ff ffec 	bl	23fe72e <_ZN5Print7printlnEv>
  return n;
}
 23fe756:	4420      	add	r0, r4
 23fe758:	bd38      	pop	{r3, r4, r5, pc}

023fe75a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe75a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe75c:	2a01      	cmp	r2, #1
 23fe75e:	bf98      	it	ls
 23fe760:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe762:	b530      	push	{r4, r5, lr}
 23fe764:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe766:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe76a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe76c:	460d      	mov	r5, r1
 23fe76e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe772:	fb01 5312 	mls	r3, r1, r2, r5
 23fe776:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe77a:	2b09      	cmp	r3, #9
 23fe77c:	bf94      	ite	ls
 23fe77e:	3330      	addls	r3, #48	; 0x30
 23fe780:	3337      	addhi	r3, #55	; 0x37
 23fe782:	b2db      	uxtb	r3, r3
  } while(n);
 23fe784:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe786:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe78a:	d9ef      	bls.n	23fe76c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe78c:	4621      	mov	r1, r4
 23fe78e:	f7ff ffb5 	bl	23fe6fc <_ZN5Print5writeEPKc>
}
 23fe792:	b00b      	add	sp, #44	; 0x2c
 23fe794:	bd30      	pop	{r4, r5, pc}

023fe796 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fe796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe79a:	b086      	sub	sp, #24
 23fe79c:	af00      	add	r7, sp, #0
 23fe79e:	4605      	mov	r5, r0
 23fe7a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fe7a2:	1d38      	adds	r0, r7, #4
 23fe7a4:	2114      	movs	r1, #20
{
 23fe7a6:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fe7a8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fe7aa:	f7ff fdd3 	bl	23fe354 <vsnprintf>

    if (n<bufsize)
 23fe7ae:	2813      	cmp	r0, #19
 23fe7b0:	d80e      	bhi.n	23fe7d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fe7b2:	4628      	mov	r0, r5
 23fe7b4:	1d39      	adds	r1, r7, #4
 23fe7b6:	f7ff ffa1 	bl	23fe6fc <_ZN5Print5writeEPKc>
 23fe7ba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fe7bc:	b11e      	cbz	r6, 23fe7c6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fe7be:	4628      	mov	r0, r5
 23fe7c0:	f7ff ffb5 	bl	23fe72e <_ZN5Print7printlnEv>
 23fe7c4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fe7c6:	4620      	mov	r0, r4
 23fe7c8:	3718      	adds	r7, #24
 23fe7ca:	46bd      	mov	sp, r7
 23fe7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fe7d0:	f100 0308 	add.w	r3, r0, #8
 23fe7d4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fe7d8:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fe7da:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fe7de:	4622      	mov	r2, r4
 23fe7e0:	1c41      	adds	r1, r0, #1
 23fe7e2:	683b      	ldr	r3, [r7, #0]
 23fe7e4:	4668      	mov	r0, sp
 23fe7e6:	f7ff fdb5 	bl	23fe354 <vsnprintf>
  return write(str);
 23fe7ea:	4669      	mov	r1, sp
 23fe7ec:	4628      	mov	r0, r5
 23fe7ee:	f7ff ff85 	bl	23fe6fc <_ZN5Print5writeEPKc>
 23fe7f2:	4604      	mov	r4, r0
 23fe7f4:	46c5      	mov	sp, r8
 23fe7f6:	e7e1      	b.n	23fe7bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fe7f8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fe7f8:	b510      	push	{r4, lr}
 23fe7fa:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fe7fc:	f7ff f9c8 	bl	23fdb90 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fe800:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fe802:	6823      	ldr	r3, [r4, #0]
 23fe804:	4620      	mov	r0, r4
 23fe806:	695b      	ldr	r3, [r3, #20]
 23fe808:	4798      	blx	r3
    if (c >= 0) return c;
 23fe80a:	2800      	cmp	r0, #0
 23fe80c:	da08      	bge.n	23fe820 <_ZN6Stream9timedReadEv+0x28>
 23fe80e:	f7ff f9bf 	bl	23fdb90 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fe812:	68e3      	ldr	r3, [r4, #12]
 23fe814:	1ac0      	subs	r0, r0, r3
 23fe816:	68a3      	ldr	r3, [r4, #8]
 23fe818:	4298      	cmp	r0, r3
 23fe81a:	d3f2      	bcc.n	23fe802 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fe81c:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fe820:	bd10      	pop	{r4, pc}

023fe822 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fe822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe826:	4607      	mov	r7, r0
 23fe828:	460c      	mov	r4, r1
 23fe82a:	460d      	mov	r5, r1
 23fe82c:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fe82e:	42b5      	cmp	r5, r6
 23fe830:	eba5 0804 	sub.w	r8, r5, r4
 23fe834:	d007      	beq.n	23fe846 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fe836:	4638      	mov	r0, r7
 23fe838:	f7ff ffde 	bl	23fe7f8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fe83c:	1e03      	subs	r3, r0, #0
 23fe83e:	db02      	blt.n	23fe846 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fe840:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fe844:	e7f3      	b.n	23fe82e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fe846:	4640      	mov	r0, r8
 23fe848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe84c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fe84c:	4b01      	ldr	r3, [pc, #4]	; (23fe854 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe84e:	4a02      	ldr	r2, [pc, #8]	; (23fe858 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe850:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe852:	4770      	bx	lr
 23fe854:	1007ae90 	.word	0x1007ae90
 23fe858:	023ffd78 	.word	0x023ffd78

023fe85c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 23fe85c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fe85e:	2000      	movs	r0, #0
 23fe860:	f7ff fd16 	bl	23fe290 <spark_sync_time_pending>
 23fe864:	b128      	cbz	r0, 23fe872 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fe866:	f7ff fd05 	bl	23fe274 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fe86a:	f080 0001 	eor.w	r0, r0, #1
 23fe86e:	b2c0      	uxtb	r0, r0
    }
 23fe870:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fe872:	2001      	movs	r0, #1
 23fe874:	e7fc      	b.n	23fe870 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023fe878 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23fe878:	b530      	push	{r4, r5, lr}
 23fe87a:	b093      	sub	sp, #76	; 0x4c
 23fe87c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23fe880:	4b19      	ldr	r3, [pc, #100]	; (23fe8e8 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23fe882:	4604      	mov	r4, r0
    t += time_zone_cache;
 23fe884:	e9d3 1000 	ldrd	r1, r0, [r3]
 23fe888:	9b01      	ldr	r3, [sp, #4]
 23fe88a:	1852      	adds	r2, r2, r1
 23fe88c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23fe890:	4816      	ldr	r0, [pc, #88]	; (23fe8ec <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23fe892:	2500      	movs	r5, #0
    t += dst_current_cache;
 23fe894:	e9d0 1000 	ldrd	r1, r0, [r0]
 23fe898:	1852      	adds	r2, r2, r1
 23fe89a:	eb43 0300 	adc.w	r3, r3, r0
 23fe89e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23fe8a2:	2224      	movs	r2, #36	; 0x24
 23fe8a4:	2100      	movs	r1, #0
 23fe8a6:	eb0d 0002 	add.w	r0, sp, r2
 23fe8aa:	f000 fe74 	bl	23ff596 <memset>
    localtime_r(&t, &calendar_time);
 23fe8ae:	a909      	add	r1, sp, #36	; 0x24
 23fe8b0:	4668      	mov	r0, sp
 23fe8b2:	f7ff fd87 	bl	23fe3c4 <localtime_r>
    char ascstr[26] = {};
 23fe8b6:	2216      	movs	r2, #22
 23fe8b8:	4629      	mov	r1, r5
 23fe8ba:	a803      	add	r0, sp, #12
 23fe8bc:	9502      	str	r5, [sp, #8]
 23fe8be:	f000 fe6a 	bl	23ff596 <memset>
    asctime_r(&calendar_time, ascstr);
 23fe8c2:	a902      	add	r1, sp, #8
 23fe8c4:	a809      	add	r0, sp, #36	; 0x24
 23fe8c6:	f000 fe2d 	bl	23ff524 <asctime_r>
    int len = strlen(ascstr);
 23fe8ca:	a802      	add	r0, sp, #8
 23fe8cc:	f7fe f9ba 	bl	23fcc44 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23fe8d0:	ab12      	add	r3, sp, #72	; 0x48
 23fe8d2:	4418      	add	r0, r3
 23fe8d4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23fe8d8:	a902      	add	r1, sp, #8
 23fe8da:	4620      	mov	r0, r4
 23fe8dc:	f7ff fedb 	bl	23fe696 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fe8e0:	4620      	mov	r0, r4
 23fe8e2:	b013      	add	sp, #76	; 0x4c
 23fe8e4:	bd30      	pop	{r4, r5, pc}
 23fe8e6:	bf00      	nop
 23fe8e8:	1007aea8 	.word	0x1007aea8
 23fe8ec:	1007aea0 	.word	0x1007aea0

023fe8f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 23fe8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe8f4:	b0a4      	sub	sp, #144	; 0x90
 23fe8f6:	4607      	mov	r7, r0
 23fe8f8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fe8fa:	a814      	add	r0, sp, #80	; 0x50
{
 23fe8fc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fe8fe:	223f      	movs	r2, #63	; 0x3f
{
 23fe900:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23fe902:	f000 fe87 	bl	23ff614 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23fe906:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23fe908:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23fe90a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23fe90e:	f7fe f999 	bl	23fcc44 <strlen>
 23fe912:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 23fe914:	bb4c      	cbnz	r4, 23fe96a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 23fe916:	4929      	ldr	r1, [pc, #164]	; (23fe9bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 23fe918:	a803      	add	r0, sp, #12
 23fe91a:	f000 fe73 	bl	23ff604 <strcpy>
{
 23fe91e:	2600      	movs	r6, #0
 23fe920:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 23fe922:	f105 39ff 	add.w	r9, r5, #4294967295
 23fe926:	45b1      	cmp	r9, r6
 23fe928:	d934      	bls.n	23fe994 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 23fe92a:	7823      	ldrb	r3, [r4, #0]
 23fe92c:	f106 0a01 	add.w	sl, r6, #1
 23fe930:	2b25      	cmp	r3, #37	; 0x25
 23fe932:	d117      	bne.n	23fe964 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 23fe934:	7863      	ldrb	r3, [r4, #1]
 23fe936:	2b7a      	cmp	r3, #122	; 0x7a
 23fe938:	d114      	bne.n	23fe964 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 23fe93a:	a803      	add	r0, sp, #12
 23fe93c:	f7fe f982 	bl	23fcc44 <strlen>
 23fe940:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 23fe942:	ab14      	add	r3, sp, #80	; 0x50
 23fe944:	1830      	adds	r0, r6, r0
 23fe946:	4418      	add	r0, r3
 23fe948:	eba9 0206 	sub.w	r2, r9, r6
 23fe94c:	1ca1      	adds	r1, r4, #2
 23fe94e:	f000 fe15 	bl	23ff57c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 23fe952:	462a      	mov	r2, r5
 23fe954:	a903      	add	r1, sp, #12
 23fe956:	4620      	mov	r0, r4
 23fe958:	f000 fe10 	bl	23ff57c <memcpy>
            len = strlen(format_str);
 23fe95c:	a814      	add	r0, sp, #80	; 0x50
 23fe95e:	f7fe f971 	bl	23fcc44 <strlen>
 23fe962:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 23fe964:	4656      	mov	r6, sl
 23fe966:	3401      	adds	r4, #1
 23fe968:	e7db      	b.n	23fe922 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 23fe96a:	233c      	movs	r3, #60	; 0x3c
 23fe96c:	fb94 f2f3 	sdiv	r2, r4, r3
 23fe970:	2a00      	cmp	r2, #0
 23fe972:	bfb8      	it	lt
 23fe974:	4252      	neglt	r2, r2
 23fe976:	fbb2 f1f3 	udiv	r1, r2, r3
 23fe97a:	fb03 2211 	mls	r2, r3, r1, r2
 23fe97e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 23fe982:	9200      	str	r2, [sp, #0]
 23fe984:	fb94 f3f3 	sdiv	r3, r4, r3
 23fe988:	2110      	movs	r1, #16
 23fe98a:	4a0d      	ldr	r2, [pc, #52]	; (23fe9c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 23fe98c:	a803      	add	r0, sp, #12
 23fe98e:	f7ff fcd3 	bl	23fe338 <snprintf>
 23fe992:	e7c4      	b.n	23fe91e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 23fe994:	2100      	movs	r1, #0
 23fe996:	222e      	movs	r2, #46	; 0x2e
 23fe998:	a808      	add	r0, sp, #32
 23fe99a:	9107      	str	r1, [sp, #28]
 23fe99c:	f000 fdfb 	bl	23ff596 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 23fe9a0:	4643      	mov	r3, r8
 23fe9a2:	aa14      	add	r2, sp, #80	; 0x50
 23fe9a4:	2132      	movs	r1, #50	; 0x32
 23fe9a6:	a807      	add	r0, sp, #28
 23fe9a8:	f7ff fcfe 	bl	23fe3a8 <strftime>
    return String(buf);
 23fe9ac:	4638      	mov	r0, r7
 23fe9ae:	a907      	add	r1, sp, #28
 23fe9b0:	f7ff fe71 	bl	23fe696 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fe9b4:	4638      	mov	r0, r7
 23fe9b6:	b024      	add	sp, #144	; 0x90
 23fe9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe9bc:	023ffd7c 	.word	0x023ffd7c
 23fe9c0:	023ffd7e 	.word	0x023ffd7e

023fe9c4 <_ZN9TimeClass6formatExPKc>:
{
 23fe9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe9c6:	b08d      	sub	sp, #52	; 0x34
 23fe9c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23fe9ca:	4604      	mov	r4, r0
 23fe9cc:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 23fe9d0:	b915      	cbnz	r5, 23fe9d8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 23fe9d2:	4b19      	ldr	r3, [pc, #100]	; (23fea38 <_ZN9TimeClass6formatExPKc+0x74>)
 23fe9d4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 23fe9d6:	b12d      	cbz	r5, 23fe9e4 <_ZN9TimeClass6formatExPKc+0x20>
 23fe9d8:	4b18      	ldr	r3, [pc, #96]	; (23fea3c <_ZN9TimeClass6formatExPKc+0x78>)
 23fe9da:	4628      	mov	r0, r5
 23fe9dc:	6819      	ldr	r1, [r3, #0]
 23fe9de:	f7fe f927 	bl	23fcc30 <strcmp>
 23fe9e2:	b938      	cbnz	r0, 23fe9f4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 23fe9e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fe9e8:	4620      	mov	r0, r4
 23fe9ea:	f7ff ff45 	bl	23fe878 <_ZN9TimeClass7timeStrEx>
}
 23fe9ee:	4620      	mov	r0, r4
 23fe9f0:	b00d      	add	sp, #52	; 0x34
 23fe9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 23fe9f4:	9900      	ldr	r1, [sp, #0]
 23fe9f6:	4e12      	ldr	r6, [pc, #72]	; (23fea40 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 23fe9f8:	4f12      	ldr	r7, [pc, #72]	; (23fea44 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 23fe9fa:	e9d6 3200 	ldrd	r3, r2, [r6]
 23fe9fe:	185b      	adds	r3, r3, r1
 23fea00:	9901      	ldr	r1, [sp, #4]
 23fea02:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 23fea06:	e9d7 0100 	ldrd	r0, r1, [r7]
 23fea0a:	181b      	adds	r3, r3, r0
 23fea0c:	eb42 0201 	adc.w	r2, r2, r1
 23fea10:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 23fea14:	2100      	movs	r1, #0
 23fea16:	2224      	movs	r2, #36	; 0x24
 23fea18:	a803      	add	r0, sp, #12
 23fea1a:	f000 fdbc 	bl	23ff596 <memset>
    localtime_r(&t, &calendar_time);
 23fea1e:	a903      	add	r1, sp, #12
 23fea20:	4668      	mov	r0, sp
 23fea22:	f7ff fccf 	bl	23fe3c4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 23fea26:	6832      	ldr	r2, [r6, #0]
 23fea28:	683b      	ldr	r3, [r7, #0]
 23fea2a:	4620      	mov	r0, r4
 23fea2c:	4413      	add	r3, r2
 23fea2e:	a903      	add	r1, sp, #12
 23fea30:	462a      	mov	r2, r5
 23fea32:	f7ff ff5d 	bl	23fe8f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 23fea36:	e7da      	b.n	23fe9ee <_ZN9TimeClass6formatExPKc+0x2a>
 23fea38:	1007ae98 	.word	0x1007ae98
 23fea3c:	1007adb0 	.word	0x1007adb0
 23fea40:	1007aea8 	.word	0x1007aea8
 23fea44:	1007aea0 	.word	0x1007aea0

023fea48 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 23fea48:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23fea4a:	2000      	movs	r0, #0
 23fea4c:	f7ff f8ae 	bl	23fdbac <hal_rtc_time_is_valid>
    if (rtcstate)
 23fea50:	4604      	mov	r4, r0
 23fea52:	b9a0      	cbnz	r0, 23fea7e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23fea54:	f7ff fae8 	bl	23fe028 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23fea58:	2801      	cmp	r0, #1
 23fea5a:	d110      	bne.n	23fea7e <_ZN9TimeClass7isValidEv+0x36>
 23fea5c:	4620      	mov	r0, r4
 23fea5e:	f7ff fb0d 	bl	23fe07c <system_thread_get_state>
 23fea62:	b960      	cbnz	r0, 23fea7e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23fea64:	f7ff fefa 	bl	23fe85c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23fea68:	b910      	cbnz	r0, 23fea70 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23fea6a:	f7ff fbf5 	bl	23fe258 <spark_process>
        while (_while() && !_condition()) {
 23fea6e:	e7f9      	b.n	23fea64 <_ZN9TimeClass7isValidEv+0x1c>
 23fea70:	f7ff fef4 	bl	23fe85c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23fea74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23fea78:	2000      	movs	r0, #0
 23fea7a:	f7ff b897 	b.w	23fdbac <hal_rtc_time_is_valid>
}
 23fea7e:	4620      	mov	r0, r4
 23fea80:	bd10      	pop	{r4, pc}

023fea82 <_ZN9TimeClass3nowEv>:
{
 23fea82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23fea84:	f7ff ffe0 	bl	23fea48 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23fea88:	2210      	movs	r2, #16
 23fea8a:	2100      	movs	r1, #0
 23fea8c:	4668      	mov	r0, sp
 23fea8e:	f000 fd82 	bl	23ff596 <memset>
    hal_rtc_get_time(&tv, nullptr);
 23fea92:	2100      	movs	r1, #0
 23fea94:	4668      	mov	r0, sp
 23fea96:	f7ff f897 	bl	23fdbc8 <hal_rtc_get_time>
}
 23fea9a:	9800      	ldr	r0, [sp, #0]
 23fea9c:	b005      	add	sp, #20
 23fea9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023feaa4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23feaa4:	4b02      	ldr	r3, [pc, #8]	; (23feab0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23feaa6:	681a      	ldr	r2, [r3, #0]
 23feaa8:	4b02      	ldr	r3, [pc, #8]	; (23feab4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23feaaa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23feaac:	4770      	bx	lr
 23feaae:	bf00      	nop
 23feab0:	1007adb0 	.word	0x1007adb0
 23feab4:	1007ae98 	.word	0x1007ae98

023feab8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23feab8:	2100      	movs	r1, #0
 23feaba:	f7ff bad1 	b.w	23fe060 <system_delay_ms>
	...

023feac0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23feac0:	2200      	movs	r2, #0
 23feac2:	4b01      	ldr	r3, [pc, #4]	; (23feac8 <_GLOBAL__sub_I_RGB+0x8>)
 23feac4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23feac6:	4770      	bx	lr
 23feac8:	1007aeb0 	.word	0x1007aeb0

023feacc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23feacc:	4b01      	ldr	r3, [pc, #4]	; (23fead4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23feace:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fead0:	4770      	bx	lr
 23fead2:	bf00      	nop
 23fead4:	1007adb4 	.word	0x1007adb4

023fead8 <serialEventRun>:
{
 23fead8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23feada:	4b0f      	ldr	r3, [pc, #60]	; (23feb18 <serialEventRun+0x40>)
 23feadc:	b143      	cbz	r3, 23feaf0 <serialEventRun+0x18>
 23feade:	f000 f973 	bl	23fedc8 <_Z16_fetch_usbserialv>
 23feae2:	6803      	ldr	r3, [r0, #0]
 23feae4:	691b      	ldr	r3, [r3, #16]
 23feae6:	4798      	blx	r3
 23feae8:	2800      	cmp	r0, #0
 23feaea:	dd01      	ble.n	23feaf0 <serialEventRun+0x18>
        serialEvent();
 23feaec:	e000      	b.n	23feaf0 <serialEventRun+0x18>
 23feaee:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23feaf0:	4b0a      	ldr	r3, [pc, #40]	; (23feb1c <serialEventRun+0x44>)
 23feaf2:	b143      	cbz	r3, 23feb06 <serialEventRun+0x2e>
 23feaf4:	f000 fc44 	bl	23ff380 <_Z22__fetch_global_Serial1v>
 23feaf8:	6803      	ldr	r3, [r0, #0]
 23feafa:	691b      	ldr	r3, [r3, #16]
 23feafc:	4798      	blx	r3
 23feafe:	2800      	cmp	r0, #0
 23feb00:	dd01      	ble.n	23feb06 <serialEventRun+0x2e>
        serialEvent1();
 23feb02:	e000      	b.n	23feb06 <serialEventRun+0x2e>
 23feb04:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23feb06:	4b06      	ldr	r3, [pc, #24]	; (23feb20 <serialEventRun+0x48>)
 23feb08:	b10b      	cbz	r3, 23feb0e <serialEventRun+0x36>
 23feb0a:	f000 fc7f 	bl	23ff40c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23feb0e:	4b05      	ldr	r3, [pc, #20]	; (23feb24 <serialEventRun+0x4c>)
 23feb10:	b10b      	cbz	r3, 23feb16 <serialEventRun+0x3e>
 23feb12:	f000 fcb1 	bl	23ff478 <_Z15serialEventRun3v>
}
 23feb16:	bd08      	pop	{r3, pc}
	...

023feb28 <_post_loop>:
{
 23feb28:	b508      	push	{r3, lr}
	serialEventRun();
 23feb2a:	f7ff ffd5 	bl	23fead8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23feb2e:	f7ff f82f 	bl	23fdb90 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23feb32:	4b01      	ldr	r3, [pc, #4]	; (23feb38 <_post_loop+0x10>)
 23feb34:	6018      	str	r0, [r3, #0]
}
 23feb36:	bd08      	pop	{r3, pc}
 23feb38:	1007af4c 	.word	0x1007af4c

023feb3c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23feb3c:	4805      	ldr	r0, [pc, #20]	; (23feb54 <_Z33system_initialize_user_backup_ramv+0x18>)
 23feb3e:	4a06      	ldr	r2, [pc, #24]	; (23feb58 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23feb40:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23feb42:	1a12      	subs	r2, r2, r0
 23feb44:	4905      	ldr	r1, [pc, #20]	; (23feb5c <_Z33system_initialize_user_backup_ramv+0x20>)
 23feb46:	f000 fd19 	bl	23ff57c <memcpy>
    __backup_sram_signature = signature;
 23feb4a:	4b05      	ldr	r3, [pc, #20]	; (23feb60 <_Z33system_initialize_user_backup_ramv+0x24>)
 23feb4c:	4a05      	ldr	r2, [pc, #20]	; (23feb64 <_Z33system_initialize_user_backup_ramv+0x28>)
 23feb4e:	601a      	str	r2, [r3, #0]
}
 23feb50:	bd08      	pop	{r3, pc}
 23feb52:	bf00      	nop
 23feb54:	1007b400 	.word	0x1007b400
 23feb58:	1007b404 	.word	0x1007b404
 23feb5c:	085ffc74 	.word	0x085ffc74
 23feb60:	1007b400 	.word	0x1007b400
 23feb64:	9a271c1e 	.word	0x9a271c1e

023feb68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feb68:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23feb6a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feb6c:	461a      	mov	r2, r3
 23feb6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23feb72:	9300      	str	r3, [sp, #0]
 23feb74:	f7ff fa9e 	bl	23fe0b4 <system_ctrl_set_result>
}
 23feb78:	b003      	add	sp, #12
 23feb7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023feb80 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23feb80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23feb82:	8843      	ldrh	r3, [r0, #2]
 23feb84:	2b0a      	cmp	r3, #10
 23feb86:	d008      	beq.n	23feb9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23feb88:	2b50      	cmp	r3, #80	; 0x50
 23feb8a:	d10b      	bne.n	23feba4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23feb8c:	4b09      	ldr	r3, [pc, #36]	; (23febb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23feb8e:	681b      	ldr	r3, [r3, #0]
 23feb90:	b14b      	cbz	r3, 23feba6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23feb92:	b003      	add	sp, #12
 23feb94:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23feb98:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23feb9a:	f7ff ffe5 	bl	23feb68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23feb9e:	b003      	add	sp, #12
 23feba0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23feba4:	2300      	movs	r3, #0
 23feba6:	461a      	mov	r2, r3
 23feba8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23febac:	9300      	str	r3, [sp, #0]
 23febae:	f7ff fa81 	bl	23fe0b4 <system_ctrl_set_result>
}
 23febb2:	e7f4      	b.n	23feb9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23febb4:	1007aec4 	.word	0x1007aec4

023febb8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23febb8:	2100      	movs	r1, #0
{
 23febba:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23febbc:	4811      	ldr	r0, [pc, #68]	; (23fec04 <module_user_init_hook+0x4c>)
 23febbe:	f7ff fbe5 	bl	23fe38c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23febc2:	4b11      	ldr	r3, [pc, #68]	; (23fec08 <module_user_init_hook+0x50>)
 23febc4:	681a      	ldr	r2, [r3, #0]
 23febc6:	4b11      	ldr	r3, [pc, #68]	; (23fec0c <module_user_init_hook+0x54>)
 23febc8:	429a      	cmp	r2, r3
 23febca:	bf0c      	ite	eq
 23febcc:	2201      	moveq	r2, #1
 23febce:	2200      	movne	r2, #0
 23febd0:	4b0f      	ldr	r3, [pc, #60]	; (23fec10 <module_user_init_hook+0x58>)
 23febd2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23febd4:	d001      	beq.n	23febda <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23febd6:	f7ff ffb1 	bl	23feb3c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23febda:	f7fe ffbd 	bl	23fdb58 <HAL_RNG_GetRandomNumber>
 23febde:	4604      	mov	r4, r0
    srand(seed);
 23febe0:	f000 fce2 	bl	23ff5a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23febe4:	4b0b      	ldr	r3, [pc, #44]	; (23fec14 <module_user_init_hook+0x5c>)
 23febe6:	b113      	cbz	r3, 23febee <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23febe8:	4620      	mov	r0, r4
 23febea:	e000      	b.n	23febee <module_user_init_hook+0x36>
 23febec:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23febee:	2100      	movs	r1, #0
 23febf0:	4808      	ldr	r0, [pc, #32]	; (23fec14 <module_user_init_hook+0x5c>)
 23febf2:	f7ff fb5b 	bl	23fe2ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23febf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23febfa:	2100      	movs	r1, #0
 23febfc:	4806      	ldr	r0, [pc, #24]	; (23fec18 <module_user_init_hook+0x60>)
 23febfe:	f7ff ba4b 	b.w	23fe098 <system_ctrl_set_app_request_handler>
 23fec02:	bf00      	nop
 23fec04:	023feacd 	.word	0x023feacd
 23fec08:	1007b400 	.word	0x1007b400
 23fec0c:	9a271c1e 	.word	0x9a271c1e
 23fec10:	1007aec0 	.word	0x1007aec0
 23fec14:	00000000 	.word	0x00000000
 23fec18:	023feb81 	.word	0x023feb81

023fec1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fec1c:	4770      	bx	lr

023fec1e <_ZN9IPAddressD0Ev>:
 23fec1e:	b510      	push	{r4, lr}
 23fec20:	4604      	mov	r4, r0
 23fec22:	2118      	movs	r1, #24
 23fec24:	f7fe f835 	bl	23fcc92 <_ZdlPvj>
 23fec28:	4620      	mov	r0, r4
 23fec2a:	bd10      	pop	{r4, pc}

023fec2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fec2c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fec2e:	7d03      	ldrb	r3, [r0, #20]
{
 23fec30:	460e      	mov	r6, r1
	if (address.v==6) {
 23fec32:	2b06      	cmp	r3, #6
 23fec34:	f04f 0400 	mov.w	r4, #0
{
 23fec38:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fec3a:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fec3e:	d012      	beq.n	23fec66 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fec40:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fec44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fec48:	220a      	movs	r2, #10
 23fec4a:	4630      	mov	r0, r6
 23fec4c:	f7ff fd85 	bl	23fe75a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fec50:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fec52:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fec54:	d019      	beq.n	23fec8a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fec56:	2c00      	cmp	r4, #0
 23fec58:	d0f4      	beq.n	23fec44 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fec5a:	212e      	movs	r1, #46	; 0x2e
 23fec5c:	4630      	mov	r0, r6
 23fec5e:	f7ff fd63 	bl	23fe728 <_ZN5Print5printEc>
 23fec62:	4404      	add	r4, r0
 23fec64:	e7ee      	b.n	23fec44 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fec66:	232f      	movs	r3, #47	; 0x2f
 23fec68:	466a      	mov	r2, sp
 23fec6a:	4639      	mov	r1, r7
 23fec6c:	200a      	movs	r0, #10
		buf[0] = 0;
 23fec6e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fec72:	f7fe ffc5 	bl	23fdc00 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fec76:	4668      	mov	r0, sp
 23fec78:	f7fd ffe4 	bl	23fcc44 <strlen>
 23fec7c:	6833      	ldr	r3, [r6, #0]
 23fec7e:	4602      	mov	r2, r0
 23fec80:	4669      	mov	r1, sp
 23fec82:	4630      	mov	r0, r6
 23fec84:	68db      	ldr	r3, [r3, #12]
 23fec86:	4798      	blx	r3
 23fec88:	4604      	mov	r4, r0
    }
    return n;
}
 23fec8a:	4620      	mov	r0, r4
 23fec8c:	b00d      	add	sp, #52	; 0x34
 23fec8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fec90 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fec90:	b510      	push	{r4, lr}
 23fec92:	4604      	mov	r4, r0
 23fec94:	4b04      	ldr	r3, [pc, #16]	; (23feca8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fec96:	2211      	movs	r2, #17
 23fec98:	2100      	movs	r1, #0
 23fec9a:	f840 3b04 	str.w	r3, [r0], #4
 23fec9e:	f000 fc7a 	bl	23ff596 <memset>
}
 23feca2:	4620      	mov	r0, r4
 23feca4:	bd10      	pop	{r4, pc}
 23feca6:	bf00      	nop
 23feca8:	023ffdb0 	.word	0x023ffdb0

023fecac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fecac:	4603      	mov	r3, r0
 23fecae:	4a07      	ldr	r2, [pc, #28]	; (23feccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fecb0:	b510      	push	{r4, lr}
 23fecb2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fecb6:	f101 0210 	add.w	r2, r1, #16
 23fecba:	f851 4b04 	ldr.w	r4, [r1], #4
 23fecbe:	4291      	cmp	r1, r2
 23fecc0:	f843 4b04 	str.w	r4, [r3], #4
 23fecc4:	d1f9      	bne.n	23fecba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fecc6:	780a      	ldrb	r2, [r1, #0]
 23fecc8:	701a      	strb	r2, [r3, #0]
}
 23fecca:	bd10      	pop	{r4, pc}
 23feccc:	023ffdb0 	.word	0x023ffdb0

023fecd0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fecd0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fecd2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fecd6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fecda:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fecde:	2304      	movs	r3, #4
 23fece0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fece4:	6041      	str	r1, [r0, #4]
 23fece6:	7503      	strb	r3, [r0, #20]
}
 23fece8:	bd10      	pop	{r4, pc}
	...

023fecec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fecec:	b507      	push	{r0, r1, r2, lr}
 23fecee:	4b06      	ldr	r3, [pc, #24]	; (23fed08 <_ZN9IPAddressC1EPKh+0x1c>)
 23fecf0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fecf2:	78cb      	ldrb	r3, [r1, #3]
 23fecf4:	9300      	str	r3, [sp, #0]
 23fecf6:	788b      	ldrb	r3, [r1, #2]
 23fecf8:	784a      	ldrb	r2, [r1, #1]
 23fecfa:	7809      	ldrb	r1, [r1, #0]
 23fecfc:	f7ff ffe8 	bl	23fecd0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fed00:	b003      	add	sp, #12
 23fed02:	f85d fb04 	ldr.w	pc, [sp], #4
 23fed06:	bf00      	nop
 23fed08:	023ffdb0 	.word	0x023ffdb0

023fed0c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fed0c:	7441      	strb	r1, [r0, #17]
}
 23fed0e:	4770      	bx	lr

023fed10 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fed10:	4770      	bx	lr

023fed12 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fed12:	4770      	bx	lr

023fed14 <_ZN9USBSerial4readEv>:
{
 23fed14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fed16:	2100      	movs	r1, #0
 23fed18:	7c00      	ldrb	r0, [r0, #16]
 23fed1a:	f7ff f94d 	bl	23fdfb8 <HAL_USB_USART_Receive_Data>
}
 23fed1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed22:	bd08      	pop	{r3, pc}

023fed24 <_ZN9USBSerial4peekEv>:
{
 23fed24:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fed26:	2101      	movs	r1, #1
 23fed28:	7c00      	ldrb	r0, [r0, #16]
 23fed2a:	f7ff f945 	bl	23fdfb8 <HAL_USB_USART_Receive_Data>
}
 23fed2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed32:	bd08      	pop	{r3, pc}

023fed34 <_ZN9USBSerial17availableForWriteEv>:
{
 23fed34:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fed36:	7c00      	ldrb	r0, [r0, #16]
 23fed38:	f7ff f930 	bl	23fdf9c <HAL_USB_USART_Available_Data_For_Write>
}
 23fed3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed40:	bd08      	pop	{r3, pc}

023fed42 <_ZN9USBSerial9availableEv>:
{
 23fed42:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fed44:	7c00      	ldrb	r0, [r0, #16]
 23fed46:	f7ff f91b 	bl	23fdf80 <HAL_USB_USART_Available_Data>
}
 23fed4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed4e:	bd08      	pop	{r3, pc}

023fed50 <_ZN9USBSerial5writeEh>:
{
 23fed50:	b513      	push	{r0, r1, r4, lr}
 23fed52:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fed54:	7c00      	ldrb	r0, [r0, #16]
{
 23fed56:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fed58:	f7ff f920 	bl	23fdf9c <HAL_USB_USART_Available_Data_For_Write>
 23fed5c:	2800      	cmp	r0, #0
 23fed5e:	9901      	ldr	r1, [sp, #4]
 23fed60:	dc01      	bgt.n	23fed66 <_ZN9USBSerial5writeEh+0x16>
 23fed62:	7c60      	ldrb	r0, [r4, #17]
 23fed64:	b120      	cbz	r0, 23fed70 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fed66:	7c20      	ldrb	r0, [r4, #16]
 23fed68:	f7ff f934 	bl	23fdfd4 <HAL_USB_USART_Send_Data>
 23fed6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fed70:	b002      	add	sp, #8
 23fed72:	bd10      	pop	{r4, pc}

023fed74 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fed74:	7c00      	ldrb	r0, [r0, #16]
 23fed76:	f7ff b93b 	b.w	23fdff0 <HAL_USB_USART_Flush_Data>

023fed7a <_ZN9USBSerialD0Ev>:
 23fed7a:	b510      	push	{r4, lr}
 23fed7c:	4604      	mov	r4, r0
 23fed7e:	2114      	movs	r1, #20
 23fed80:	f7fd ff87 	bl	23fcc92 <_ZdlPvj>
 23fed84:	4620      	mov	r0, r4
 23fed86:	bd10      	pop	{r4, pc}

023fed88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fed88:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fed8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fed8e:	4604      	mov	r4, r0
 23fed90:	4608      	mov	r0, r1
 23fed92:	2100      	movs	r1, #0
 23fed94:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fed98:	4b04      	ldr	r3, [pc, #16]	; (23fedac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fed9a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fed9c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fed9e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23feda0:	4611      	mov	r1, r2
  _blocking = true;
 23feda2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23feda4:	f7ff f8d0 	bl	23fdf48 <HAL_USB_USART_Init>
}
 23feda8:	4620      	mov	r0, r4
 23fedaa:	bd10      	pop	{r4, pc}
 23fedac:	023ffdc4 	.word	0x023ffdc4

023fedb0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fedb0:	2200      	movs	r2, #0
 23fedb2:	7c00      	ldrb	r0, [r0, #16]
 23fedb4:	f7ff b8d6 	b.w	23fdf64 <HAL_USB_USART_Begin>

023fedb8 <_Z19acquireSerialBufferv>:
{
 23fedb8:	b510      	push	{r4, lr}
 23fedba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fedbc:	2214      	movs	r2, #20
 23fedbe:	2100      	movs	r1, #0
 23fedc0:	f000 fbe9 	bl	23ff596 <memset>
}
 23fedc4:	4620      	mov	r0, r4
 23fedc6:	bd10      	pop	{r4, pc}

023fedc8 <_Z16_fetch_usbserialv>:
{
 23fedc8:	b510      	push	{r4, lr}
 23fedca:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fedcc:	a803      	add	r0, sp, #12
 23fedce:	f7ff fff3 	bl	23fedb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fedd2:	4c0c      	ldr	r4, [pc, #48]	; (23fee04 <_Z16_fetch_usbserialv+0x3c>)
 23fedd4:	e8d4 1f8f 	ldab	r1, [r4]
 23fedd8:	f011 0101 	ands.w	r1, r1, #1
 23feddc:	d10f      	bne.n	23fedfe <_Z16_fetch_usbserialv+0x36>
 23fedde:	4620      	mov	r0, r4
 23fede0:	9101      	str	r1, [sp, #4]
 23fede2:	f7fd ff65 	bl	23fccb0 <__cxa_guard_acquire>
 23fede6:	9901      	ldr	r1, [sp, #4]
 23fede8:	b148      	cbz	r0, 23fedfe <_Z16_fetch_usbserialv+0x36>
 23fedea:	aa03      	add	r2, sp, #12
 23fedec:	4806      	ldr	r0, [pc, #24]	; (23fee08 <_Z16_fetch_usbserialv+0x40>)
 23fedee:	f7ff ffcb 	bl	23fed88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fedf2:	4620      	mov	r0, r4
 23fedf4:	f7fd ff61 	bl	23fccba <__cxa_guard_release>
 23fedf8:	4804      	ldr	r0, [pc, #16]	; (23fee0c <_Z16_fetch_usbserialv+0x44>)
 23fedfa:	f000 fbb9 	bl	23ff570 <atexit>
	return _usbserial;
}
 23fedfe:	4802      	ldr	r0, [pc, #8]	; (23fee08 <_Z16_fetch_usbserialv+0x40>)
 23fee00:	b008      	add	sp, #32
 23fee02:	bd10      	pop	{r4, pc}
 23fee04:	1007aec8 	.word	0x1007aec8
 23fee08:	1007aecc 	.word	0x1007aecc
 23fee0c:	023fed11 	.word	0x023fed11

023fee10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fee10:	4770      	bx	lr

023fee12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fee12:	7441      	strb	r1, [r0, #17]
}
 23fee14:	4770      	bx	lr

023fee16 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fee16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fee18:	7c00      	ldrb	r0, [r0, #16]
 23fee1a:	f7fe ff53 	bl	23fdcc4 <hal_usart_available_data_for_write>
}
 23fee1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee22:	bd08      	pop	{r3, pc}

023fee24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fee24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fee26:	7c00      	ldrb	r0, [r0, #16]
 23fee28:	f7fe ff06 	bl	23fdc38 <hal_usart_available>
}
 23fee2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee30:	bd08      	pop	{r3, pc}

023fee32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fee32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fee34:	7c00      	ldrb	r0, [r0, #16]
 23fee36:	f7fe ff1b 	bl	23fdc70 <hal_usart_peek>
}
 23fee3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee3e:	bd08      	pop	{r3, pc}

023fee40 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fee40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fee42:	7c00      	ldrb	r0, [r0, #16]
 23fee44:	f7fe ff06 	bl	23fdc54 <hal_usart_read>
}
 23fee48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee4c:	bd08      	pop	{r3, pc}

023fee4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fee4e:	7c00      	ldrb	r0, [r0, #16]
 23fee50:	f7fe bf1c 	b.w	23fdc8c <hal_usart_flush>

023fee54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fee54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee56:	7c45      	ldrb	r5, [r0, #17]
{
 23fee58:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee5a:	b12d      	cbz	r5, 23fee68 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fee5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fee5e:	b003      	add	sp, #12
 23fee60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fee64:	f7fe beda 	b.w	23fdc1c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee68:	7c00      	ldrb	r0, [r0, #16]
 23fee6a:	9101      	str	r1, [sp, #4]
 23fee6c:	f7fe ff2a 	bl	23fdcc4 <hal_usart_available_data_for_write>
 23fee70:	2800      	cmp	r0, #0
 23fee72:	9901      	ldr	r1, [sp, #4]
 23fee74:	dcf2      	bgt.n	23fee5c <_ZN11USARTSerial5writeEh+0x8>
}
 23fee76:	4628      	mov	r0, r5
 23fee78:	b003      	add	sp, #12
 23fee7a:	bd30      	pop	{r4, r5, pc}

023fee7c <_ZN11USARTSerialD0Ev>:
 23fee7c:	b510      	push	{r4, lr}
 23fee7e:	4604      	mov	r4, r0
 23fee80:	2114      	movs	r1, #20
 23fee82:	f7fd ff06 	bl	23fcc92 <_ZdlPvj>
 23fee86:	4620      	mov	r0, r4
 23fee88:	bd10      	pop	{r4, pc}
	...

023fee8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fee8c:	b510      	push	{r4, lr}
 23fee8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fee92:	4604      	mov	r4, r0
 23fee94:	4608      	mov	r0, r1
 23fee96:	4611      	mov	r1, r2
 23fee98:	2200      	movs	r2, #0
 23fee9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fee9e:	4b04      	ldr	r3, [pc, #16]	; (23feeb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23feea0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feea2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feea4:	2301      	movs	r3, #1
 23feea6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feea8:	f7fe ff1a 	bl	23fdce0 <hal_usart_init_ex>
}
 23feeac:	4620      	mov	r0, r4
 23feeae:	bd10      	pop	{r4, pc}
 23feeb0:	023ffdf8 	.word	0x023ffdf8

023feeb4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23feeb4:	7c00      	ldrb	r0, [r0, #16]
 23feeb6:	f7fe bef7 	b.w	23fdca8 <hal_usart_is_enabled>

023feeba <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23feeba:	4770      	bx	lr

023feebc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23feebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23feebe:	4606      	mov	r6, r0
 23feec0:	4615      	mov	r5, r2
 23feec2:	460c      	mov	r4, r1
 23feec4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23feec6:	42bc      	cmp	r4, r7
 23feec8:	d006      	beq.n	23feed8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23feeca:	6833      	ldr	r3, [r6, #0]
 23feecc:	4630      	mov	r0, r6
 23feece:	689b      	ldr	r3, [r3, #8]
 23feed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 23feed4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23feed6:	e7f6      	b.n	23feec6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23feed8:	4628      	mov	r0, r5
 23feeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023feedc <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23feedc:	2200      	movs	r2, #0
 23feede:	7c00      	ldrb	r0, [r0, #16]
 23feee0:	f7fe bf36 	b.w	23fdd50 <hal_i2c_write>

023feee4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23feee4:	2100      	movs	r1, #0
 23feee6:	7c00      	ldrb	r0, [r0, #16]
 23feee8:	f7fe bf40 	b.w	23fdd6c <hal_i2c_available>

023feeec <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23feeec:	2100      	movs	r1, #0
 23feeee:	7c00      	ldrb	r0, [r0, #16]
 23feef0:	f7fe bf4a 	b.w	23fdd88 <hal_i2c_read>

023feef4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23feef4:	2100      	movs	r1, #0
 23feef6:	7c00      	ldrb	r0, [r0, #16]
 23feef8:	f7fe bf54 	b.w	23fdda4 <hal_i2c_peek>

023feefc <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23feefc:	2100      	movs	r1, #0
 23feefe:	7c00      	ldrb	r0, [r0, #16]
 23fef00:	f7fe bf5e 	b.w	23fddc0 <hal_i2c_flush>

023fef04 <_ZN7TwoWireD0Ev>:
 23fef04:	b510      	push	{r4, lr}
 23fef06:	4604      	mov	r4, r0
 23fef08:	2114      	movs	r1, #20
 23fef0a:	f7fd fec2 	bl	23fcc92 <_ZdlPvj>
 23fef0e:	4620      	mov	r0, r4
 23fef10:	bd10      	pop	{r4, pc}

023fef12 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23fef12:	2200      	movs	r2, #0
 23fef14:	e9c0 2200 	strd	r2, r2, [r0]
 23fef18:	2218      	movs	r2, #24
 23fef1a:	8002      	strh	r2, [r0, #0]
    };
 23fef1c:	780a      	ldrb	r2, [r1, #0]
 23fef1e:	7102      	strb	r2, [r0, #4]
 23fef20:	684a      	ldr	r2, [r1, #4]
 23fef22:	6082      	str	r2, [r0, #8]
 23fef24:	68ca      	ldr	r2, [r1, #12]
 23fef26:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23fef28:	7a0a      	ldrb	r2, [r1, #8]
 23fef2a:	6102      	str	r2, [r0, #16]
    };
 23fef2c:	690a      	ldr	r2, [r1, #16]
 23fef2e:	6142      	str	r2, [r0, #20]
  }
 23fef30:	4770      	bx	lr
	...

023fef34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef34:	b538      	push	{r3, r4, r5, lr}
 23fef36:	4604      	mov	r4, r0
 23fef38:	4615      	mov	r5, r2
 23fef3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fef3e:	2200      	movs	r2, #0
 23fef40:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fef44:	4b09      	ldr	r3, [pc, #36]	; (23fef6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fef46:	4608      	mov	r0, r1
  _i2c = i2c;
 23fef48:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef4a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fef4c:	4629      	mov	r1, r5
 23fef4e:	f7fe ff53 	bl	23fddf8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef52:	30bf      	adds	r0, #191	; 0xbf
 23fef54:	d108      	bne.n	23fef68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fef56:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef58:	07db      	lsls	r3, r3, #31
 23fef5a:	d505      	bpl.n	23fef68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fef5c:	6868      	ldr	r0, [r5, #4]
 23fef5e:	f7ff f9c1 	bl	23fe2e4 <free>
    free(conf.tx_buffer);
 23fef62:	68e8      	ldr	r0, [r5, #12]
 23fef64:	f7ff f9be 	bl	23fe2e4 <free>
}
 23fef68:	4620      	mov	r0, r4
 23fef6a:	bd38      	pop	{r3, r4, r5, pc}
 23fef6c:	023ffe2c 	.word	0x023ffe2c

023fef70 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fef70:	2300      	movs	r3, #0
 23fef72:	7c00      	ldrb	r0, [r0, #16]
 23fef74:	461a      	mov	r2, r3
 23fef76:	4619      	mov	r1, r3
 23fef78:	f7fe bec0 	b.w	23fdcfc <hal_i2c_begin>

023fef7c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fef7c:	b510      	push	{r4, lr}
 23fef7e:	4604      	mov	r4, r0
 23fef80:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23fef82:	4668      	mov	r0, sp
 23fef84:	f7ff ffc5 	bl	23fef12 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fef88:	2200      	movs	r2, #0
 23fef8a:	4669      	mov	r1, sp
 23fef8c:	7c20      	ldrb	r0, [r4, #16]
 23fef8e:	f7fe ff41 	bl	23fde14 <hal_i2c_request_ex>
}
 23fef92:	b006      	add	sp, #24
 23fef94:	bd10      	pop	{r4, pc}

023fef96 <_ZN7TwoWire11requestFromEhjh>:
{
 23fef96:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23fef98:	f88d 1004 	strb.w	r1, [sp, #4]
 23fef9c:	2100      	movs	r1, #0
 23fef9e:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fefa2:	1a5b      	subs	r3, r3, r1
 23fefa4:	bf18      	it	ne
 23fefa6:	2301      	movne	r3, #1
 23fefa8:	e9cd c104 	strd	ip, r1, [sp, #16]
 23fefac:	a901      	add	r1, sp, #4
    size_ = size;
 23fefae:	9202      	str	r2, [sp, #8]
 23fefb0:	f88d 300c 	strb.w	r3, [sp, #12]
 23fefb4:	f7ff ffe2 	bl	23fef7c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fefb8:	b007      	add	sp, #28
 23fefba:	f85d fb04 	ldr.w	pc, [sp], #4

023fefbe <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fefbe:	2200      	movs	r2, #0
 23fefc0:	7c00      	ldrb	r0, [r0, #16]
 23fefc2:	f7fe bea9 	b.w	23fdd18 <hal_i2c_begin_transmission>

023fefc6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fefc6:	b2c9      	uxtb	r1, r1
 23fefc8:	f7ff bff9 	b.w	23fefbe <_ZN7TwoWire17beginTransmissionEh>

023fefcc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fefcc:	2200      	movs	r2, #0
 23fefce:	7c00      	ldrb	r0, [r0, #16]
 23fefd0:	f7fe beb0 	b.w	23fdd34 <hal_i2c_end_transmission>

023fefd4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fefd4:	2101      	movs	r1, #1
 23fefd6:	f7ff bff9 	b.w	23fefcc <_ZN7TwoWire15endTransmissionEh>
	...

023fefdc <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fefdc:	21ff      	movs	r1, #255	; 0xff
 23fefde:	2200      	movs	r2, #0
      : address_{address},
 23fefe0:	4b04      	ldr	r3, [pc, #16]	; (23feff4 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fefe2:	2001      	movs	r0, #1
 23fefe4:	e9c3 1200 	strd	r1, r2, [r3]
 23fefe8:	2164      	movs	r1, #100	; 0x64
 23fefea:	611a      	str	r2, [r3, #16]
 23fefec:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23feff0:	4770      	bx	lr
 23feff2:	bf00      	nop
 23feff4:	1007aee0 	.word	0x1007aee0

023feff8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23feff8:	2200      	movs	r2, #0
 23feffa:	6840      	ldr	r0, [r0, #4]
 23feffc:	4611      	mov	r1, r2
 23feffe:	f7ff b891 	b.w	23fe124 <network_ready>

023ff002 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff002:	2200      	movs	r2, #0
 23ff004:	6840      	ldr	r0, [r0, #4]
 23ff006:	4611      	mov	r1, r2
 23ff008:	f7ff b8c4 	b.w	23fe194 <network_listening>

023ff00c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff00c:	2200      	movs	r2, #0
 23ff00e:	6840      	ldr	r0, [r0, #4]
 23ff010:	4611      	mov	r1, r2
 23ff012:	f7ff b8db 	b.w	23fe1cc <network_get_listen_timeout>

023ff016 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff016:	2200      	movs	r2, #0
 23ff018:	6840      	ldr	r0, [r0, #4]
 23ff01a:	f7ff b8c9 	b.w	23fe1b0 <network_set_listen_timeout>

023ff01e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff01e:	2200      	movs	r2, #0
 23ff020:	6840      	ldr	r0, [r0, #4]
 23ff022:	f081 0101 	eor.w	r1, r1, #1
 23ff026:	f7ff b8a7 	b.w	23fe178 <network_listen>

023ff02a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff02a:	2300      	movs	r3, #0
 23ff02c:	6840      	ldr	r0, [r0, #4]
 23ff02e:	461a      	mov	r2, r3
 23ff030:	4619      	mov	r1, r3
 23ff032:	f7ff b893 	b.w	23fe15c <network_off>

023ff036 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff036:	2300      	movs	r3, #0
 23ff038:	6840      	ldr	r0, [r0, #4]
 23ff03a:	461a      	mov	r2, r3
 23ff03c:	4619      	mov	r1, r3
 23ff03e:	f7ff b87f 	b.w	23fe140 <network_on>

023ff042 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff042:	2200      	movs	r2, #0
 23ff044:	6840      	ldr	r0, [r0, #4]
 23ff046:	4611      	mov	r1, r2
 23ff048:	f7ff b850 	b.w	23fe0ec <network_connecting>

023ff04c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff04c:	2200      	movs	r2, #0
 23ff04e:	2102      	movs	r1, #2
 23ff050:	6840      	ldr	r0, [r0, #4]
 23ff052:	f7ff b859 	b.w	23fe108 <network_disconnect>

023ff056 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff056:	2300      	movs	r3, #0
 23ff058:	6840      	ldr	r0, [r0, #4]
 23ff05a:	461a      	mov	r2, r3
 23ff05c:	f7ff b838 	b.w	23fe0d0 <network_connect>

023ff060 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff060:	2204      	movs	r2, #4
 23ff062:	4b02      	ldr	r3, [pc, #8]	; (23ff06c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff064:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff066:	4a02      	ldr	r2, [pc, #8]	; (23ff070 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff068:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff06a:	4770      	bx	lr
 23ff06c:	1007aef4 	.word	0x1007aef4
 23ff070:	023ffe58 	.word	0x023ffe58

023ff074 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff074:	2300      	movs	r3, #0
 23ff076:	6840      	ldr	r0, [r0, #4]
 23ff078:	461a      	mov	r2, r3
 23ff07a:	f7ff b829 	b.w	23fe0d0 <network_connect>

023ff07e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff07e:	2200      	movs	r2, #0
 23ff080:	2102      	movs	r1, #2
 23ff082:	6840      	ldr	r0, [r0, #4]
 23ff084:	f7ff b840 	b.w	23fe108 <network_disconnect>

023ff088 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff088:	2200      	movs	r2, #0
 23ff08a:	6840      	ldr	r0, [r0, #4]
 23ff08c:	4611      	mov	r1, r2
 23ff08e:	f7ff b82d 	b.w	23fe0ec <network_connecting>

023ff092 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff092:	2200      	movs	r2, #0
 23ff094:	6840      	ldr	r0, [r0, #4]
 23ff096:	4611      	mov	r1, r2
 23ff098:	f7ff b844 	b.w	23fe124 <network_ready>

023ff09c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff09c:	2300      	movs	r3, #0
 23ff09e:	6840      	ldr	r0, [r0, #4]
 23ff0a0:	461a      	mov	r2, r3
 23ff0a2:	4619      	mov	r1, r3
 23ff0a4:	f7ff b84c 	b.w	23fe140 <network_on>

023ff0a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff0a8:	2300      	movs	r3, #0
 23ff0aa:	6840      	ldr	r0, [r0, #4]
 23ff0ac:	461a      	mov	r2, r3
 23ff0ae:	4619      	mov	r1, r3
 23ff0b0:	f7ff b854 	b.w	23fe15c <network_off>

023ff0b4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff0b4:	2100      	movs	r1, #0
 23ff0b6:	6840      	ldr	r0, [r0, #4]
 23ff0b8:	f7ff b896 	b.w	23fe1e8 <network_is_on>

023ff0bc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff0bc:	2100      	movs	r1, #0
 23ff0be:	6840      	ldr	r0, [r0, #4]
 23ff0c0:	f7ff b8a0 	b.w	23fe204 <network_is_off>

023ff0c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff0c4:	2200      	movs	r2, #0
 23ff0c6:	6840      	ldr	r0, [r0, #4]
 23ff0c8:	f081 0101 	eor.w	r1, r1, #1
 23ff0cc:	f7ff b854 	b.w	23fe178 <network_listen>

023ff0d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff0d0:	2200      	movs	r2, #0
 23ff0d2:	6840      	ldr	r0, [r0, #4]
 23ff0d4:	f7ff b86c 	b.w	23fe1b0 <network_set_listen_timeout>

023ff0d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff0d8:	2200      	movs	r2, #0
 23ff0da:	6840      	ldr	r0, [r0, #4]
 23ff0dc:	4611      	mov	r1, r2
 23ff0de:	f7ff b875 	b.w	23fe1cc <network_get_listen_timeout>

023ff0e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff0e2:	2200      	movs	r2, #0
 23ff0e4:	6840      	ldr	r0, [r0, #4]
 23ff0e6:	4611      	mov	r1, r2
 23ff0e8:	f7ff b854 	b.w	23fe194 <network_listening>

023ff0ec <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23ff0ec:	2100      	movs	r1, #0
 23ff0ee:	6840      	ldr	r0, [r0, #4]
 23ff0f0:	f7ff b8a4 	b.w	23fe23c <network_is_preferred>

023ff0f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff0f8:	b095      	sub	sp, #84	; 0x54
 23ff0fa:	4614      	mov	r4, r2
 23ff0fc:	460d      	mov	r5, r1
 23ff0fe:	4607      	mov	r7, r0
    IPAddress addr;
 23ff100:	f7ff fdc6 	bl	23fec90 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff104:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff106:	221c      	movs	r2, #28
 23ff108:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff10a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff10c:	f000 fa43 	bl	23ff596 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff110:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff112:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff114:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff116:	2100      	movs	r1, #0
 23ff118:	466b      	mov	r3, sp
 23ff11a:	aa0c      	add	r2, sp, #48	; 0x30
 23ff11c:	f7fe fce4 	bl	23fdae8 <netdb_getaddrinfo>
    if (!r) {
 23ff120:	4604      	mov	r4, r0
 23ff122:	2800      	cmp	r0, #0
 23ff124:	d14b      	bne.n	23ff1be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff126:	4602      	mov	r2, r0
 23ff128:	2101      	movs	r1, #1
 23ff12a:	6868      	ldr	r0, [r5, #4]
 23ff12c:	f7fe fffa 	bl	23fe124 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff130:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff132:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff134:	4622      	mov	r2, r4
 23ff136:	6868      	ldr	r0, [r5, #4]
 23ff138:	f7fe fff4 	bl	23fe124 <network_ready>
        bool ok = false;
 23ff13c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff13e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff140:	9e00      	ldr	r6, [sp, #0]
 23ff142:	2e00      	cmp	r6, #0
 23ff144:	d03b      	beq.n	23ff1be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff146:	2900      	cmp	r1, #0
 23ff148:	d139      	bne.n	23ff1be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff14a:	6873      	ldr	r3, [r6, #4]
 23ff14c:	2b02      	cmp	r3, #2
 23ff14e:	d003      	beq.n	23ff158 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff150:	2b0a      	cmp	r3, #10
 23ff152:	d011      	beq.n	23ff178 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff154:	69f6      	ldr	r6, [r6, #28]
 23ff156:	e7f4      	b.n	23ff142 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff158:	f1b8 0f00 	cmp.w	r8, #0
 23ff15c:	d0fa      	beq.n	23ff154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff15e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff160:	a806      	add	r0, sp, #24
 23ff162:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff164:	1d3c      	adds	r4, r7, #4
 23ff166:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff168:	f7ff fdc0 	bl	23fecec <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff16c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff16e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff170:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff172:	4641      	mov	r1, r8
 23ff174:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff176:	e7ed      	b.n	23ff154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff178:	f1b9 0f00 	cmp.w	r9, #0
 23ff17c:	d0ea      	beq.n	23ff154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff17e:	2210      	movs	r2, #16
 23ff180:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff182:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff184:	f000 fa07 	bl	23ff596 <memset>
                    a.v = 6;
 23ff188:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff18a:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff18c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff190:	f104 0308 	add.w	r3, r4, #8
 23ff194:	3418      	adds	r4, #24
 23ff196:	462a      	mov	r2, r5
 23ff198:	6818      	ldr	r0, [r3, #0]
 23ff19a:	6859      	ldr	r1, [r3, #4]
 23ff19c:	3308      	adds	r3, #8
 23ff19e:	c203      	stmia	r2!, {r0, r1}
 23ff1a0:	42a3      	cmp	r3, r4
 23ff1a2:	4615      	mov	r5, r2
 23ff1a4:	d1f7      	bne.n	23ff196 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff1a6:	a901      	add	r1, sp, #4
 23ff1a8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff1aa:	1d3c      	adds	r4, r7, #4
 23ff1ac:	ad07      	add	r5, sp, #28
 23ff1ae:	f7ff fd7d 	bl	23fecac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff1b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff1b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff1b6:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff1b8:	4649      	mov	r1, r9
 23ff1ba:	7023      	strb	r3, [r4, #0]
                    break;
 23ff1bc:	e7ca      	b.n	23ff154 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff1be:	9800      	ldr	r0, [sp, #0]
 23ff1c0:	f7fe fc84 	bl	23fdacc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff1c4:	4638      	mov	r0, r7
 23ff1c6:	b015      	add	sp, #84	; 0x54
 23ff1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff1cc <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23ff1cc:	3803      	subs	r0, #3
 23ff1ce:	2802      	cmp	r0, #2
 23ff1d0:	bf9a      	itte	ls
 23ff1d2:	4b02      	ldrls	r3, [pc, #8]	; (23ff1dc <_ZN5spark12NetworkClass4fromEm+0x10>)
 23ff1d4:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23ff1d8:	4801      	ldrhi	r0, [pc, #4]	; (23ff1e0 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23ff1da:	4770      	bx	lr
 23ff1dc:	023ffe94 	.word	0x023ffe94
 23ff1e0:	1007aefc 	.word	0x1007aefc

023ff1e4 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23ff1e4:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23ff1e6:	2200      	movs	r2, #0
 23ff1e8:	6840      	ldr	r0, [r0, #4]
 23ff1ea:	f7ff f819 	bl	23fe220 <network_prefer>
}
 23ff1ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23ff1f2:	f7ff bfeb 	b.w	23ff1cc <_ZN5spark12NetworkClass4fromEm>
	...

023ff1f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff1f8:	4b02      	ldr	r3, [pc, #8]	; (23ff204 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff1fa:	4a03      	ldr	r2, [pc, #12]	; (23ff208 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff1fc:	601a      	str	r2, [r3, #0]
 23ff1fe:	2200      	movs	r2, #0
 23ff200:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff202:	4770      	bx	lr
 23ff204:	1007aefc 	.word	0x1007aefc
 23ff208:	023ffea8 	.word	0x023ffea8

023ff20c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff20c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff20e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff210:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff212:	d902      	bls.n	23ff21a <pinAvailable+0xe>
    return false;
 23ff214:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff216:	b003      	add	sp, #12
 23ff218:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff21a:	f1a0 030f 	sub.w	r3, r0, #15
 23ff21e:	2b02      	cmp	r3, #2
 23ff220:	d90b      	bls.n	23ff23a <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff222:	2801      	cmp	r0, #1
 23ff224:	d821      	bhi.n	23ff26a <pinAvailable+0x5e>
 23ff226:	f000 f957 	bl	23ff4d8 <_Z19__fetch_global_Wirev>
 23ff22a:	2100      	movs	r1, #0
 23ff22c:	7c00      	ldrb	r0, [r0, #16]
 23ff22e:	f7fe fdd5 	bl	23fdddc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff232:	f080 0001 	eor.w	r0, r0, #1
 23ff236:	b2c0      	uxtb	r0, r0
 23ff238:	e7ed      	b.n	23ff216 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff23a:	4d11      	ldr	r5, [pc, #68]	; (23ff280 <pinAvailable+0x74>)
 23ff23c:	e8d5 1f8f 	ldab	r1, [r5]
 23ff240:	f011 0101 	ands.w	r1, r1, #1
 23ff244:	d10b      	bne.n	23ff25e <pinAvailable+0x52>
 23ff246:	4628      	mov	r0, r5
 23ff248:	9101      	str	r1, [sp, #4]
 23ff24a:	f7fd fd31 	bl	23fccb0 <__cxa_guard_acquire>
 23ff24e:	9901      	ldr	r1, [sp, #4]
 23ff250:	b128      	cbz	r0, 23ff25e <pinAvailable+0x52>
 23ff252:	480c      	ldr	r0, [pc, #48]	; (23ff284 <pinAvailable+0x78>)
 23ff254:	f7ff f908 	bl	23fe468 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff258:	4628      	mov	r0, r5
 23ff25a:	f7fd fd2e 	bl	23fccba <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff25e:	4b09      	ldr	r3, [pc, #36]	; (23ff284 <pinAvailable+0x78>)
 23ff260:	7818      	ldrb	r0, [r3, #0]
 23ff262:	f7fe fe39 	bl	23fded8 <hal_spi_is_enabled>
 23ff266:	2800      	cmp	r0, #0
 23ff268:	d1d4      	bne.n	23ff214 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff26a:	3c08      	subs	r4, #8
 23ff26c:	2c01      	cmp	r4, #1
 23ff26e:	d805      	bhi.n	23ff27c <pinAvailable+0x70>
 23ff270:	f000 f886 	bl	23ff380 <_Z22__fetch_global_Serial1v>
 23ff274:	7c00      	ldrb	r0, [r0, #16]
 23ff276:	f7fe fd17 	bl	23fdca8 <hal_usart_is_enabled>
 23ff27a:	e7da      	b.n	23ff232 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff27c:	2001      	movs	r0, #1
 23ff27e:	e7ca      	b.n	23ff216 <pinAvailable+0xa>
 23ff280:	1007ae68 	.word	0x1007ae68
 23ff284:	1007ae6c 	.word	0x1007ae6c

023ff288 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff288:	281b      	cmp	r0, #27
{
 23ff28a:	b538      	push	{r3, r4, r5, lr}
 23ff28c:	4604      	mov	r4, r0
 23ff28e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff290:	d80a      	bhi.n	23ff2a8 <pinMode+0x20>
 23ff292:	29ff      	cmp	r1, #255	; 0xff
 23ff294:	d008      	beq.n	23ff2a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff296:	f7ff ffb9 	bl	23ff20c <pinAvailable>
 23ff29a:	b128      	cbz	r0, 23ff2a8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff29c:	4629      	mov	r1, r5
 23ff29e:	4620      	mov	r0, r4
}
 23ff2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff2a4:	f7fe bc2e 	b.w	23fdb04 <hal_gpio_mode>
}
 23ff2a8:	bd38      	pop	{r3, r4, r5, pc}

023ff2aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff2aa:	b538      	push	{r3, r4, r5, lr}
 23ff2ac:	4604      	mov	r4, r0
 23ff2ae:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff2b0:	f7fe fc36 	bl	23fdb20 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff2b4:	28ff      	cmp	r0, #255	; 0xff
 23ff2b6:	d010      	beq.n	23ff2da <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff2b8:	2806      	cmp	r0, #6
 23ff2ba:	d804      	bhi.n	23ff2c6 <digitalWrite+0x1c>
 23ff2bc:	234d      	movs	r3, #77	; 0x4d
 23ff2be:	fa23 f000 	lsr.w	r0, r3, r0
 23ff2c2:	07c3      	lsls	r3, r0, #31
 23ff2c4:	d409      	bmi.n	23ff2da <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff2c6:	4620      	mov	r0, r4
 23ff2c8:	f7ff ffa0 	bl	23ff20c <pinAvailable>
 23ff2cc:	b128      	cbz	r0, 23ff2da <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff2ce:	4629      	mov	r1, r5
 23ff2d0:	4620      	mov	r0, r4
}
 23ff2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff2d6:	f7fe bc31 	b.w	23fdb3c <hal_gpio_write>
}
 23ff2da:	bd38      	pop	{r3, r4, r5, pc}

023ff2dc <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 23ff2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff2e0:	4690      	mov	r8, r2
 23ff2e2:	461f      	mov	r7, r3
 23ff2e4:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
 23ff2e6:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 23ff2e8:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
 23ff2ea:	f1c4 0107 	rsb	r1, r4, #7
 23ff2ee:	f1b8 0f00 	cmp.w	r8, #0
 23ff2f2:	d112      	bne.n	23ff31a <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 23ff2f4:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 23ff2f8:	4630      	mov	r0, r6
 23ff2fa:	f001 0101 	and.w	r1, r1, #1
 23ff2fe:	f7ff ffd4 	bl	23ff2aa <digitalWrite>
    digitalWrite(clockPin, HIGH);
 23ff302:	2101      	movs	r1, #1
 23ff304:	4628      	mov	r0, r5
 23ff306:	f7ff ffd0 	bl	23ff2aa <digitalWrite>
    digitalWrite(clockPin, LOW);
 23ff30a:	2100      	movs	r1, #0
 23ff30c:	4628      	mov	r0, r5
 23ff30e:	f7ff ffcc 	bl	23ff2aa <digitalWrite>
  for (i = 0; i < 8; i++)  {
 23ff312:	3c01      	subs	r4, #1
 23ff314:	d2e9      	bcs.n	23ff2ea <shiftOut+0xe>
  }
}
 23ff316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 23ff31a:	fa47 f104 	asr.w	r1, r7, r4
 23ff31e:	e7eb      	b.n	23ff2f8 <shiftOut+0x1c>

023ff320 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff320:	4770      	bx	lr
	...

023ff324 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff324:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff326:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff328:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff32a:	462a      	mov	r2, r5
 23ff32c:	2100      	movs	r1, #0
 23ff32e:	f000 f932 	bl	23ff596 <memset>
 23ff332:	8025      	strh	r5, [r4, #0]
 23ff334:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff336:	4907      	ldr	r1, [pc, #28]	; (23ff354 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff338:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff33a:	8125      	strh	r5, [r4, #8]
 23ff33c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff33e:	f000 f8ef 	bl	23ff520 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff342:	4904      	ldr	r1, [pc, #16]	; (23ff354 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff344:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff346:	4628      	mov	r0, r5
 23ff348:	f000 f8ea 	bl	23ff520 <_ZnajRKSt9nothrow_t>
    };
 23ff34c:	60e0      	str	r0, [r4, #12]
}
 23ff34e:	4620      	mov	r0, r4
 23ff350:	bd38      	pop	{r3, r4, r5, pc}
 23ff352:	bf00      	nop
 23ff354:	023ffee4 	.word	0x023ffee4

023ff358 <__tcf_2>:
 23ff358:	4770      	bx	lr

023ff35a <__tcf_1>:
 23ff35a:	4770      	bx	lr

023ff35c <_Z20acquireSerial1Bufferv>:
{
 23ff35c:	b510      	push	{r4, lr}
 23ff35e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff360:	f7ff ffe0 	bl	23ff324 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff364:	4620      	mov	r0, r4
 23ff366:	bd10      	pop	{r4, pc}

023ff368 <_Z20acquireSerial2Bufferv>:
 23ff368:	b510      	push	{r4, lr}
 23ff36a:	4604      	mov	r4, r0
 23ff36c:	f7ff ffda 	bl	23ff324 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff370:	4620      	mov	r0, r4
 23ff372:	bd10      	pop	{r4, pc}

023ff374 <_Z20acquireSerial3Bufferv>:
 23ff374:	b510      	push	{r4, lr}
 23ff376:	4604      	mov	r4, r0
 23ff378:	f7ff ffd4 	bl	23ff324 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff37c:	4620      	mov	r0, r4
 23ff37e:	bd10      	pop	{r4, pc}

023ff380 <_Z22__fetch_global_Serial1v>:
{
 23ff380:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff382:	4d0e      	ldr	r5, [pc, #56]	; (23ff3bc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff384:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff386:	e8d5 1f8f 	ldab	r1, [r5]
 23ff38a:	f011 0401 	ands.w	r4, r1, #1
 23ff38e:	d111      	bne.n	23ff3b4 <_Z22__fetch_global_Serial1v+0x34>
 23ff390:	4628      	mov	r0, r5
 23ff392:	f7fd fc8d 	bl	23fccb0 <__cxa_guard_acquire>
 23ff396:	b168      	cbz	r0, 23ff3b4 <_Z22__fetch_global_Serial1v+0x34>
 23ff398:	a801      	add	r0, sp, #4
 23ff39a:	f7ff ffdf 	bl	23ff35c <_Z20acquireSerial1Bufferv>
 23ff39e:	4621      	mov	r1, r4
 23ff3a0:	aa01      	add	r2, sp, #4
 23ff3a2:	4807      	ldr	r0, [pc, #28]	; (23ff3c0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff3a4:	f7ff fd72 	bl	23fee8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff3a8:	4628      	mov	r0, r5
 23ff3aa:	f7fd fc86 	bl	23fccba <__cxa_guard_release>
 23ff3ae:	4805      	ldr	r0, [pc, #20]	; (23ff3c4 <_Z22__fetch_global_Serial1v+0x44>)
 23ff3b0:	f000 f8de 	bl	23ff570 <atexit>
    return serial1;
}
 23ff3b4:	4802      	ldr	r0, [pc, #8]	; (23ff3c0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff3b6:	b007      	add	sp, #28
 23ff3b8:	bd30      	pop	{r4, r5, pc}
 23ff3ba:	bf00      	nop
 23ff3bc:	1007af04 	.word	0x1007af04
 23ff3c0:	1007af10 	.word	0x1007af10
 23ff3c4:	023ff321 	.word	0x023ff321

023ff3c8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff3c8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff3ca:	4c0d      	ldr	r4, [pc, #52]	; (23ff400 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff3cc:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff3ce:	e8d4 3f8f 	ldab	r3, [r4]
 23ff3d2:	07db      	lsls	r3, r3, #31
 23ff3d4:	d411      	bmi.n	23ff3fa <_Z22__fetch_global_Serial2v+0x32>
 23ff3d6:	4620      	mov	r0, r4
 23ff3d8:	f7fd fc6a 	bl	23fccb0 <__cxa_guard_acquire>
 23ff3dc:	b168      	cbz	r0, 23ff3fa <_Z22__fetch_global_Serial2v+0x32>
 23ff3de:	a801      	add	r0, sp, #4
 23ff3e0:	f7ff ffc2 	bl	23ff368 <_Z20acquireSerial2Bufferv>
 23ff3e4:	2101      	movs	r1, #1
 23ff3e6:	aa01      	add	r2, sp, #4
 23ff3e8:	4806      	ldr	r0, [pc, #24]	; (23ff404 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff3ea:	f7ff fd4f 	bl	23fee8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff3ee:	4620      	mov	r0, r4
 23ff3f0:	f7fd fc63 	bl	23fccba <__cxa_guard_release>
 23ff3f4:	4804      	ldr	r0, [pc, #16]	; (23ff408 <_Z22__fetch_global_Serial2v+0x40>)
 23ff3f6:	f000 f8bb 	bl	23ff570 <atexit>
	return serial2;
}
 23ff3fa:	4802      	ldr	r0, [pc, #8]	; (23ff404 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff3fc:	b006      	add	sp, #24
 23ff3fe:	bd10      	pop	{r4, pc}
 23ff400:	1007af08 	.word	0x1007af08
 23ff404:	1007af24 	.word	0x1007af24
 23ff408:	023ff35b 	.word	0x023ff35b

023ff40c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff40c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff40e:	f7ff ffdb 	bl	23ff3c8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff412:	4b07      	ldr	r3, [pc, #28]	; (23ff430 <_Z15serialEventRun2v+0x24>)
 23ff414:	4604      	mov	r4, r0
 23ff416:	b153      	cbz	r3, 23ff42e <_Z15serialEventRun2v+0x22>
 23ff418:	f7ff fd4c 	bl	23feeb4 <_ZN11USARTSerial9isEnabledEv>
 23ff41c:	b138      	cbz	r0, 23ff42e <_Z15serialEventRun2v+0x22>
 23ff41e:	6823      	ldr	r3, [r4, #0]
 23ff420:	4620      	mov	r0, r4
 23ff422:	691b      	ldr	r3, [r3, #16]
 23ff424:	4798      	blx	r3
 23ff426:	2800      	cmp	r0, #0
 23ff428:	dd01      	ble.n	23ff42e <_Z15serialEventRun2v+0x22>
        handler();
 23ff42a:	e000      	b.n	23ff42e <_Z15serialEventRun2v+0x22>
 23ff42c:	bf00      	nop
}
 23ff42e:	bd10      	pop	{r4, pc}
 23ff430:	00000000 	.word	0x00000000

023ff434 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff434:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff436:	4c0d      	ldr	r4, [pc, #52]	; (23ff46c <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff438:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff43a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff43e:	07db      	lsls	r3, r3, #31
 23ff440:	d411      	bmi.n	23ff466 <_Z22__fetch_global_Serial3v+0x32>
 23ff442:	4620      	mov	r0, r4
 23ff444:	f7fd fc34 	bl	23fccb0 <__cxa_guard_acquire>
 23ff448:	b168      	cbz	r0, 23ff466 <_Z22__fetch_global_Serial3v+0x32>
 23ff44a:	a801      	add	r0, sp, #4
 23ff44c:	f7ff ff92 	bl	23ff374 <_Z20acquireSerial3Bufferv>
 23ff450:	2102      	movs	r1, #2
 23ff452:	aa01      	add	r2, sp, #4
 23ff454:	4806      	ldr	r0, [pc, #24]	; (23ff470 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff456:	f7ff fd19 	bl	23fee8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff45a:	4620      	mov	r0, r4
 23ff45c:	f7fd fc2d 	bl	23fccba <__cxa_guard_release>
 23ff460:	4804      	ldr	r0, [pc, #16]	; (23ff474 <_Z22__fetch_global_Serial3v+0x40>)
 23ff462:	f000 f885 	bl	23ff570 <atexit>
	return serial3;
}
 23ff466:	4802      	ldr	r0, [pc, #8]	; (23ff470 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff468:	b006      	add	sp, #24
 23ff46a:	bd10      	pop	{r4, pc}
 23ff46c:	1007af0c 	.word	0x1007af0c
 23ff470:	1007af38 	.word	0x1007af38
 23ff474:	023ff359 	.word	0x023ff359

023ff478 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff478:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff47a:	f7ff ffdb 	bl	23ff434 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff47e:	4b07      	ldr	r3, [pc, #28]	; (23ff49c <_Z15serialEventRun3v+0x24>)
 23ff480:	4604      	mov	r4, r0
 23ff482:	b153      	cbz	r3, 23ff49a <_Z15serialEventRun3v+0x22>
 23ff484:	f7ff fd16 	bl	23feeb4 <_ZN11USARTSerial9isEnabledEv>
 23ff488:	b138      	cbz	r0, 23ff49a <_Z15serialEventRun3v+0x22>
 23ff48a:	6823      	ldr	r3, [r4, #0]
 23ff48c:	4620      	mov	r0, r4
 23ff48e:	691b      	ldr	r3, [r3, #16]
 23ff490:	4798      	blx	r3
 23ff492:	2800      	cmp	r0, #0
 23ff494:	dd01      	ble.n	23ff49a <_Z15serialEventRun3v+0x22>
        handler();
 23ff496:	e000      	b.n	23ff49a <_Z15serialEventRun3v+0x22>
 23ff498:	bf00      	nop
}
 23ff49a:	bd10      	pop	{r4, pc}
 23ff49c:	00000000 	.word	0x00000000

023ff4a0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff4a0:	4770      	bx	lr
	...

023ff4a4 <_Z17acquireWireBufferv>:
{
 23ff4a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff4a6:	4b0a      	ldr	r3, [pc, #40]	; (23ff4d0 <_Z17acquireWireBufferv+0x2c>)
{
 23ff4a8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff4aa:	6003      	str	r3, [r0, #0]
 23ff4ac:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff4ae:	4909      	ldr	r1, [pc, #36]	; (23ff4d4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff4b0:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff4b2:	2020      	movs	r0, #32
 23ff4b4:	f000 f834 	bl	23ff520 <_ZnajRKSt9nothrow_t>
	};
 23ff4b8:	2520      	movs	r5, #32
 23ff4ba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff4bc:	4905      	ldr	r1, [pc, #20]	; (23ff4d4 <_Z17acquireWireBufferv+0x30>)
 23ff4be:	4628      	mov	r0, r5
	};
 23ff4c0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff4c2:	f000 f82d 	bl	23ff520 <_ZnajRKSt9nothrow_t>
	};
 23ff4c6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff4ca:	4620      	mov	r0, r4
 23ff4cc:	bd38      	pop	{r3, r4, r5, pc}
 23ff4ce:	bf00      	nop
 23ff4d0:	00010018 	.word	0x00010018
 23ff4d4:	023ffee4 	.word	0x023ffee4

023ff4d8 <_Z19__fetch_global_Wirev>:
{
 23ff4d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff4da:	4d0e      	ldr	r5, [pc, #56]	; (23ff514 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff4dc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff4de:	e8d5 1f8f 	ldab	r1, [r5]
 23ff4e2:	f011 0401 	ands.w	r4, r1, #1
 23ff4e6:	d111      	bne.n	23ff50c <_Z19__fetch_global_Wirev+0x34>
 23ff4e8:	4628      	mov	r0, r5
 23ff4ea:	f7fd fbe1 	bl	23fccb0 <__cxa_guard_acquire>
 23ff4ee:	b168      	cbz	r0, 23ff50c <_Z19__fetch_global_Wirev+0x34>
 23ff4f0:	4668      	mov	r0, sp
 23ff4f2:	f7ff ffd7 	bl	23ff4a4 <_Z17acquireWireBufferv>
 23ff4f6:	466a      	mov	r2, sp
 23ff4f8:	4621      	mov	r1, r4
 23ff4fa:	4807      	ldr	r0, [pc, #28]	; (23ff518 <_Z19__fetch_global_Wirev+0x40>)
 23ff4fc:	f7ff fd1a 	bl	23fef34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff500:	4628      	mov	r0, r5
 23ff502:	f7fd fbda 	bl	23fccba <__cxa_guard_release>
 23ff506:	4805      	ldr	r0, [pc, #20]	; (23ff51c <_Z19__fetch_global_Wirev+0x44>)
 23ff508:	f000 f832 	bl	23ff570 <atexit>
	return wire;
}
 23ff50c:	4802      	ldr	r0, [pc, #8]	; (23ff518 <_Z19__fetch_global_Wirev+0x40>)
 23ff50e:	b007      	add	sp, #28
 23ff510:	bd30      	pop	{r4, r5, pc}
 23ff512:	bf00      	nop
 23ff514:	1007af50 	.word	0x1007af50
 23ff518:	1007af54 	.word	0x1007af54
 23ff51c:	023ff4a1 	.word	0x023ff4a1

023ff520 <_ZnajRKSt9nothrow_t>:
 23ff520:	f7fd bbb5 	b.w	23fcc8e <_Znaj>

023ff524 <asctime_r>:
 23ff524:	b510      	push	{r4, lr}
 23ff526:	460c      	mov	r4, r1
 23ff528:	6941      	ldr	r1, [r0, #20]
 23ff52a:	b086      	sub	sp, #24
 23ff52c:	6903      	ldr	r3, [r0, #16]
 23ff52e:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23ff532:	6982      	ldr	r2, [r0, #24]
 23ff534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23ff538:	9104      	str	r1, [sp, #16]
 23ff53a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23ff53e:	6801      	ldr	r1, [r0, #0]
 23ff540:	9103      	str	r1, [sp, #12]
 23ff542:	6841      	ldr	r1, [r0, #4]
 23ff544:	9102      	str	r1, [sp, #8]
 23ff546:	6881      	ldr	r1, [r0, #8]
 23ff548:	9101      	str	r1, [sp, #4]
 23ff54a:	68c1      	ldr	r1, [r0, #12]
 23ff54c:	4620      	mov	r0, r4
 23ff54e:	9100      	str	r1, [sp, #0]
 23ff550:	4904      	ldr	r1, [pc, #16]	; (23ff564 <asctime_r+0x40>)
 23ff552:	440b      	add	r3, r1
 23ff554:	4904      	ldr	r1, [pc, #16]	; (23ff568 <asctime_r+0x44>)
 23ff556:	440a      	add	r2, r1
 23ff558:	4904      	ldr	r1, [pc, #16]	; (23ff56c <asctime_r+0x48>)
 23ff55a:	f7fe fedf 	bl	23fe31c <siprintf>
 23ff55e:	4620      	mov	r0, r4
 23ff560:	b006      	add	sp, #24
 23ff562:	bd10      	pop	{r4, pc}
 23ff564:	023fff1a 	.word	0x023fff1a
 23ff568:	023fff05 	.word	0x023fff05
 23ff56c:	023ffee5 	.word	0x023ffee5

023ff570 <atexit>:
 23ff570:	2300      	movs	r3, #0
 23ff572:	4601      	mov	r1, r0
 23ff574:	461a      	mov	r2, r3
 23ff576:	4618      	mov	r0, r3
 23ff578:	f000 b860 	b.w	23ff63c <__register_exitproc>

023ff57c <memcpy>:
 23ff57c:	440a      	add	r2, r1
 23ff57e:	1e43      	subs	r3, r0, #1
 23ff580:	4291      	cmp	r1, r2
 23ff582:	d100      	bne.n	23ff586 <memcpy+0xa>
 23ff584:	4770      	bx	lr
 23ff586:	b510      	push	{r4, lr}
 23ff588:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff58c:	4291      	cmp	r1, r2
 23ff58e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff592:	d1f9      	bne.n	23ff588 <memcpy+0xc>
 23ff594:	bd10      	pop	{r4, pc}

023ff596 <memset>:
 23ff596:	4402      	add	r2, r0
 23ff598:	4603      	mov	r3, r0
 23ff59a:	4293      	cmp	r3, r2
 23ff59c:	d100      	bne.n	23ff5a0 <memset+0xa>
 23ff59e:	4770      	bx	lr
 23ff5a0:	f803 1b01 	strb.w	r1, [r3], #1
 23ff5a4:	e7f9      	b.n	23ff59a <memset+0x4>
	...

023ff5a8 <srand>:
 23ff5a8:	b538      	push	{r3, r4, r5, lr}
 23ff5aa:	4b10      	ldr	r3, [pc, #64]	; (23ff5ec <srand+0x44>)
 23ff5ac:	4604      	mov	r4, r0
 23ff5ae:	681d      	ldr	r5, [r3, #0]
 23ff5b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff5b2:	b9b3      	cbnz	r3, 23ff5e2 <srand+0x3a>
 23ff5b4:	2018      	movs	r0, #24
 23ff5b6:	f7fe fe87 	bl	23fe2c8 <malloc>
 23ff5ba:	4602      	mov	r2, r0
 23ff5bc:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff5be:	b920      	cbnz	r0, 23ff5ca <srand+0x22>
 23ff5c0:	4b0b      	ldr	r3, [pc, #44]	; (23ff5f0 <srand+0x48>)
 23ff5c2:	2142      	movs	r1, #66	; 0x42
 23ff5c4:	480b      	ldr	r0, [pc, #44]	; (23ff5f4 <srand+0x4c>)
 23ff5c6:	f7fe fed3 	bl	23fe370 <__assert_func>
 23ff5ca:	490b      	ldr	r1, [pc, #44]	; (23ff5f8 <srand+0x50>)
 23ff5cc:	4b0b      	ldr	r3, [pc, #44]	; (23ff5fc <srand+0x54>)
 23ff5ce:	e9c0 1300 	strd	r1, r3, [r0]
 23ff5d2:	4b0b      	ldr	r3, [pc, #44]	; (23ff600 <srand+0x58>)
 23ff5d4:	2100      	movs	r1, #0
 23ff5d6:	6083      	str	r3, [r0, #8]
 23ff5d8:	230b      	movs	r3, #11
 23ff5da:	8183      	strh	r3, [r0, #12]
 23ff5dc:	2001      	movs	r0, #1
 23ff5de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff5e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff5e4:	2200      	movs	r2, #0
 23ff5e6:	611c      	str	r4, [r3, #16]
 23ff5e8:	615a      	str	r2, [r3, #20]
 23ff5ea:	bd38      	pop	{r3, r4, r5, pc}
 23ff5ec:	1007adb4 	.word	0x1007adb4
 23ff5f0:	023fff3e 	.word	0x023fff3e
 23ff5f4:	023fff55 	.word	0x023fff55
 23ff5f8:	abcd330e 	.word	0xabcd330e
 23ff5fc:	e66d1234 	.word	0xe66d1234
 23ff600:	0005deec 	.word	0x0005deec

023ff604 <strcpy>:
 23ff604:	4603      	mov	r3, r0
 23ff606:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff60a:	f803 2b01 	strb.w	r2, [r3], #1
 23ff60e:	2a00      	cmp	r2, #0
 23ff610:	d1f9      	bne.n	23ff606 <strcpy+0x2>
 23ff612:	4770      	bx	lr

023ff614 <strncpy>:
 23ff614:	3901      	subs	r1, #1
 23ff616:	4603      	mov	r3, r0
 23ff618:	b510      	push	{r4, lr}
 23ff61a:	b132      	cbz	r2, 23ff62a <strncpy+0x16>
 23ff61c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff620:	3a01      	subs	r2, #1
 23ff622:	f803 4b01 	strb.w	r4, [r3], #1
 23ff626:	2c00      	cmp	r4, #0
 23ff628:	d1f7      	bne.n	23ff61a <strncpy+0x6>
 23ff62a:	441a      	add	r2, r3
 23ff62c:	2100      	movs	r1, #0
 23ff62e:	4293      	cmp	r3, r2
 23ff630:	d100      	bne.n	23ff634 <strncpy+0x20>
 23ff632:	bd10      	pop	{r4, pc}
 23ff634:	f803 1b01 	strb.w	r1, [r3], #1
 23ff638:	e7f9      	b.n	23ff62e <strncpy+0x1a>
	...

023ff63c <__register_exitproc>:
 23ff63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff640:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff700 <__register_exitproc+0xc4>
 23ff644:	4606      	mov	r6, r0
 23ff646:	461f      	mov	r7, r3
 23ff648:	460d      	mov	r5, r1
 23ff64a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff64e:	4691      	mov	r9, r2
 23ff650:	f000 f858 	bl	23ff704 <__retarget_lock_acquire_recursive>
 23ff654:	4b26      	ldr	r3, [pc, #152]	; (23ff6f0 <__register_exitproc+0xb4>)
 23ff656:	681c      	ldr	r4, [r3, #0]
 23ff658:	b934      	cbnz	r4, 23ff668 <__register_exitproc+0x2c>
 23ff65a:	4c26      	ldr	r4, [pc, #152]	; (23ff6f4 <__register_exitproc+0xb8>)
 23ff65c:	601c      	str	r4, [r3, #0]
 23ff65e:	4b26      	ldr	r3, [pc, #152]	; (23ff6f8 <__register_exitproc+0xbc>)
 23ff660:	b113      	cbz	r3, 23ff668 <__register_exitproc+0x2c>
 23ff662:	681b      	ldr	r3, [r3, #0]
 23ff664:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff668:	6863      	ldr	r3, [r4, #4]
 23ff66a:	2b1f      	cmp	r3, #31
 23ff66c:	dd07      	ble.n	23ff67e <__register_exitproc+0x42>
 23ff66e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff672:	f000 f849 	bl	23ff708 <__retarget_lock_release_recursive>
 23ff676:	f04f 30ff 	mov.w	r0, #4294967295
 23ff67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff67e:	b35e      	cbz	r6, 23ff6d8 <__register_exitproc+0x9c>
 23ff680:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff684:	b988      	cbnz	r0, 23ff6aa <__register_exitproc+0x6e>
 23ff686:	4b1d      	ldr	r3, [pc, #116]	; (23ff6fc <__register_exitproc+0xc0>)
 23ff688:	b923      	cbnz	r3, 23ff694 <__register_exitproc+0x58>
 23ff68a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff68e:	f000 f83a 	bl	23ff706 <__retarget_lock_release>
 23ff692:	e7f0      	b.n	23ff676 <__register_exitproc+0x3a>
 23ff694:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff698:	f7fe fe16 	bl	23fe2c8 <malloc>
 23ff69c:	2800      	cmp	r0, #0
 23ff69e:	d0f4      	beq.n	23ff68a <__register_exitproc+0x4e>
 23ff6a0:	2300      	movs	r3, #0
 23ff6a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff6a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff6aa:	6863      	ldr	r3, [r4, #4]
 23ff6ac:	2201      	movs	r2, #1
 23ff6ae:	2e02      	cmp	r6, #2
 23ff6b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff6b4:	fa02 f203 	lsl.w	r2, r2, r3
 23ff6b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff6bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff6c0:	ea43 0302 	orr.w	r3, r3, r2
 23ff6c4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff6c8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff6cc:	bf02      	ittt	eq
 23ff6ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff6d2:	4313      	orreq	r3, r2
 23ff6d4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff6d8:	6863      	ldr	r3, [r4, #4]
 23ff6da:	f8d8 0000 	ldr.w	r0, [r8]
 23ff6de:	1c5a      	adds	r2, r3, #1
 23ff6e0:	3302      	adds	r3, #2
 23ff6e2:	6062      	str	r2, [r4, #4]
 23ff6e4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff6e8:	f000 f80e 	bl	23ff708 <__retarget_lock_release_recursive>
 23ff6ec:	2000      	movs	r0, #0
 23ff6ee:	e7c4      	b.n	23ff67a <__register_exitproc+0x3e>
 23ff6f0:	1007aff4 	.word	0x1007aff4
 23ff6f4:	1007af68 	.word	0x1007af68
 23ff6f8:	00000000 	.word	0x00000000
 23ff6fc:	023fe2c9 	.word	0x023fe2c9
 23ff700:	1007ae18 	.word	0x1007ae18

023ff704 <__retarget_lock_acquire_recursive>:
 23ff704:	4770      	bx	lr

023ff706 <__retarget_lock_release>:
 23ff706:	4770      	bx	lr

023ff708 <__retarget_lock_release_recursive>:
 23ff708:	4770      	bx	lr
	...

023ff70c <dynalib_user>:
 23ff70c:	cc55 023f cc7d 023f cc81 023f 0000 0000     U.?.}.?...?.....
 23ff71c:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ff72c:	7574 6c61 2500 2041 202c 4225 2520 0064     tual.%A , %B %d.
 23ff73c:	4925 3a20 2520 204d 203a 5325 2520 0070     %I : %M : %S %p.
 23ff74c:	2d58 7861 7369 6120 6363 6c65 7265 7461     X-axis accelerat
 23ff75c:	6f69 3a6e 2520 322e 2066 0a67 5900 612d     ion: %.2f g..Y-a
 23ff76c:	6978 2073 6361 6563 656c 6172 6974 6e6f     xis acceleration
 23ff77c:	203a 2e25 6632 6720 000a 2d5a 7861 7369     : %.2f g..Z-axis
 23ff78c:	6120 6363 6c65 7265 7461 6f69 3a6e 2520      acceleration: %
 23ff79c:	322e 2066 0a67 4500 7272 726f 7220 6165     .2f g..Error rea
 23ff7ac:	6964 676e 6620 6f72 206d 504d 3655 3530     ding from MPU605
 23ff7bc:	0030 0000                                   0...

023ff7c0 <_ZTV16Adafruit_SSD1306>:
	...
 23ff7c8:	d2f5 023f d385 023f da25 023f e6d1 023f     ..?...?.%.?...?.
 23ff7d8:	d2f9 023f d73d 023f d17d 023f d009 023f     ..?.=.?.}.?...?.
 23ff7e8:	d7fb 023f d899 023f d8cf 023f d8eb 023f     ..?...?...?...?.

023ff7f8 <_ZL4font>:
 23ff7f8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff808:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff818:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff828:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff838:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff848:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff858:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff868:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff878:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff888:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff898:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff8a8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff8b8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff8c8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff8d8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff8e8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff8f8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff908:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff918:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff928:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff938:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff948:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff958:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff968:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff978:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff988:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff998:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff9a8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff9b8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff9c8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff9d8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff9e8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff9f8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ffa08:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ffa18:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ffa28:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ffa38:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ffa48:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ffa58:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ffa68:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ffa78:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ffa88:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 23ffa98:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ffaa8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ffab8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 23ffac8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ffad8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 23ffae8:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 23ffaf8:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 23ffb08:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ffb18:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ffb28:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ffb38:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ffb48:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ffb58:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ffb68:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 23ffb78:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 23ffb88:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 23ffb98:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 23ffba8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 23ffbb8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 23ffbc8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 23ffbd8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 23ffbe8:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 23ffbf8:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 23ffc08:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 23ffc18:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 23ffc28:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 23ffc38:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 23ffc48:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 23ffc58:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 23ffc68:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 23ffc78:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 23ffc88:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 23ffc98:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 23ffca8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 23ffcb8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 23ffcc8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 23ffcd8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 23ffce8:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

023ffcf4 <_ZTV12Adafruit_GFX>:
	...
 23ffd04:	da25 023f e6d1 023f cc99 023f d73d 023f     %.?...?...?.=.?.
 23ffd14:	d863 023f d87f 023f d7fb 023f d899 023f     c.?...?...?...?.
 23ffd24:	d8cf 023f d8eb 023f                         ..?...?.

023ffd2c <_ZTVN5spark13EthernetClassE>:
	...
 23ffd34:	e43f 023f e435 023f e42b 023f e421 023f     ?.?.5.?.+.?.!.?.
 23ffd44:	e415 023f e409 023f f0b5 023f f0bd 023f     ..?...?...?...?.
 23ffd54:	e3fd 023f e3f5 023f e3eb 023f e3e1 023f     ..?...?...?...?.
 23ffd64:	f1e5 023f f0ed 023f f0f5 023f               ..?...?...?.

023ffd70 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffd70:	0800 1810 2820 3830 7061 0070 005a 2b25     .... (08app.Z.%+
 23ffd80:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 23ffd90:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 23ffda0:	6974 656d 0000 0000                         time....

023ffda8 <_ZTV9IPAddress>:
	...
 23ffdb0:	ec2d 023f ec1d 023f ec1f 023f               -.?...?...?.

023ffdbc <_ZTV9USBSerial>:
	...
 23ffdc4:	ed13 023f ed7b 023f ed51 023f e6d1 023f     ..?.{.?.Q.?...?.
 23ffdd4:	ed43 023f ed15 023f ed25 023f ed75 023f     C.?...?.%.?.u.?.
 23ffde4:	e823 023f ed35 023f ed0d 023f               #.?.5.?...?.

023ffdf0 <_ZTV11USARTSerial>:
	...
 23ffdf8:	ee11 023f ee7d 023f ee55 023f e6d1 023f     ..?.}.?.U.?...?.
 23ffe08:	ee25 023f ee41 023f ee33 023f ee4f 023f     %.?.A.?.3.?.O.?.
 23ffe18:	e823 023f ee13 023f ee17 023f               #.?...?...?.

023ffe24 <_ZTV7TwoWire>:
	...
 23ffe2c:	eebb 023f ef05 023f eedd 023f eebd 023f     ..?...?...?...?.
 23ffe3c:	eee5 023f eeed 023f eef5 023f eefd 023f     ..?...?...?...?.
 23ffe4c:	e823 023f                                   #.?.

023ffe50 <_ZTVN5spark9WiFiClassE>:
	...
 23ffe58:	f057 023f f04d 023f f043 023f eff9 023f     W.?.M.?.C.?...?.
 23ffe68:	f037 023f f02b 023f f0b5 023f f0bd 023f     7.?.+.?...?...?.
 23ffe78:	f01f 023f f017 023f f00d 023f f003 023f     ..?...?...?...?.
 23ffe88:	f1e5 023f f0ed 023f f0f5 023f               ..?...?...?.

023ffe94 <CSWTCH.109>:
 23ffe94:	ae74 1007 aef4 1007 aefc 1007               t...........

023ffea0 <_ZTVN5spark12NetworkClassE>:
	...
 23ffea8:	f075 023f f07f 023f f089 023f f093 023f     u.?...?...?...?.
 23ffeb8:	f09d 023f f0a9 023f f0b5 023f f0bd 023f     ..?...?...?...?.
 23ffec8:	f0c5 023f f0d1 023f f0d9 023f f0e3 023f     ..?...?...?...?.
 23ffed8:	f1e5 023f f0ed 023f f0f5 023f               ..?...?...?.

023ffee4 <_ZSt7nothrow>:
 23ffee4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 23ffef4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

023fff05 <day_name.1>:
 23fff05:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 23fff15:	6972 6153                                    riSat

023fff1a <mon_name.0>:
 23fff1a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 23fff2a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 23fff3a:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
 23fff4a:	7320 6375 6563 6465 6465 2f00 6e6d 2f74      succeeded./mnt/
 23fff5a:	6f77 6b72 7073 6361 2f65 6f77 6b72 7073     workspace/worksp
 23fff6a:	6361 2f65 4347 2d43 3031 702d 7069 6c65     ace/GCC-10-pipel
 23fff7a:	6e69 2f65 656a 6b6e 6e69 2d73 4347 2d43     ine/jenkins-GCC-
 23fff8a:	3031 702d 7069 6c65 6e69 2d65 3834 325f     10-pipeline-48_2
 23fff9a:	3230 3130 3231 5f34 3631 3630 3831 3630     0201124_16061806
 23fffaa:	3134 732f 6372 6e2f 7765 696c 2f62 656e     41/src/newlib/ne
 23fffba:	6c77 6269 6c2f 6269 2f63 7473 6c64 6269     wlib/libc/stdlib
 23fffca:	722f 6e61 2e64 0063                         /rand.c.

023fffd2 <link_const_data_end>:
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fcfdd 	.word	0x023fcfdd
 23fffd8:	023fe449 	.word	0x023fe449
 23fffdc:	023fe5dd 	.word	0x023fe5dd
 23fffe0:	023fe6c1 	.word	0x023fe6c1
 23fffe4:	023fe84d 	.word	0x023fe84d
 23fffe8:	023feaa5 	.word	0x023feaa5
 23fffec:	023feac1 	.word	0x023feac1
 23ffff0:	023fefdd 	.word	0x023fefdd
 23ffff4:	023ff061 	.word	0x023ff061
 23ffff8:	023ff1f9 	.word	0x023ff1f9
